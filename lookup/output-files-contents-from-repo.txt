--------------------------------------------------------------------------------
REPO: /media/ngoc/mydisk/master-program/program-modules/nttmarket/codes/ngoctuan2907.github.io
INCLUDE: app, lib, components, supabase
FILES: 123
--------------------------------------------------------------------------------

--- FILE: app/about/page.tsx ---
"use client"

import Link from "next/link"
import Image from "next/image"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Heart, Users, ShieldCheck, Clock, MapPin, Star } from "lucide-react"

export default function AboutPage() {
  const features = [
    {
      icon: <Heart className="w-8 h-8 text-red-500" />,
      title: "Home-Cooked with Love",
      description: "Every dish is prepared with care in the comfort of home kitchens by passionate home chefs who love what they do."
    },
    {
      icon: <Users className="w-8 h-8 text-blue-500" />,
      title: "Supporting Local Communities",
      description: "We empower home-based food entrepreneurs and bring neighborhoods together through authentic, local flavors."
    },
    {
      icon: <ShieldCheck className="w-8 h-8 text-green-500" />,
      title: "Safe & Trusted",
      description: "All our home cafes are verified and follow strict hygiene standards to ensure safe and quality dining experiences."
    }
  ]

  const stats = [
    { number: "500+", label: "Home Cafes" },
    { number: "10,000+", label: "Happy Customers" },
    { number: "50,000+", label: "Orders Delivered" },
    { number: "4.8/5", label: "Average Rating" }
  ]

  const team = [
    {
      name: "Sarah Lim",
      role: "Founder & CEO",
      bio: "Former food blogger turned entrepreneur, passionate about Singapore's home dining culture.",
      image: "/placeholder-user.jpg"
    },
    {
      name: "Marcus Tan",
      role: "Head of Operations",
      bio: "Ensures quality and safety standards across all our partner home cafes.",
      image: "/placeholder-user.jpg"
    },
    {
      name: "Priya Rajesh",
      role: "Community Manager",
      bio: "Connects home chefs with food lovers and builds our vibrant community.",
      image: "/placeholder-user.jpg"
    }
  ]

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <Link href="/" className="flex items-center space-x-2">
              <div className="w-10 h-10 bg-gradient-to-r from-orange-500 to-red-500 rounded-full flex items-center justify-center">
                <span className="text-white font-bold text-lg">SG</span>
              </div>
              <span className="font-bold text-xl text-gray-900">SG Home Eats</span>
            </Link>
            <Button asChild variant="outline">
              <Link href="/">‚Üê Back to Home</Link>
            </Button>
          </div>
        </div>
      </header>

      {/* Hero Section */}
      <section className="bg-gradient-to-br from-orange-50 to-red-50 py-16">
        <div className="container mx-auto px-4 text-center">
          <h1 className="text-4xl md:text-5xl font-bold text-gray-900 mb-6">
            Bringing Singapore's Home Kitchens 
            <br />
            <span className="text-orange-600">to Your Table</span>
          </h1>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto mb-8">
            SG Home Eats is Singapore's premier platform connecting food lovers with passionate home chefs. 
            We believe the best meals come from the heart of home kitchens, where every dish tells a story 
            and every bite brings communities together.
          </p>
          <div className="flex flex-wrap justify-center gap-4">
            <Button asChild size="lg">
              <Link href="/browse">Browse Home Cafes</Link>
            </Button>
            <Button asChild size="lg" variant="outline">
              <Link href="/register-business">Become a Home Chef</Link>
            </Button>
          </div>
        </div>
      </section>

      {/* Stats Section */}
      <section className="py-16 bg-white">
        <div className="container mx-auto px-4">
          <div className="grid grid-cols-2 md:grid-cols-4 gap-8 text-center">
            {stats.map((stat, index) => (
              <div key={index} className="space-y-2">
                <div className="text-3xl md:text-4xl font-bold text-orange-600">
                  {stat.number}
                </div>
                <div className="text-gray-600 font-medium">
                  {stat.label}
                </div>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section className="py-16">
        <div className="container mx-auto px-4">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold text-gray-900 mb-4">Why Choose SG Home Eats?</h2>
            <p className="text-lg text-gray-600 max-w-2xl mx-auto">
              We're more than just a food delivery platform. We're building a community 
              that celebrates Singapore's rich culinary heritage.
            </p>
          </div>
          
          <div className="grid md:grid-cols-3 gap-8">
            {features.map((feature, index) => (
              <Card key={index} className="text-center h-full">
                <CardContent className="p-8">
                  <div className="flex justify-center mb-4">
                    {feature.icon}
                  </div>
                  <h3 className="text-xl font-bold text-gray-900 mb-4">
                    {feature.title}
                  </h3>
                  <p className="text-gray-600">
                    {feature.description}
                  </p>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>

      {/* Mission Section */}
      <section className="py-16 bg-white">
        <div className="container mx-auto px-4">
          <div className="max-w-4xl mx-auto text-center">
            <h2 className="text-3xl font-bold text-gray-900 mb-6">Our Mission</h2>
            <p className="text-lg text-gray-600 mb-8">
              To preserve and celebrate Singapore's diverse food culture by empowering home chefs 
              and making authentic, home-cooked meals accessible to everyone. We believe that food 
              is the bridge that connects communities, and every home kitchen has a unique story to tell.
            </p>
            <div className="bg-gradient-to-r from-orange-50 to-red-50 rounded-lg p-8">
              <blockquote className="text-xl text-gray-700 italic mb-4">
                "Food prepared with love in the comfort of home carries something special that 
                no restaurant can replicate - the warmth of family traditions and the care of 
                someone who truly loves what they do."
              </blockquote>
              <cite className="text-orange-600 font-semibold">- Sarah Lim, Founder</cite>
            </div>
          </div>
        </div>
      </section>

      {/* Team Section */}
      <section className="py-16">
        <div className="container mx-auto px-4">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold text-gray-900 mb-4">Meet Our Team</h2>
            <p className="text-lg text-gray-600 max-w-2xl mx-auto">
              The passionate individuals working to bring Singapore's home kitchens to your table.
            </p>
          </div>
          
          <div className="grid md:grid-cols-3 gap-8 max-w-4xl mx-auto">
            {team.map((member, index) => (
              <Card key={index} className="text-center">
                <CardContent className="p-6">
                  <div className="relative w-24 h-24 mx-auto mb-4 rounded-full overflow-hidden">
                    <Image
                      src={member.image}
                      alt={member.name}
                      fill
                      className="object-cover"
                      onError={(e) => {
                        const target = e.target as HTMLImageElement;
                        target.src = '/placeholder-user.jpg';
                      }}
                    />
                  </div>
                  <h3 className="text-xl font-bold text-gray-900 mb-2">
                    {member.name}
                  </h3>
                  <Badge variant="secondary" className="mb-4">
                    {member.role}
                  </Badge>
                  <p className="text-gray-600 text-sm">
                    {member.bio}
                  </p>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-16 bg-gradient-to-br from-orange-500 to-red-500 text-white">
        <div className="container mx-auto px-4 text-center">
          <h2 className="text-3xl font-bold mb-4">Ready to Experience Home-Cooked Goodness?</h2>
          <p className="text-xl mb-8 opacity-90">
            Join thousands of food lovers discovering amazing home cafes across Singapore.
          </p>
          <div className="flex flex-wrap justify-center gap-4">
            <Button asChild size="lg" variant="secondary">
              <Link href="/browse">Start Browsing</Link>
            </Button>
            <Button asChild size="lg" variant="outline" className="bg-transparent border-white text-white hover:bg-white hover:text-orange-600">
              <Link href="/register-business">Become a Partner</Link>
            </Button>
          </div>
        </div>
      </section>
    </div>
  )
}


--- FILE: app/api/auth/check-email/route.ts ---
import { type NextRequest, NextResponse } from "next/server"

export async function POST(request: NextRequest) {
  try {
    const { email } = await request.json()
    
    if (!email) {
      return NextResponse.json(
        { error: "Email is required" },
        { status: 400 }
      )
    }
    
    // For now, we'll return that email doesn't exist to allow signup
    // In a production app, you might want to implement a more sophisticated check
    return NextResponse.json({ 
      exists: false,
      userType: null
    })
  } catch (error: any) {
    console.error("Check email error:", error)
    return NextResponse.json(
      { error: "Failed to check email" },
      { status: 500 }
    )
  }
}


--- FILE: app/api/auth/create-profile/route.ts ---
import { type NextRequest, NextResponse } from "next/server"
import { createServerClientForApi } from "@/lib/supabase-api"

export async function POST(request: NextRequest) {
  console.log("üîÑ [VERCEL LOG] Create profile API called")
  
  try {
    const supabase = createServerClientForApi()
    const authHeader = request.headers.get("authorization")
    const token = authHeader?.startsWith("Bearer ") ? authHeader.slice(7) : undefined
    const { data: { user }, error: authError } = await supabase.auth.getUser(token)
    
    if (authError || !user) {
      console.error("‚ùå [VERCEL LOG] Not authenticated:", authError)
      return NextResponse.json(
        { error: "Not authenticated" },
        { status: 401 }
      )
    }

    console.log("‚úÖ [VERCEL LOG] User authenticated:", user.id)

    // Check if profile already exists
    const { data: existingProfile } = await supabase
      .from("user_profiles")
      .select("*")
      .eq("user_id", user.id)
      .single()

    if (existingProfile) {
      console.log("‚ÑπÔ∏è  [VERCEL LOG] Profile already exists")
      return NextResponse.json({ 
        message: "Profile already exists",
        profile: existingProfile 
      })
    }

    // Create profile from user metadata
    const userMetadata = user.user_metadata || {}
    const appMetadata = user.app_metadata || {}

    const profileData = {
      user_id: user.id,
      first_name: userMetadata.first_name || appMetadata.first_name || 'Unknown',
      last_name: userMetadata.last_name || appMetadata.last_name || 'User',
      user_type: userMetadata.user_type || appMetadata.user_type || 'customer',
      phone: userMetadata.phone || appMetadata.phone || null,
      intended_business_name: userMetadata.intended_business_name || appMetadata.intended_business_name || null
    }

    console.log("üìù [VERCEL LOG] Creating profile with data:", profileData)

    const { data: newProfile, error: createError } = await supabase
      .from("user_profiles")
      .insert(profileData)
      .select()
      .single()

    if (createError) {
      console.error("‚ùå [VERCEL LOG] Profile creation failed:", {
        message: createError.message || 'No message',
        code: createError.code || 'No code',
        details: createError.details || 'No details',
        hint: createError.hint || 'No hint'
      })
      
      return NextResponse.json(
        { 
          error: "Failed to create profile",
          details: createError.message || 'Unknown error'
        },
        { status: 500 }
      )
    }

    console.log("‚úÖ [VERCEL LOG] Profile created successfully:", newProfile)
    
    return NextResponse.json({ 
      message: "Profile created successfully",
      profile: newProfile 
    })

  } catch (error: any) {
    console.error("üí• [VERCEL LOG] Create profile error:", error)
    return NextResponse.json(
      { error: error.message || "Internal server error" },
      { status: 500 }
    )
  }
}


--- FILE: app/api/auth/resend-verification/route.ts ---
import { type NextRequest, NextResponse } from "next/server"
import { createServerClientForApi } from "@/lib/supabase-api"

export async function POST(request: NextRequest) {
  try {
    const supabase = createServerClientForApi()
    const { email } = await request.json()
    
    if (!email) {
      return NextResponse.json(
        { error: "Email is required" },
        { status: 400 }
      )
    }
    
    // Resend verification email with server client
    await supabase.auth.resend({
      type: 'signup',
      email,
    })
    
    return NextResponse.json({ 
      message: "Verification email sent successfully" 
    })
  } catch (error: any) {
    console.error("Resend verification error:", error)
    return NextResponse.json(
      { error: error.message || "Failed to resend verification email" },
      { status: 500 }
    )
  }
}


--- FILE: app/api/auth/reset-password/route.ts ---
import { type NextRequest, NextResponse } from "next/server"
import { createServerClientForApi } from "@/lib/supabase-api"
import { resetPasswordSchema } from "@/lib/auth-schemas"

export async function POST(request: NextRequest) {
  try {
    const supabase = createServerClientForApi()
    const body = await request.json()
    
    // Validate input
    const validatedData = resetPasswordSchema.parse(body)
    
    // Send reset password email with server client
    const { error } = await supabase.auth.resetPasswordForEmail(validatedData.email)
    
    if (error) {
      throw error
    }

    return NextResponse.json({ 
      message: "Password reset email sent. Please check your inbox." 
    })
  } catch (error: any) {
    console.error("Reset password error:", error)
    
    if (error.name === "ZodError") {
      return NextResponse.json(
        { error: "Invalid email address", details: error.errors },
        { status: 400 }
      )
    }
    
    return NextResponse.json(
      { error: error.message || "Failed to send reset email" },
      { status: 500 }
    )
  }
}


--- FILE: app/api/auth/signin/route.ts ---
import { type NextRequest, NextResponse } from "next/server"
import { createServerClientForApi } from "@/lib/supabase-api"
import { signInSchema } from "@/lib/auth-schemas"

export async function POST(request: NextRequest) {
  console.log("üîê [VERCEL LOG] Signin API called at:", new Date().toISOString())
  
  try {
    const supabase = createServerClientForApi()
    const body = await request.json()
    console.log("üì• [VERCEL LOG] Signin request for email:", body.email)
    
    // Validate input
    const validatedData = signInSchema.parse(body)
    console.log("‚úÖ [VERCEL LOG] Signin data validation successful")
    
    // Sign in user with server client
    console.log("üîÑ [VERCEL LOG] Calling supabase.auth.signInWithPassword...")
    const { data, error } = await supabase.auth.signInWithPassword({
      email: validatedData.email,
      password: validatedData.password,
    })

    if (error) {
      console.error("‚ùå [VERCEL LOG] Supabase signin error:", error)
      
      // Handle specific error cases
      if (error.message === "Invalid login credentials") {
        // Check if it's an unverified email issue
        throw new Error("Invalid email or password. If you just signed up, please check your email and verify your account first.")
      }
      
      if (error.message === "Email not confirmed") {
        throw new Error("Please check your email and click the verification link before signing in.")
      }
      
      throw error
    }

    const result = data

    console.log("‚úÖ [VERCEL LOG] SignIn successful:", {
      userId: result.user?.id,
      email: result.user?.email,
      emailConfirmed: result.user?.email_confirmed_at
    })

    return NextResponse.json({ 
      message: "Signed in successfully",
      user: result.user 
    })
  } catch (error: any) {
    // üü¢ Enhanced error logging as requested  
    console.error("‚ùå [VERCEL LOG] Sign in error:", JSON.stringify({
      message: error.message,
      name: error.name,
      timestamp: new Date().toISOString()
    }, null, 2))
    
    if (error.name === "ZodError") {
      return NextResponse.json(
        { error: "Invalid input data", details: error.errors },
        { status: 400 }
      )
    }
    
    // Handle specific auth errors
    if (error.message?.includes("Invalid login credentials")) {
      console.log("‚ö†Ô∏è  [VERCEL LOG] Invalid credentials - possible unverified email")
      return NextResponse.json(
        { error: "Invalid email or password. If you just signed up, please verify your email first." },
        { status: 401 }
      )
    }

    if (error.message?.includes("Email not confirmed")) {
      console.log("üìß [VERCEL LOG] Email not confirmed")
      return NextResponse.json(
        { error: "Please check your email and click the verification link before signing in." },
        { status: 401 }
      )
    }

    if (error.message?.includes("verify your email")) {
      return NextResponse.json(
        { error: error.message },
        { status: 401 }
      )
    }
    
    console.error("üí• [VERCEL LOG] Unhandled signin error - returning 500")
    return NextResponse.json(
      { error: error.message || "Failed to sign in" },
      { status: 500 }
    )
  }
}


--- FILE: app/api/auth/signup/route.ts ---
import { type NextRequest, NextResponse } from "next/server"
import { createServerClientForApi } from "@/lib/supabase-api"
import { checkEmailExists } from "@/lib/database"
import { signUpSchema } from "@/lib/auth-schemas"

export async function POST(request: NextRequest) {
  console.log("üöÄ [VERCEL LOG] Signup API called at:", new Date().toISOString())
  
  try {
    const supabase = createServerClientForApi()
    const body = await request.json()
    console.log("üì• [VERCEL LOG] Request body received:", {
      email: body.email,
      userType: body.userType,
      firstName: body.firstName,
      lastName: body.lastName,
      hasPassword: !!body.password
    })
    
    // Validate input
    const validatedData = signUpSchema.parse(body)
    console.log("‚úÖ [VERCEL LOG] Data validation successful")
    
    // Check if email already exists (temporarily disabled to avoid conflicts)
    // const existingUser = await checkEmailExists(supabase, validatedData.email)
    // if (existingUser) {
    //   return NextResponse.json(
    //     { 
    //       error: "An account with this email already exists",
    //       userType: existingUser.user_type 
    //     }, 
    //     { status: 409 }
    //   )
    // }

    console.log("üîÑ [VERCEL LOG] Calling signUp function...")
    
    // üö® DEBUG: Log which keys are being used
    console.log("üîç [VERCEL LOG] Environment check:", {
      hasAnonKey: !!process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
      hasServiceKey: !!process.env.SUPABASE_SERVICE_ROLE_KEY,
      anonKeyPrefix: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY?.substring(0, 20),
      siteUrl: process.env.NEXT_PUBLIC_SITE_URL,
      effectiveRedirectUrl: process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000'
    })
    
    // üî¥ CRITICAL: Force production URL for email redirects
    const emailRedirectTo = process.env.NEXT_PUBLIC_SITE_URL 
      ? `${process.env.NEXT_PUBLIC_SITE_URL}/auth/callback`
      : 'https://v0-singapore-cafe-websites.vercel.app/auth/callback'  // üü¢ Hardcoded fallback
    
    console.log("üìß [VERCEL LOG] Email redirect URL:", emailRedirectTo)
    
    // Create user account with server client - now creating profile server-side
    const { data, error } = await supabase.auth.signUp({
      email: validatedData.email,
      password: validatedData.password,
      options: {
        emailRedirectTo,
        data: {
          first_name: validatedData.firstName,
          last_name: validatedData.lastName,
          user_type: validatedData.userType,
          phone: validatedData.phone,
          intended_business_name: validatedData.intendedBusinessName,
        }
      }
    })

    if (error) {
      console.error("‚ùå [VERCEL LOG] Supabase signup error:", {
        message: error.message,
        status: error.status,
        name: error.name
      })
      throw error
    }

    console.log("‚úÖ [VERCEL LOG] Supabase auth signup successful:", {
      userId: data.user?.id,
      userEmail: data.user?.email,
      emailConfirmed: data.user?.email_confirmed_at,
      sessionExists: !!data.session
    })

    // Create user profile server-side after successful signup
    if (data.user) {
      console.log("üë§ [VERCEL LOG] Creating user profile for user:", data.user.id)
      
      const profileData = {
        user_id: data.user.id,
        first_name: validatedData.firstName,
        last_name: validatedData.lastName,
        user_type: validatedData.userType,
        phone: validatedData.phone ?? null,
        intended_business_name: validatedData.intendedBusinessName || null,
      }
      
      console.log("üìù [VERCEL LOG] Profile data to insert:", profileData)
      
      const { data: insertedProfile, error: profileError } = await supabase
        .from("user_profiles")
        .insert(profileData)
        .select()

      if (profileError) {
        console.error("‚ùå [VERCEL LOG] Error creating user profile:", {
          message: profileError.message || 'No message',
          code: profileError.code || 'No code',
          details: profileError.details || 'No details',
          hint: profileError.hint || 'No hint',
          originalError: JSON.stringify(profileError, null, 2)
        })
        // Don't throw here - user is created, profile creation can be retried
      } else {
        console.log("‚úÖ [VERCEL LOG] User profile created successfully:", insertedProfile)
      }
    }

    const result = data

    console.log("‚úÖ [VERCEL LOG] SignUp function completed:", {
      userId: result.user?.id,
      email: result.user?.email,
      emailConfirmed: result.user?.email_confirmed_at,
      needsVerification: !result.user?.email_confirmed_at
    })

    // Check if user needs email verification
    if (result.user && !result.user.email_confirmed_at) {
      console.log("üìß [VERCEL LOG] Email verification required - sending response")
      return NextResponse.json({ 
        message: "Account created successfully! Please check your email and click the verification link before signing in.",
        user: result.user,
        needsVerification: true
      })
    }

    console.log("‚úÖ [VERCEL LOG] Account created and verified - sending success response")
    return NextResponse.json({ 
      message: "Account created successfully. You can now sign in.",
      user: result.user,
      needsVerification: false
    })
  } catch (error: any) {
    // üü¢ Enhanced error logging as requested
    console.error("‚ùå [VERCEL LOG] Sign up error:", JSON.stringify({
      message: error.message,
      name: error.name,
      stack: error.stack?.substring(0, 500), // Truncate stack for readability
      timestamp: new Date().toISOString()
    }, null, 2))
    
    if (error.name === "ZodError") {
      console.error("üìù [VERCEL LOG] Validation error details:", error.errors)
      return NextResponse.json(
        { error: "Invalid input data", details: error.errors },
        { status: 400 }
      )
    }

    // Handle Supabase auth errors
    if (error.message?.includes("already registered")) {
      console.log("‚ö†Ô∏è  [VERCEL LOG] User already registered")
      return NextResponse.json(
        { error: "An account with this email already exists. Please sign in instead." },
        { status: 409 }
      )
    }
    
    console.error("üí• [VERCEL LOG] Unhandled signup error - returning 500")
    return NextResponse.json(
      { error: error.message || "Failed to create account" },
      { status: 500 }
    )
  }
}


--- FILE: app/api/businesses/[slug]/analytics/route.ts ---
import { type NextRequest, NextResponse } from "next/server"
import { getBusinessAnalytics, getBusinessBySlug } from "@/lib/database"
import { createServerClientForApi } from "@/lib/supabase-api"

// Force dynamic rendering for this route
export const dynamic = 'force-dynamic'

export async function GET(request: NextRequest, { params }: { params: { slug: string } }) {
  try {
    const supabase = createServerClientForApi()
    const business = await getBusinessBySlug(supabase, params.slug)
    const analytics = await getBusinessAnalytics(supabase, business.id)

    return NextResponse.json({ analytics })
  } catch (error) {
    console.error("Error fetching analytics:", error)
    return NextResponse.json({ error: "Failed to fetch analytics" }, { status: 500 })
  }
}


--- FILE: app/api/businesses/[slug]/route.ts ---
import { type NextRequest, NextResponse } from "next/server"
import { getBusinessBySlug, createBusinessView } from "@/lib/database"
import { createServerClientForApi } from "@/lib/supabase-api"

// Force dynamic rendering for this route
export const dynamic = 'force-dynamic'

export async function GET(request: NextRequest, { params }: { params: { slug: string } }) {
  try {
    const supabase = createServerClientForApi()
    const business = await getBusinessBySlug(supabase, params.slug)

    // Track the view
    const forwardedFor = request.headers.get("x-forwarded-for")
    const userAgent = request.headers.get("user-agent")
    const viewerIp = forwardedFor?.split(",")[0] || "unknown"

    await createBusinessView(supabase, business.id, viewerIp, userAgent || undefined)

    return NextResponse.json({ business })
  } catch (error) {
    console.error("Error fetching business:", error)
    return NextResponse.json({ error: "Business not found" }, { status: 404 })
  }
}


--- FILE: app/api/businesses/route.ts ---
import { type NextRequest, NextResponse } from "next/server"
import { getBusinesses } from "@/lib/database"
import { createServerClientForApi } from "@/lib/supabase-api"

// Force dynamic rendering for this route
export const dynamic = 'force-dynamic'

export async function GET(request: NextRequest) {
  try {
    const supabase = createServerClientForApi()
    const { searchParams } = request.nextUrl
    const district = searchParams.get("district") || undefined
    const cuisine = searchParams.get("cuisine") || undefined
    const search = searchParams.get("search") || undefined
    const limit = searchParams.get("limit") ? Number.parseInt(searchParams.get("limit")!) : undefined

    const businesses = await getBusinesses(supabase, {
      district,
      cuisine,
      search,
      limit,
    })

    return NextResponse.json({ businesses })
  } catch (error) {
    console.error("Error fetching businesses:", error)
    return NextResponse.json({ error: "Failed to fetch businesses" }, { status: 500 })
  }
}


--- FILE: app/api/checkout/route.ts ---
import { NextRequest, NextResponse } from 'next/server'
import { createServerClientForApi } from "@/lib/supabase-api"

// This would normally use Stripe SDK, but for MVP we'll simulate it
// import Stripe from 'stripe'
// const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!)

export async function POST(request: NextRequest) {
  try {
    console.log("üí≥ [VERCEL LOG] Checkout API called at:", new Date().toISOString())

    const supabase = createServerClientForApi()
    const body = await request.json()
    const { items, customerInfo, businessId } = body

    // Validate required fields
    if (!items || !Array.isArray(items) || items.length === 0) {
      return NextResponse.json(
        { error: "Items are required" },
        { status: 400 }
      )
    }

    if (!customerInfo || !customerInfo.name || !customerInfo.phone) {
      return NextResponse.json(
        { error: "Customer name and phone are required" },
        { status: 400 }
      )
    }

    if (!businessId) {
      return NextResponse.json(
        { error: "Business ID is required" },
        { status: 400 }
      )
    }

    // Calculate total from server-side prices (security - never trust client)
    let totalAmount = 0
    const orderItems = []

    for (const item of items) {
      // In real app, fetch actual menu item prices from database
      const serverPrice = parseFloat(item.price) // Mock - should be fetched from DB
      const itemTotal = serverPrice * item.quantity
      totalAmount += itemTotal

      orderItems.push({
        menu_item_id: item.id,
        item_name: item.name,
        item_price: serverPrice,
        quantity: item.quantity,
        subtotal: itemTotal,
        special_instructions: item.notes || null
      })
    }

    // For MVP, simulate payment processing
    // In production, this would create a Stripe Checkout Session:
    /*
    const session = await stripe.checkout.sessions.create({
      payment_method_types: ['card'],
      line_items: items.map(item => ({
        price_data: {
          currency: 'sgd',
          product_data: {
            name: item.name,
          },
          unit_amount: Math.round(item.price * 100), // Stripe uses cents
        },
        quantity: item.quantity,
      })),
      mode: 'payment',
      success_url: `${process.env.NEXT_PUBLIC_SITE_URL}/orders/success?session_id={CHECKOUT_SESSION_ID}`,
      cancel_url: `${process.env.NEXT_PUBLIC_SITE_URL}/cafe/${businessId}`,
      metadata: {
        businessId,
        customerName: customerInfo.name,
        customerPhone: customerInfo.phone,
      }
    })
    */

    // For now, create order directly (simulating successful payment)
    const orderNumber = `ORD-${Date.now()}`
    
    const { data: order, error: orderError } = await supabase
      .from('orders')
      .insert({
        order_number: orderNumber,
        business_id: businessId,
        customer_name: customerInfo.name,
        customer_phone: customerInfo.phone,
        customer_email: customerInfo.email || null,
        total_amount: totalAmount,
        status: 'pending', // Would be 'paid' after webhook confirmation
        notes: customerInfo.notes || null,
        pickup_time: customerInfo.pickupTime || null
      })
      .select()
      .single()

    if (orderError) {
      console.error("‚ùå [VERCEL LOG] Order creation error:", orderError)
      return NextResponse.json(
        { error: "Failed to create order" },
        { status: 500 }
      )
    }

    // Create order items
    const { error: itemsError } = await supabase
      .from('order_items')
      .insert(
        orderItems.map(item => ({
          order_id: order.id,
          ...item
        }))
      )

    if (itemsError) {
      console.error("‚ùå [VERCEL LOG] Order items creation error:", itemsError)
      return NextResponse.json(
        { error: "Failed to create order items" },
        { status: 500 }
      )
    }

    console.log("‚úÖ [VERCEL LOG] Order created successfully:", orderNumber)

    // Return mock checkout session for MVP
    return NextResponse.json({
      sessionId: `cs_mock_${orderNumber}`,
      url: `/orders/success?order=${orderNumber}`,
      orderId: order.id,
      orderNumber,
      message: "Order created successfully (mock payment)",
      totalAmount
    })

  } catch (error) {
    console.error("‚ùå [VERCEL LOG] Checkout API error:", error)
    return NextResponse.json(
      { error: "Failed to process checkout" },
      { status: 500 }
    )
  }
}


--- FILE: app/api/orders/route.ts ---
import { type NextRequest, NextResponse } from "next/server"
import { createServerClientForApi } from "@/lib/supabase-api"

// Force dynamic rendering for this route
export const dynamic = 'force-dynamic'

export async function POST(request: NextRequest) {
  const supabase = createServerClientForApi()
  try {
    const body = await request.json()
    const {
      business_id,
      customer_id,
      customer_name,
      customer_phone,
      customer_email,
      items,
      total_amount,
      notes,
      pickup_time,
    } = body

    // Generate order number
    const orderNumber = `ORD-${Date.now().toString().slice(-6)}`

    // Create order
    const { data: order, error: orderError } = await supabase
      .from("orders")
      .insert({
        order_number: orderNumber,
        business_id,
        customer_id,
        customer_name,
        customer_phone,
        customer_email,
        total_amount,
        notes,
        pickup_time,
        status: "pending",
      })
      .select()
      .single()

    if (orderError) throw orderError

    // Create order items
    const orderItems = items.map((item: any) => ({
      order_id: order.id,
      menu_item_id: item.menu_item_id,
      item_name: item.name,
      item_price: item.price,
      quantity: item.quantity,
      subtotal: item.price * item.quantity,
      special_instructions: item.special_instructions,
    }))

    const { error: itemsError } = await supabase.from("order_items").insert(orderItems)

    if (itemsError) throw itemsError

    return NextResponse.json({ order }, { status: 201 })
  } catch (error) {
    console.error("Error creating order:", error)
    return NextResponse.json({ error: "Failed to create order" }, { status: 500 })
  }
}


--- FILE: app/api/reviews/route.ts ---
import { type NextRequest, NextResponse } from "next/server"
import { createServerClientForApi } from "@/lib/supabase-api"

// Force dynamic rendering for this route
export const dynamic = 'force-dynamic'

export async function POST(request: NextRequest) {
  const supabase = createServerClientForApi()
  try {
    const body = await request.json()
    const { business_id, customer_id, rating, comment } = body

    // Validate required fields
    if (!business_id || !customer_id || !rating) {
      return NextResponse.json({ error: "Missing required fields" }, { status: 400 })
    }

    // Validate rating range
    if (rating < 1 || rating > 5) {
      return NextResponse.json({ error: "Rating must be between 1 and 5" }, { status: 400 })
    }

    const { data, error } = await supabase
      .from("reviews")
      .insert({
        business_id,
        customer_id,
        rating,
        comment,
        status: "published",
      })
      .select()
      .single()

    if (error) {
      if (error.code === "23505") {
        // Unique constraint violation
        return NextResponse.json({ error: "You have already reviewed this business" }, { status: 409 })
      }
      throw error
    }

    return NextResponse.json({ review: data }, { status: 201 })
  } catch (error) {
    console.error("Error creating review:", error)
    return NextResponse.json({ error: "Failed to create review" }, { status: 500 })
  }
}


--- FILE: app/api/stats/route.ts ---
import { NextResponse } from 'next/server'
import { createServerClientForApi } from "@/lib/supabase-api"

export async function GET() {
  try {
    console.log("üìä [VERCEL LOG] Stats API called at:", new Date().toISOString())

    const supabase = createServerClientForApi()
    let cafesCount = 4 // Default to our mock cafes
    let customersCount = 1247 // Mock data
    let ordersCount = 5692 // Mock data

    try {
      // Try to get real data from database
      const { count: businessCount } = await supabase
        .from('businesses')
        .select('*', { count: 'exact', head: true })
        .eq('status', 'active')

      if (businessCount !== null && businessCount > 0) {
        cafesCount = businessCount
      }

      // TODO: Add real customer and order queries when data is available
      // const { count: customerCount } = await supabase
      //   .from('orders')
      //   .select('user_id', { count: 'exact', head: true })
      //   .eq('status', 'completed')
      //   .group('user_id')
      
      // const { count: orderCount } = await supabase
      //   .from('orders')
      //   .select('id', { count: 'exact', head: true })
      //   .eq('status', 'completed')

    } catch (dbError) {
      console.log("üìä [VERCEL LOG] Using fallback data, DB query failed:", dbError)
      // Keep mock data if DB query fails
    }

    // Format numbers with + suffix if over threshold
    const formatStat = (num: number) => {
      if (num >= 1000) {
        return `${Math.floor(num / 1000)}K+`
      } else if (num >= 100) {
        return `${Math.floor(num / 100) * 100}+`
      }
      return num.toString()
    }

    const stats = {
      cafes: formatStat(cafesCount),
      customers: formatStat(customersCount), 
      orders: formatStat(ordersCount)
    }

    console.log("‚úÖ [VERCEL LOG] Stats computed:", stats)

    return NextResponse.json(stats, {
      headers: {
        'Cache-Control': 's-maxage=300, stale-while-revalidate=600' // Cache for 5 min
      }
    })

  } catch (error) {
    console.error("‚ùå [VERCEL LOG] Stats API error:", error)
    
    // Return fallback data on error
    return NextResponse.json({
      cafes: "4+",
      customers: "1K+", 
      orders: "5K+"
    })
  }
}


--- FILE: app/auth/auth-code-error/page.tsx ---
'use client'

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { AlertCircle } from "lucide-react"
import Link from "next/link"

export default function AuthCodeErrorPage() {
  return (
    <div className="min-h-screen flex items-center justify-center p-4">
      <Card className="w-full max-w-md">
        <CardHeader className="text-center">
          <div className="mx-auto w-12 h-12 bg-red-100 rounded-full flex items-center justify-center mb-4">
            <AlertCircle className="w-6 h-6 text-red-600" />
          </div>
          <CardTitle className="text-xl">Authentication Error</CardTitle>
          <CardDescription>
            There was a problem with your email verification link.
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="text-sm text-muted-foreground space-y-2">
            <p>This could happen if:</p>
            <ul className="list-disc list-inside space-y-1 ml-2">
              <li>The verification link has expired</li>
              <li>The link has already been used</li>
              <li>There was a network issue</li>
            </ul>
          </div>
          
          <div className="space-y-2">
            <Button asChild className="w-full">
              <Link href="/auth/signin">
                Try Signing In
              </Link>
            </Button>
            <Button variant="outline" asChild className="w-full">
              <Link href="/auth/signup">
                Create New Account
              </Link>
            </Button>
          </div>
          
          <p className="text-xs text-center text-muted-foreground">
            Need help? Contact support if the problem persists.
          </p>
        </CardContent>
      </Card>
    </div>
  )
}


--- FILE: app/auth/callback/route.ts ---
import { createServerClientComponent } from '@/lib/supabase-server'
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'
import type { EmailOtpType } from '@supabase/supabase-js'

export async function GET(request: NextRequest) {
  console.log("üîÑ [VERCEL LOG] Auth callback called at:", new Date().toISOString())
  
  const { searchParams, origin } = new URL(request.url)
  const code = searchParams.get('code')
  const token_hash = searchParams.get('token_hash')
  const type = searchParams.get('type') as EmailOtpType | null
  const next = searchParams.get('next') ?? '/dashboard'

  console.log("üì• [VERCEL LOG] Callback params:", {
    hasCode: !!code,
    hasTokenHash: !!token_hash,
    type,
    next,
    origin,
    searchParams: Object.fromEntries(searchParams.entries())
  })

  const supabase = createServerClientComponent()

  // Handle OTP verification (email confirmation, password reset, etc.)
  if (token_hash && type) {
    console.log("üîÑ [VERCEL LOG] Verifying OTP:", { type, token_hash: token_hash.substring(0, 10) + '...' })
    
    const { error } = await supabase.auth.verifyOtp({
      type,
      token_hash,
    })
    
    if (!error) {
      console.log("‚úÖ [VERCEL LOG] OTP verification successful")
      return redirectUser(request, origin, next)
    } else {
      console.error("‚ùå [VERCEL LOG] OTP verification failed:", error)
    }
  }
  // Handle OAuth code exchange (for OAuth providers like Google, GitHub, etc.)
  else if (code) {
    console.log("üîÑ [VERCEL LOG] Exchanging OAuth code for session...")
    
    const { error } = await supabase.auth.exchangeCodeForSession(code)
    
    if (!error) {
      console.log("‚úÖ [VERCEL LOG] OAuth code exchange successful")
      return redirectUser(request, origin, next)
    } else {
      console.error("‚ùå [VERCEL LOG] OAuth code exchange failed:", error)
    }
  } else {
    console.warn("‚ö†Ô∏è  [VERCEL LOG] No valid auth parameters provided")
  }

  // return the user to an error page with instructions
  console.log("üö´ [VERCEL LOG] Redirecting to error page")
  return NextResponse.redirect(`${origin}/auth/auth-code-error`)
}

function redirectUser(request: NextRequest, origin: string, next: string) {
  const forwardedHost = request.headers.get('x-forwarded-host')
  const isLocalEnv = process.env.NODE_ENV === 'development'
  
  console.log("üîÑ [VERCEL LOG] Redirecting user:", {
    isLocalEnv,
    forwardedHost,
    redirectTo: next
  })
  
  if (isLocalEnv) {
    return NextResponse.redirect(`${origin}${next}`)
  } else if (forwardedHost) {
    return NextResponse.redirect(`https://${forwardedHost}${next}`)
  } else {
    return NextResponse.redirect(`${origin}${next}`)
  }
}


--- FILE: app/auth/confirm/route.ts ---
import { type EmailOtpType } from '@supabase/supabase-js'
import { type NextRequest, NextResponse } from 'next/server'
import { supabase } from '@/lib/supabaseClient'
import { redirect } from 'next/navigation'

export async function GET(request: NextRequest) {
  console.log("üîÑ [VERCEL LOG] Auth confirmation called at:", new Date().toISOString())
  
  const { searchParams } = new URL(request.url)
  const token_hash = searchParams.get('token_hash')
  const type = searchParams.get('type') as EmailOtpType | null
  const next = searchParams.get('next') ?? '/dashboard'

  console.log("üì• [VERCEL LOG] Confirmation params:", {
    hasTokenHash: !!token_hash,
    type,
    next,
    searchParams: Object.fromEntries(searchParams.entries())
  })

  if (token_hash && type) {
    console.log("üîÑ [VERCEL LOG] Verifying OTP for confirmation:", { 
      type, 
      token_hash: token_hash.substring(0, 10) + '...' 
    })
    
    const { error } = await supabase.auth.verifyOtp({
      type,
      token_hash,
    })

    if (!error) {
      console.log("‚úÖ [VERCEL LOG] Email confirmation successful")
      // redirect user to specified redirect URL or root of app
      redirect(next)
    } else {
      console.error("‚ùå [VERCEL LOG] Email confirmation failed:", error)
    }
  } else {
    console.warn("‚ö†Ô∏è  [VERCEL LOG] Missing token_hash or type parameters")
  }

  // redirect the user to an error page with instructions
  console.log("üö´ [VERCEL LOG] Redirecting to error page")
  redirect('/auth/auth-code-error')
}


--- FILE: app/auth/get-started/page.tsx ---
"use client"

import { useState } from "react"
import Link from "next/link"
import { useRouter } from "next/navigation"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { ArrowLeft, Coffee, Users, Star, TrendingUp } from "lucide-react"

export default function GetStartedPage() {
  const router = useRouter()
  const [selectedType, setSelectedType] = useState<"customer" | "business_owner" | null>(null)

  const handleContinue = () => {
    if (selectedType) {
      router.push(`/auth/signup?type=${selectedType}`)
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-50 to-red-50 flex items-center justify-center p-4">
      <div className="w-full max-w-4xl">
        {/* Header */}
        <div className="text-center mb-8">
          <Link 
            href="/" 
            className="inline-flex items-center text-gray-600 hover:text-gray-900 mb-6 transition-colors"
          >
            <ArrowLeft className="w-4 h-4 mr-2" />
            Back to Home
          </Link>
          
          <h1 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
            Join SG Home Eats
          </h1>
          <p className="text-lg text-gray-600 max-w-2xl mx-auto">
            Choose your account type to get started with Singapore's home-based cafe marketplace
          </p>
        </div>

        {/* Account Type Selection */}
        <div className="grid md:grid-cols-2 gap-6 mb-8">
          {/* Customer Card */}
          <Card 
            className={`cursor-pointer transition-all duration-300 hover:shadow-lg ${
              selectedType === "customer" 
                ? "ring-2 ring-orange-500 bg-orange-50" 
                : "hover:bg-gray-50"
            }`}
            onClick={() => setSelectedType("customer")}
          >
            <CardHeader className="text-center pb-4">
              <div className="mx-auto w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mb-4">
                <Users className="w-8 h-8 text-blue-600" />
              </div>
              <CardTitle className="text-xl">I'm a Food Lover</CardTitle>
              <CardDescription className="text-base">
                Discover and order from amazing home-based cafes
              </CardDescription>
            </CardHeader>
            <CardContent className="pt-0">
              <div className="space-y-3 mb-6">
                <div className="flex items-center text-sm text-gray-600">
                  <Star className="w-4 h-4 mr-2 text-yellow-500" />
                  Browse and review local cafes
                </div>
                <div className="flex items-center text-sm text-gray-600">
                  <Coffee className="w-4 h-4 mr-2 text-orange-500" />
                  Order authentic home-cooked meals
                </div>
                <div className="flex items-center text-sm text-gray-600">
                  <Users className="w-4 h-4 mr-2 text-blue-500" />
                  Connect with passionate home chefs
                </div>
              </div>
              <div className="flex flex-wrap gap-2">
                <Badge variant="secondary" className="text-xs">Easy ordering</Badge>
                <Badge variant="secondary" className="text-xs">Authentic flavors</Badge>
                <Badge variant="secondary" className="text-xs">Community-driven</Badge>
              </div>
            </CardContent>
          </Card>

          {/* Business Owner Card */}
          <Card 
            className={`cursor-pointer transition-all duration-300 hover:shadow-lg ${
              selectedType === "business_owner" 
                ? "ring-2 ring-orange-500 bg-orange-50" 
                : "hover:bg-gray-50"
            }`}
            onClick={() => setSelectedType("business_owner")}
          >
            <CardHeader className="text-center pb-4">
              <div className="mx-auto w-16 h-16 bg-orange-100 rounded-full flex items-center justify-center mb-4">
                <Coffee className="w-8 h-8 text-orange-600" />
              </div>
              <CardTitle className="text-xl">I'm a Home Chef</CardTitle>
              <CardDescription className="text-base">
                Share your culinary passion and build your food business
              </CardDescription>
            </CardHeader>
            <CardContent className="pt-0">
              <div className="space-y-3 mb-6">
                <div className="flex items-center text-sm text-gray-600">
                  <TrendingUp className="w-4 h-4 mr-2 text-green-500" />
                  Grow your food business
                </div>
                <div className="flex items-center text-sm text-gray-600">
                  <Users className="w-4 h-4 mr-2 text-blue-500" />
                  Build a loyal customer base
                </div>
                <div className="flex items-center text-sm text-gray-600">
                  <Star className="w-4 h-4 mr-2 text-yellow-500" />
                  Showcase your unique recipes
                </div>
              </div>
              <div className="flex flex-wrap gap-2">
                <Badge variant="secondary" className="text-xs">Business tools</Badge>
                <Badge variant="secondary" className="text-xs">Order management</Badge>
                <Badge variant="secondary" className="text-xs">Analytics</Badge>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Continue Button */}
        <div className="text-center">
          <Button 
            onClick={handleContinue}
            disabled={!selectedType}
            size="lg"
            className="bg-orange-600 hover:bg-orange-700 text-white px-8 py-3 text-lg"
          >
            Continue as {selectedType === "customer" ? "Food Lover" : selectedType === "business_owner" ? "Home Chef" : "..."}
          </Button>
          
          <p className="text-sm text-gray-500 mt-4">
            Already have an account?{" "}
            <Link href="/auth/signin" className="text-orange-600 hover:text-orange-700 font-medium">
              Sign in here
            </Link>
          </p>
        </div>
      </div>
    </div>
  )
}


--- FILE: app/auth/reset-password/page.tsx ---
"use client"

import { useState } from "react"
import Link from "next/link"
import { useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { useToast } from "@/components/ui/use-toast"
import { ArrowLeft, Mail, Loader2, CheckCircle } from "lucide-react"
import { resetPasswordSchema, type ResetPasswordData } from "@/lib/auth-schemas"

export default function ResetPasswordPage() {
  const { toast } = useToast()
  
  const [isLoading, setIsLoading] = useState(false)
  const [emailSent, setEmailSent] = useState(false)
  const [error, setError] = useState<string | null>(null)

  const form = useForm<ResetPasswordData>({
    resolver: zodResolver(resetPasswordSchema),
    defaultValues: {
      email: "",
    },
  })

  const onSubmit = async (data: ResetPasswordData) => {
    setIsLoading(true)
    setError(null)

    try {
      const response = await fetch("/api/auth/reset-password", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      })

      const result = await response.json()

      if (!response.ok) {
        setError(result.error || "Failed to send reset email")
        return
      }

      setEmailSent(true)
      toast({
        title: "Reset email sent!",
        description: "Please check your email for password reset instructions.",
      })
    } catch (error: any) {
      setError(error.message || "Failed to send reset email. Please try again.")
    } finally {
      setIsLoading(false)
    }
  }

  if (emailSent) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-orange-50 to-red-50 flex items-center justify-center p-4">
        <div className="w-full max-w-md">
          <Card>
            <CardHeader className="text-center">
              <div className="mx-auto w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mb-4">
                <CheckCircle className="w-8 h-8 text-green-600" />
              </div>
              
              <CardTitle className="text-2xl">Check Your Email</CardTitle>
              <CardDescription>
                We've sent password reset instructions to your email
              </CardDescription>
            </CardHeader>
            
            <CardContent className="text-center space-y-4">
              <div className="space-y-2 text-sm text-gray-600">
                <p>Please check your email and follow the instructions to reset your password.</p>
                <p>Don't forget to check your spam folder if you don't see the email.</p>
              </div>

              <div className="pt-4 border-t">
                <Link href="/auth/signin">
                  <Button variant="outline" className="w-full">
                    Back to Sign In
                  </Button>
                </Link>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-50 to-red-50 flex items-center justify-center p-4">
      <div className="w-full max-w-md">
        <Card>
          <CardHeader className="text-center">
            <Link 
              href="/auth/signin" 
              className="inline-flex items-center text-gray-600 hover:text-gray-900 mb-4 transition-colors text-sm"
            >
              <ArrowLeft className="w-4 h-4 mr-1" />
              Back to Sign In
            </Link>
            
            <div className="mx-auto w-12 h-12 bg-orange-100 rounded-full flex items-center justify-center mb-4">
              <Mail className="w-6 h-6 text-orange-600" />
            </div>
            
            <CardTitle className="text-2xl">Reset Password</CardTitle>
            <CardDescription>
              Enter your email address and we'll send you a link to reset your password
            </CardDescription>
          </CardHeader>
          
          <CardContent>
            {error && (
              <Alert variant="destructive" className="mb-4">
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            )}

            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              <div>
                <Label htmlFor="email">Email</Label>
                <Input
                  id="email"
                  type="email"
                  {...form.register("email")}
                  placeholder="john@example.com"
                />
                {form.formState.errors.email && (
                  <p className="text-sm text-red-600 mt-1">
                    {form.formState.errors.email.message}
                  </p>
                )}
              </div>

              <Button 
                type="submit" 
                className="w-full bg-orange-600 hover:bg-orange-700"
                disabled={isLoading}
              >
                {isLoading ? (
                  <>
                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                    Sending reset email...
                  </>
                ) : (
                  "Send Reset Email"
                )}
              </Button>
            </form>

            <div className="text-center mt-6 pt-4 border-t">
              <p className="text-sm text-gray-600">
                Remember your password?{" "}
                <Link href="/auth/signin" className="text-orange-600 hover:text-orange-700 font-medium">
                  Sign in
                </Link>
              </p>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}


--- FILE: app/auth/signin/page.tsx ---
"use client"

import { useState, useEffect } from "react"
import Link from "next/link"
import { useRouter } from "next/navigation"
import { useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { useToast } from "@/components/ui/use-toast"
import { useAuth } from "@/lib/auth-context"
import { ArrowLeft, Eye, EyeOff, Loader2 } from "lucide-react"
import { signInSchema, type SignInFormData } from "@/lib/auth-schemas"
import { createClient } from "@/lib/supabaseClient" 
import { useSearchParams } from "next/navigation"

export default function SignInPage() {
  const router = useRouter()
  const searchParams = useSearchParams()
  const redirectTo = searchParams.get("redirectTo") || "/dashboard"
  const { toast } = useToast()
  const { user, refreshUser } = useAuth()
  
  const [showPassword, setShowPassword] = useState(false)
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  const form = useForm<SignInFormData>({
    resolver: zodResolver(signInSchema),
    defaultValues: {
      email: "",
      password: "",
    },
  })

  // Redirect to dashboard after user context is updated
  useEffect(() => {
    if (user) {
      router.push(redirectTo)
    }
  }, [user, router])

  const onSubmit = async (data: SignInFormData) => {
    setIsLoading(true)
    setError(null)

    try {
      const supabase = createClient()
      const { data: result, error } = await supabase.auth.signInWithPassword({
        email: data.email,
        password: data.password,
      })
      if (error) {
        setError(error.message)
        return
      }

      // Now that supabase.client has the session, refresh and redirect:
      await refreshUser()

      toast({
        title: "Welcome back!",
        description: "You have been signed in successfully.",
      })
      // Don't redirect here; let useEffect handle it after user context updates

    } catch (error: any) {
      setError(error.message || "Failed to sign in. Please try again.")
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-50 to-red-50 flex items-center justify-center p-4">
      <div className="w-full max-w-md">
        <Card>
          <CardHeader className="text-center">
            <Link 
              href="/" 
              className="inline-flex items-center text-gray-600 hover:text-gray-900 mb-4 transition-colors text-sm"
            >
              <ArrowLeft className="w-4 h-4 mr-1" />
              Back to Home
            </Link>
            
            <div className="mx-auto w-12 h-12 bg-orange-100 rounded-full flex items-center justify-center mb-4">
              <div className="w-6 h-6 bg-gradient-to-r from-orange-500 to-red-500 rounded-full flex items-center justify-center">
                <span className="text-white font-bold text-xs">SG</span>
              </div>
            </div>
            
            <CardTitle className="text-2xl">Welcome Back</CardTitle>
            <CardDescription>
              Sign in to your SG Home Eats account
            </CardDescription>
          </CardHeader>
          
          <CardContent>
            {error && (
              <Alert variant="destructive" className="mb-4">
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            )}

            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              <div>
                <Label htmlFor="email">Email</Label>
                <Input
                  id="email"
                  type="email"
                  {...form.register("email")}
                  placeholder="john@example.com"
                />
                {form.formState.errors.email && (
                  <p className="text-sm text-red-600 mt-1">
                    {form.formState.errors.email.message}
                  </p>
                )}
              </div>
              <div>
                <Label htmlFor="password">Password</Label>
                <div className="relative">
                  <Input
                    id="password"
                    type={showPassword ? "text" : "password"}
                    {...form.register("password")}
                    placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                  />
                  <button
                    type="button"
                    className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400"
                    onClick={() => setShowPassword((v) => !v)}
                  >
                    {showPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                  </button>
                </div>
                {form.formState.errors.password && (
                  <p className="text-sm text-red-600 mt-1">
                    {form.formState.errors.password.message}
                  </p>
                )}
              </div>
              <Button 
                type="submit" 
                className="w-full bg-orange-600 hover:bg-orange-700"
                disabled={isLoading}
              >
                {isLoading ? (
                  <>
                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                    Signing in...
                  </>
                ) : (
                  "Sign In"
                )}
              </Button>
            </form>
            <div className="text-center mt-6 pt-4 border-t">
              <p className="text-sm text-gray-600">
                Don't have an account?{" "}
                <Link href="/auth/get-started" className="text-orange-600 hover:text-orange-700 font-medium">
                  Get started
                </Link>
              </p>
              <p className="text-sm text-gray-600 mt-2">
                <Link href="/auth/reset-password" className="text-orange-600 hover:text-orange-700 font-medium">
                  Forgot password?
                </Link>
              </p>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}


--- FILE: app/auth/signup/page.tsx ---
"use client"

import { useState, useEffect } from "react"
import Link from "next/link"
import { useRouter, useSearchParams } from "next/navigation"
import { useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { useToast } from "@/components/ui/use-toast"
import { ArrowLeft, Coffee, Users, Eye, EyeOff, Loader2 } from "lucide-react"
import { 
  customerSignUpSchema, 
  businessOwnerSignUpSchema, 
  type CustomerSignUpData, 
  type BusinessOwnerSignUpData 
} from "@/lib/auth-schemas"

export default function SignUpPage() {
  const router = useRouter()
  const searchParams = useSearchParams()
  const { toast } = useToast()
  
  const [userType, setUserType] = useState<"customer" | "business_owner">("customer")
  const [showPassword, setShowPassword] = useState(false)
  const [isLoading, setIsLoading] = useState(false)
  const [emailError, setEmailError] = useState<string | null>(null)

  // Get user type from URL params
  useEffect(() => {
    const type = searchParams.get("type")
    if (type === "customer" || type === "business_owner") {
      setUserType(type)
    }
  }, [searchParams])

  // Setup form with appropriate schema
  const schema = userType === "customer" ? customerSignUpSchema : businessOwnerSignUpSchema
  const form = useForm<CustomerSignUpData | BusinessOwnerSignUpData>({
    resolver: zodResolver(schema),
    defaultValues: {
      userType,
      email: "",
      password: "",
      firstName: "",
      lastName: "",
      phone: "",
      intendedBusinessName: "",
    },
  })

  // Check email existence
  const checkEmailExists = async (email: string) => {
    try {
      const response = await fetch("/api/auth/check-email", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email }),
      })
      
      const data = await response.json()
      
      if (data.exists) {
        setEmailError(`An account with this email already exists as a ${data.userType.replace("_", " ")}`)
        return true
      }
      
      setEmailError(null)
      return false
    } catch (error) {
      console.error("Error checking email:", error)
      return false
    }
  }

  const onSubmit = async (data: CustomerSignUpData | BusinessOwnerSignUpData) => {
    setIsLoading(true)
    setEmailError(null)

    try {
      // Check if email exists before submitting
      const emailExists = await checkEmailExists(data.email)
      if (emailExists) {
        setIsLoading(false)
        return
      }

      const response = await fetch("/api/auth/signup", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      })

      const result = await response.json()

      if (!response.ok) {
        if (response.status === 409) {
          setEmailError(result.error)
        } else {
          throw new Error(result.error || "Failed to create account")
        }
        return
      }

      toast({
        title: "Account created successfully!",
        description: "Please check your email to verify your account.",
      })

      // Redirect to verification page
      router.push(`/auth/verify-email?email=${encodeURIComponent(data.email)}`)
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "Failed to create account. Please try again.",
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-50 to-red-50 flex items-center justify-center p-4">
      <div className="w-full max-w-md">
        <Card>
          <CardHeader className="text-center">
            <Link 
              href="/auth/get-started" 
              className="inline-flex items-center text-gray-600 hover:text-gray-900 mb-4 transition-colors text-sm"
            >
              <ArrowLeft className="w-4 h-4 mr-1" />
              Back
            </Link>
            
            <div className="mx-auto w-12 h-12 bg-orange-100 rounded-full flex items-center justify-center mb-4">
              {userType === "customer" ? (
                <Users className="w-6 h-6 text-orange-600" />
              ) : (
                <Coffee className="w-6 h-6 text-orange-600" />
              )}
            </div>
            
            <CardTitle className="text-2xl">
              {userType === "customer" ? "Join as Food Lover" : "Join as Home Chef"}
            </CardTitle>
            <CardDescription>
              {userType === "customer" 
                ? "Discover amazing home-based cafes in Singapore" 
                : "Share your culinary passion with food lovers"
              }
            </CardDescription>
          </CardHeader>
          
          <CardContent>
            {emailError && (
              <Alert variant="destructive" className="mb-4">
                <AlertDescription>
                  {emailError}.{" "}
                  <Link href="/auth/signin" className="underline font-medium">
                    Sign in instead
                  </Link>
                </AlertDescription>
              </Alert>
            )}

            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              {/* Name Fields */}
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="firstName">First Name</Label>
                  <Input
                    id="firstName"
                    {...form.register("firstName")}
                    placeholder="John"
                  />
                  {form.formState.errors.firstName && (
                    <p className="text-sm text-red-600 mt-1">
                      {form.formState.errors.firstName.message}
                    </p>
                  )}
                </div>
                <div>
                  <Label htmlFor="lastName">Last Name</Label>
                  <Input
                    id="lastName"
                    {...form.register("lastName")}
                    placeholder="Doe"
                  />
                  {form.formState.errors.lastName && (
                    <p className="text-sm text-red-600 mt-1">
                      {form.formState.errors.lastName.message}
                    </p>
                  )}
                </div>
              </div>

              {/* Email */}
              <div>
                <Label htmlFor="email">Email</Label>
                <Input
                  id="email"
                  type="email"
                  {...form.register("email")}
                  placeholder="john@example.com"
                  onBlur={(e) => {
                    if (e.target.value) {
                      checkEmailExists(e.target.value)
                    }
                  }}
                />
                {form.formState.errors.email && (
                  <p className="text-sm text-red-600 mt-1">
                    {form.formState.errors.email.message}
                  </p>
                )}
              </div>

              {/* Password */}
              <div>
                <Label htmlFor="password">Password</Label>
                <div className="relative">
                  <Input
                    id="password"
                    type={showPassword ? "text" : "password"}
                    {...form.register("password")}
                    placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                  />
                  <Button
                    type="button"
                    variant="ghost"
                    size="sm"
                    className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
                    onClick={() => setShowPassword(!showPassword)}
                  >
                    {showPassword ? (
                      <EyeOff className="h-4 w-4" />
                    ) : (
                      <Eye className="h-4 w-4" />
                    )}
                  </Button>
                </div>
                {form.formState.errors.password && (
                  <p className="text-sm text-red-600 mt-1">
                    {form.formState.errors.password.message}
                  </p>
                )}
                <p className="text-xs text-gray-500 mt-1">
                  Must be 8+ characters with uppercase, lowercase, and number
                </p>
              </div>

              {/* Phone (required for business owners) */}
              <div>
                <Label htmlFor="phone">
                  Phone Number {userType === "business_owner" && <span className="text-red-500">*</span>}
                </Label>
                <Input
                  id="phone"
                  {...form.register("phone")}
                  placeholder="+65 8123 4567"
                />
                {form.formState.errors.phone && (
                  <p className="text-sm text-red-600 mt-1">
                    {form.formState.errors.phone.message}
                  </p>
                )}
              </div>

              {/* Business Name (for business owners) */}
              {userType === "business_owner" && (
                <div>
                  <Label htmlFor="intendedBusinessName">
                    Intended Business Name <span className="text-gray-500">(optional)</span>
                  </Label>
                  <Input
                    id="intendedBusinessName"
                    {...form.register("intendedBusinessName")}
                    placeholder="Ah Ma's Kitchen"
                  />
                  <p className="text-xs text-gray-500 mt-1">
                    You can change this later when setting up your business profile
                  </p>
                </div>
              )}

              <Button 
                type="submit" 
                className="w-full bg-orange-600 hover:bg-orange-700"
                disabled={isLoading}
              >
                {isLoading ? (
                  <>
                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                    Creating account...
                  </>
                ) : (
                  "Create Account"
                )}
              </Button>
            </form>

            <div className="text-center mt-6 pt-4 border-t">
              <p className="text-sm text-gray-600">
                Already have an account?{" "}
                <Link href="/auth/signin" className="text-orange-600 hover:text-orange-700 font-medium">
                  Sign in
                </Link>
              </p>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}


--- FILE: app/auth/verify-email/page.tsx ---
"use client"

import { useState, useEffect } from "react"
import Link from "next/link"
import { useSearchParams } from "next/navigation"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { useToast } from "@/components/ui/use-toast"
import { Mail, CheckCircle, Loader2, ArrowLeft } from "lucide-react"

export default function VerifyEmailPage() {
  const searchParams = useSearchParams()
  const { toast } = useToast()
  
  const [email, setEmail] = useState("")
  const [isResending, setIsResending] = useState(false)
  const [resendCooldown, setResendCooldown] = useState(0)

  useEffect(() => {
    const emailParam = searchParams.get("email")
    if (emailParam) {
      setEmail(decodeURIComponent(emailParam))
    }
  }, [searchParams])

  useEffect(() => {
    if (resendCooldown > 0) {
      const timer = setTimeout(() => setResendCooldown(resendCooldown - 1), 1000)
      return () => clearTimeout(timer)
    }
  }, [resendCooldown])

  const handleResendEmail = async () => {
    if (!email || resendCooldown > 0) return

    setIsResending(true)

    try {
      const response = await fetch("/api/auth/resend-verification", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email }),
      })

      const result = await response.json()

      if (!response.ok) {
        throw new Error(result.error || "Failed to resend verification email")
      }

      toast({
        title: "Email sent!",
        description: "Please check your inbox for the verification email.",
      })

      setResendCooldown(60) // 60 second cooldown
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "Failed to resend email. Please try again.",
        variant: "destructive",
      })
    } finally {
      setIsResending(false)
    }
  }

  const maskedEmail = email 
    ? email.replace(/(.{2})(.*)(@.*)/, "$1***$3")
    : ""

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-50 to-red-50 flex items-center justify-center p-4">
      <div className="w-full max-w-md">
        <Card>
          <CardHeader className="text-center">
            <Link 
              href="/auth/signin" 
              className="inline-flex items-center text-gray-600 hover:text-gray-900 mb-4 transition-colors text-sm"
            >
              <ArrowLeft className="w-4 h-4 mr-1" />
              Back to Sign In
            </Link>
            
            <div className="mx-auto w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mb-4">
              <Mail className="w-8 h-8 text-blue-600" />
            </div>
            
            <CardTitle className="text-2xl">Check Your Email</CardTitle>
            <CardDescription>
              We've sent a verification link to your email address
            </CardDescription>
          </CardHeader>
          
          <CardContent className="text-center space-y-4">
            {email && (
              <Alert>
                <CheckCircle className="h-4 w-4" />
                <AlertDescription>
                  Verification email sent to <strong>{maskedEmail}</strong>
                </AlertDescription>
              </Alert>
            )}

            <div className="space-y-2 text-sm text-gray-600">
              <p>Please check your email and click the verification link to activate your account.</p>
              <p>Don't forget to check your spam folder if you don't see the email.</p>
            </div>

            <div className="pt-4 border-t">
              <p className="text-sm text-gray-600 mb-3">
                Didn't receive the email?
              </p>
              
              <Button
                onClick={handleResendEmail}
                disabled={isResending || resendCooldown > 0 || !email}
                variant="outline"
                className="w-full"
              >
                {isResending ? (
                  <>
                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                    Sending...
                  </>
                ) : resendCooldown > 0 ? (
                  `Resend in ${resendCooldown}s`
                ) : (
                  "Resend verification email"
                )}
              </Button>
            </div>

            <div className="pt-4 border-t">
              <p className="text-sm text-gray-600">
                Already verified?{" "}
                <Link href="/auth/signin" className="text-orange-600 hover:text-orange-700 font-medium">
                  Sign in here
                </Link>
              </p>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}


--- FILE: app/browse/page.tsx ---
"use client"

import { Search, MapPin, Star, Filter, X, ChevronDown } from "lucide-react"
import Image from "next/image"
import Link from "next/link"
import { useState, useEffect } from "react"
import { useSearchParams, useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { 
  Dialog, 
  DialogContent, 
  DialogHeader, 
  DialogTitle,
  DialogDescription,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Checkbox } from "@/components/ui/checkbox"
import { 
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"

export default function BrowsePage() {
  const searchParams = useSearchParams()
  const router = useRouter()
  const [searchQuery, setSearchQuery] = useState("")
  const [filteredCafes, setFilteredCafes] = useState<any[]>([])
  const [isFiltersOpen, setIsFiltersOpen] = useState(false)
  
  // Filter states
  const [selectedCuisines, setSelectedCuisines] = useState<string[]>([])
  const [selectedPriceRanges, setSelectedPriceRanges] = useState<string[]>([])
  const [minRating, setMinRating] = useState<number | null>(null)
  const [sortBy, setSortBy] = useState("rating")
  const [openNow, setOpenNow] = useState(false)

  // Initialize search query from URL params
  useEffect(() => {
    const query = searchParams.get('q') || ""
    setSearchQuery(query)
  }, [searchParams])

  const cafes = [
    {
      id: 1,
      name: "Ah Ma's Kitchen",
      cuisine: "Peranakan",
      location: "Toa Payoh",
      rating: 4.8,
      reviews: 124,
      image: "/placeholder.svg?height=200&width=300",
      specialty: "Authentic Nyonya Kueh",
      priceRange: "$$",
      isOpen: true,
    },
    {
      id: 2,
      name: "Brew & Bite",
      cuisine: "Western Fusion",
      location: "Tampines",
      rating: 4.6,
      reviews: 89,
      image: "/placeholder.svg?height=200&width=300",
      specialty: "Artisan Coffee & Brunch",
      priceRange: "$$$",
      isOpen: true,
    },
    {
      id: 3,
      name: "Spice Route Home",
      cuisine: "Indian",
      location: "Jurong West",
      rating: 4.9,
      reviews: 156,
      image: "/placeholder.svg?height=200&width=300",
      specialty: "Homestyle Curries",
      priceRange: "$",
      isOpen: false,
    },
    {
      id: 4,
      name: "Noodle Nest",
      cuisine: "Chinese",
      location: "Ang Mo Kio",
      rating: 4.7,
      reviews: 203,
      image: "/placeholder.svg?height=200&width=300",
      specialty: "Hand-pulled Noodles",
      priceRange: "$$",
      isOpen: true,
    },
    {
      id: 5,
      name: "Sweet Treats Corner",
      cuisine: "Desserts",
      location: "Orchard",
      rating: 4.5,
      reviews: 78,
      image: "/placeholder.svg?height=200&width=300",
      specialty: "Handmade Pastries",
      priceRange: "$$$",
      isOpen: true,
    },
    {
      id: 6,
      name: "Healthy Bites",
      cuisine: "Healthy",
      location: "Clarke Quay",
      rating: 4.4,
      reviews: 92,
      image: "/placeholder.svg?height=200&width=300",
      specialty: "Organic Bowls",
      priceRange: "$$",
      isOpen: true,
    },
  ]

  // Filter and search logic
  useEffect(() => {
    let filtered = [...cafes]

    // Text search
    if (searchQuery.trim()) {
      const query = searchQuery.toLowerCase()
      filtered = filtered.filter(cafe => 
        cafe.name.toLowerCase().includes(query) ||
        cafe.cuisine.toLowerCase().includes(query) ||
        cafe.location.toLowerCase().includes(query) ||
        cafe.specialty.toLowerCase().includes(query)
      )
    }

    // Cuisine filter
    if (selectedCuisines.length > 0) {
      filtered = filtered.filter(cafe => 
        selectedCuisines.includes(cafe.cuisine)
      )
    }

    // Price range filter
    if (selectedPriceRanges.length > 0) {
      filtered = filtered.filter(cafe => 
        selectedPriceRanges.includes(cafe.priceRange)
      )
    }

    // Rating filter
    if (minRating) {
      filtered = filtered.filter(cafe => cafe.rating >= minRating)
    }

    // Open now filter
    if (openNow) {
      filtered = filtered.filter(cafe => cafe.isOpen)
    }

    // Sorting
    filtered.sort((a, b) => {
      switch (sortBy) {
        case 'rating':
          return b.rating - a.rating
        case 'price-asc':
          return a.priceRange.length - b.priceRange.length
        case 'price-desc':
          return b.priceRange.length - a.priceRange.length
        case 'distance':
          // Mock distance sorting - in real app would use user location
          return Math.random() - 0.5
        default:
          return 0
      }
    })

    setFilteredCafes(filtered)
  }, [searchQuery, selectedCuisines, selectedPriceRanges, minRating, openNow, sortBy])

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault()
    const params = new URLSearchParams()
    if (searchQuery.trim()) {
      params.set('q', searchQuery.trim())
    }
    router.push(`/browse?${params.toString()}`)
  }

  const clearFilters = () => {
    setSelectedCuisines([])
    setSelectedPriceRanges([])
    setMinRating(null)
    setOpenNow(false)
    setSortBy("rating")
  }

  const cuisineOptions = ["Peranakan", "Western Fusion", "Indian", "Chinese", "Desserts", "Healthy"]
  const priceOptions = ["$", "$$", "$$$"]
  const ratingOptions = [
    { value: 4.5, label: "4.5+ stars" },
    { value: 4.0, label: "4.0+ stars" },
    { value: 3.5, label: "3.5+ stars" }
  ]

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <Link href="/" className="flex items-center space-x-2">
              <div className="w-10 h-10 bg-gradient-to-r from-orange-500 to-red-500 rounded-full flex items-center justify-center">
                <span className="text-white font-bold text-lg">SG</span>
              </div>
              <span className="font-bold text-xl text-gray-900">SG Home Eats</span>
            </Link>
            <Button asChild variant="outline">
              <Link href="/">‚Üê Back to Home</Link>
            </Button>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-4">Browse All Home Cafes</h1>
          <p className="text-lg text-gray-600">Discover amazing home-based cafes across Singapore</p>
        </div>

        {/* Search and Filter */}
        <div className="mb-8 bg-white rounded-lg shadow-sm p-6">
          <form onSubmit={handleSearch} className="flex flex-col md:flex-row gap-4 mb-4">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
              <Input
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                placeholder="Search cafes, cuisines, or locations..."
                className="pl-10 h-12"
              />
            </div>
            <Button type="submit" className="h-12 px-6 bg-orange-600 hover:bg-orange-700">
              Search
            </Button>
            <Dialog open={isFiltersOpen} onOpenChange={setIsFiltersOpen}>
              <DialogTrigger asChild>
                <Button variant="outline" className="h-12 px-6">
                  <Filter className="w-4 h-4 mr-2" />
                  Filters
                  {(selectedCuisines.length > 0 || selectedPriceRanges.length > 0 || minRating || openNow) && (
                    <Badge className="ml-2 bg-orange-600">{
                      selectedCuisines.length + selectedPriceRanges.length + (minRating ? 1 : 0) + (openNow ? 1 : 0)
                    }</Badge>
                  )}
                </Button>
              </DialogTrigger>
              <DialogContent className="max-w-md">
                <DialogHeader>
                  <DialogTitle>Filter Cafes</DialogTitle>
                  <DialogDescription id="filter-cafes-desc">
                    Refine your search
                  </DialogDescription>
                </DialogHeader>
                <div className="space-y-6">
                  {/* Sort By */}
                  <div>
                    <label className="text-sm font-medium mb-2 block">Sort by</label>
                    <Select value={sortBy} onValueChange={setSortBy}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="rating">Rating (High to Low)</SelectItem>
                        <SelectItem value="price-asc">Price (Low to High)</SelectItem>
                        <SelectItem value="price-desc">Price (High to Low)</SelectItem>
                        <SelectItem value="distance">Distance</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  {/* Cuisine */}
                  <div>
                    <label className="text-sm font-medium mb-2 block">Cuisine</label>
                    <div className="space-y-2">
                      {cuisineOptions.map((cuisine) => (
                        <div key={cuisine} className="flex items-center space-x-2">
                          <Checkbox
                            id={cuisine}
                            checked={selectedCuisines.includes(cuisine)}
                            onCheckedChange={(checked) => {
                              if (checked) {
                                setSelectedCuisines([...selectedCuisines, cuisine])
                              } else {
                                setSelectedCuisines(selectedCuisines.filter(c => c !== cuisine))
                              }
                            }}
                          />
                          <label htmlFor={cuisine} className="text-sm">{cuisine}</label>
                        </div>
                      ))}
                    </div>
                  </div>

                  {/* Price Range */}
                  <div>
                    <label className="text-sm font-medium mb-2 block">Price Range</label>
                    <div className="space-y-2">
                      {priceOptions.map((price) => (
                        <div key={price} className="flex items-center space-x-2">
                          <Checkbox
                            id={price}
                            checked={selectedPriceRanges.includes(price)}
                            onCheckedChange={(checked) => {
                              if (checked) {
                                setSelectedPriceRanges([...selectedPriceRanges, price])
                              } else {
                                setSelectedPriceRanges(selectedPriceRanges.filter(p => p !== price))
                              }
                            }}
                          />
                          <label htmlFor={price} className="text-sm">{price}</label>
                        </div>
                      ))}
                    </div>
                  </div>

                  {/* Rating */}
                  <div>
                    <label className="text-sm font-medium mb-2 block">Minimum Rating</label>
                    <Select value={minRating != null ? minRating.toString() : "any"} onValueChange={(value) => setMinRating(value === "any" ? null : parseFloat(value))}>
                      <SelectTrigger>
                        <SelectValue placeholder="Any rating" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="any">Any rating</SelectItem>
                        {ratingOptions.map((option) => (
                          <SelectItem key={option.value} value={option.value.toString()}>
                            {option.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  {/* Open Now */}
                  <div className="flex items-center space-x-2">
                    <Checkbox
                      id="openNow"
                      checked={openNow}
                      onCheckedChange={(checked) => setOpenNow(checked === true)}
                    />
                    <label htmlFor="openNow" className="text-sm">Open now</label>
                  </div>

                  <div className="flex space-x-2">
                    <Button onClick={clearFilters} variant="outline" className="flex-1">
                      Clear All
                    </Button>
                    <Button onClick={() => setIsFiltersOpen(false)} className="flex-1 bg-orange-600 hover:bg-orange-700">
                      Apply Filters
                    </Button>
                  </div>
                </div>
              </DialogContent>
            </Dialog>
          </form>
          
          {/* Active Filters Display */}
          {(selectedCuisines.length > 0 || selectedPriceRanges.length > 0 || minRating || openNow) && (
            <div className="flex flex-wrap gap-2 pt-4 border-t">
              <span className="text-sm text-gray-600">Active filters:</span>
              {selectedCuisines.map((cuisine) => (
                <Badge key={cuisine} variant="outline" className="text-xs">
                  {cuisine}
                  <X 
                    className="w-3 h-3 ml-1 cursor-pointer" 
                    onClick={() => setSelectedCuisines(selectedCuisines.filter(c => c !== cuisine))}
                  />
                </Badge>
              ))}
              {selectedPriceRanges.map((price) => (
                <Badge key={price} variant="outline" className="text-xs">
                  {price}
                  <X 
                    className="w-3 h-3 ml-1 cursor-pointer" 
                    onClick={() => setSelectedPriceRanges(selectedPriceRanges.filter(p => p !== price))}
                  />
                </Badge>
              ))}
              {minRating && (
                <Badge variant="outline" className="text-xs">
                  {minRating}+ stars
                  <X 
                    className="w-3 h-3 ml-1 cursor-pointer" 
                    onClick={() => setMinRating(null)}
                  />
                </Badge>
              )}
              {openNow && (
                <Badge variant="outline" className="text-xs">
                  Open now
                  <X 
                    className="w-3 h-3 ml-1 cursor-pointer" 
                    onClick={() => setOpenNow(false)}
                  />
                </Badge>
              )}
              <Button variant="ghost" size="sm" onClick={clearFilters} className="text-xs h-6 px-2">
                Clear all
              </Button>
            </div>
          )}
        </div>

        {/* Results Count */}
        <div className="mb-6">
          <p className="text-gray-600">
            {searchQuery ? `Search results for "${searchQuery}": ` : ""}{filteredCafes.length} {filteredCafes.length === 1 ? 'cafe' : 'cafes'} found
          </p>
        </div>

        {/* Results */}
        {filteredCafes.length > 0 ? (
          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
            {filteredCafes.map((cafe) => (
              <Link key={cafe.id} href={`/cafe/${cafe.id}`}>
                <Card className="hover:shadow-lg transition-all duration-300 cursor-pointer group overflow-hidden h-full flex flex-col">
                  <div className="relative">
                    <Image
                      src={cafe.image || "/placeholder.svg"}
                      alt={cafe.name}
                      width={300}
                      height={200}
                      className="w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300"
                      onError={(e) => {
                        const target = e.target as HTMLImageElement;
                        target.src = "/placeholder.svg";
                      }}
                    />
                    <div className="absolute top-3 right-3">
                      <Badge variant={cafe.isOpen ? "default" : "secondary"} className="bg-white/90 text-gray-900">
                        {cafe.isOpen ? "Open" : "Closed"}
                      </Badge>
                    </div>
                  </div>
                  <CardContent className="p-4 flex-1 flex flex-col">
                    <div className="flex justify-between items-start mb-2">
                      <h3 className="font-semibold text-gray-900 group-hover:text-orange-600 transition-colors line-clamp-1">
                        {cafe.name}
                      </h3>
                      <span className="text-sm text-gray-500 whitespace-nowrap ml-2">{cafe.priceRange}</span>
                    </div>
                    <p className="text-sm text-orange-600 mb-2 line-clamp-1">{cafe.specialty}</p>
                    <div className="flex items-center justify-between text-sm text-gray-500 mb-2">
                      <div className="flex items-center min-w-0 flex-1">
                        <MapPin className="w-4 h-4 mr-1 shrink-0" />
                        <span className="truncate">{cafe.location}</span>
                      </div>
                      <div className="flex items-center ml-2 whitespace-nowrap">
                        <Star className="w-4 h-4 mr-1 fill-yellow-400 text-yellow-400" />
                        {cafe.rating} ({cafe.reviews})
                      </div>
                    </div>
                    <div className="mt-auto">
                      <Badge variant="outline" className="text-xs truncate max-w-full">
                        {cafe.cuisine}
                      </Badge>
                    </div>
                  </CardContent>
                </Card>
              </Link>
            ))}
          </div>
        ) : (
          <div className="text-center py-12">
            <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <Search className="w-8 h-8 text-gray-400" />
            </div>
            <h3 className="text-lg font-medium text-gray-900 mb-2">No cafes found</h3>
            <p className="text-gray-600 mb-4">
              {searchQuery ? `No results for "${searchQuery}". Try adjusting your search or filters.` : "Try adjusting your filters to see more results."}
            </p>
            <Button onClick={clearFilters} variant="outline">
              Clear all filters
            </Button>
          </div>
        )}

        {/* Load More */}
        <div className="text-center mt-12">
          <Button variant="outline" size="lg">
            Load More Cafes
          </Button>
        </div>
      </div>
    </div>
  )
}


--- FILE: app/business-dashboard/page.tsx ---
"use client"

import { useState } from "react"
import { BarChart3, Users, Star, TrendingUp, Edit, Eye, MessageSquare, Calendar, DollarSign } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"

export default function BusinessDashboard() {
  const [activeTab, setActiveTab] = useState("overview")

  const businessData = {
    name: "Ah Ma's Kitchen",
    status: "Active",
    rating: 4.8,
    totalReviews: 124,
    totalViews: 2847,
    totalOrders: 89,
    monthlyRevenue: 3240,
    profileViews: [
      { month: "Jan", views: 245 },
      { month: "Feb", views: 312 },
      { month: "Mar", views: 428 },
      { month: "Apr", views: 389 },
      { month: "May", views: 467 },
      { month: "Jun", views: 523 },
    ],
  }

  const recentReviews = [
    {
      customer: "Sarah T.",
      rating: 5,
      date: "2 days ago",
      comment: "Amazing authentic Peranakan food! The kueh lapis was exactly like my grandmother used to make.",
    },
    {
      customer: "David L.",
      rating: 5,
      date: "1 week ago",
      comment: "Best laksa lemak I've had in Singapore! The flavors are so rich and authentic.",
    },
    {
      customer: "Michelle C.",
      rating: 4,
      date: "2 weeks ago",
      comment: "Love supporting local home businesses. The ondeh ondeh was perfect!",
    },
  ]

  const recentOrders = [
    {
      id: "#ORD-001",
      customer: "John D.",
      items: "Kueh Lapis x2, Laksa Lemak x1",
      amount: "$18.80",
      status: "Completed",
      date: "Today, 2:30 PM",
    },
    {
      id: "#ORD-002",
      customer: "Lisa W.",
      items: "Ondeh Ondeh x6, Kueh Salat x2",
      amount: "$17.20",
      status: "Preparing",
      date: "Today, 1:15 PM",
    },
    {
      id: "#ORD-003",
      customer: "Ahmad R.",
      items: "Ayam Buah Keluak x1, Mee Siam x1",
      amount: "$24.30",
      status: "Ready",
      date: "Today, 12:45 PM",
    },
  ]

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">Business Dashboard</h1>
              <p className="text-gray-600">Welcome back! Here's how your cafe is performing.</p>
            </div>
            <div className="flex items-center space-x-3">
              <Badge variant="secondary" className="bg-green-100 text-green-800">
                {businessData.status}
              </Badge>
              <Button variant="outline">
                <Eye className="w-4 h-4 mr-2" />
                View Public Profile
              </Button>
              <Button className="bg-orange-600 hover:bg-orange-700">
                <Edit className="w-4 h-4 mr-2" />
                Edit Profile
              </Button>
            </div>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-8">
        <div className="max-w-7xl mx-auto">
          {/* Stats Overview */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <Card>
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-600">Profile Views</p>
                    <p className="text-2xl font-bold text-gray-900">{businessData.totalViews.toLocaleString()}</p>
                    <p className="text-sm text-green-600">+12% from last month</p>
                  </div>
                  <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center">
                    <Eye className="w-6 h-6 text-blue-600" />
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-600">Total Orders</p>
                    <p className="text-2xl font-bold text-gray-900">{businessData.totalOrders}</p>
                    <p className="text-sm text-green-600">+8% from last month</p>
                  </div>
                  <div className="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center">
                    <Users className="w-6 h-6 text-green-600" />
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-600">Average Rating</p>
                    <p className="text-2xl font-bold text-gray-900">{businessData.rating}</p>
                    <p className="text-sm text-gray-600">{businessData.totalReviews} reviews</p>
                  </div>
                  <div className="w-12 h-12 bg-yellow-100 rounded-full flex items-center justify-center">
                    <Star className="w-6 h-6 text-yellow-600" />
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-600">Monthly Revenue</p>
                    <p className="text-2xl font-bold text-gray-900">${businessData.monthlyRevenue}</p>
                    <p className="text-sm text-green-600">+15% from last month</p>
                  </div>
                  <div className="w-12 h-12 bg-orange-100 rounded-full flex items-center justify-center">
                    <DollarSign className="w-6 h-6 text-orange-600" />
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Main Content */}
          <Tabs value={activeTab} onValueChange={setActiveTab}>
            <TabsList className="grid w-full grid-cols-4">
              <TabsTrigger value="overview">Overview</TabsTrigger>
              <TabsTrigger value="orders">Orders</TabsTrigger>
              <TabsTrigger value="reviews">Reviews</TabsTrigger>
              <TabsTrigger value="analytics">Analytics</TabsTrigger>
            </TabsList>

            <TabsContent value="overview" className="space-y-6">
              <div className="grid lg:grid-cols-2 gap-6">
                {/* Recent Orders */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center justify-between">
                      Recent Orders
                      <Button variant="outline" size="sm">
                        View All
                      </Button>
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {recentOrders.map((order, index) => (
                        <div key={index} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                          <div className="flex-1">
                            <div className="flex items-center justify-between mb-1">
                              <span className="font-medium text-gray-900">{order.id}</span>
                              <Badge
                                variant={
                                  order.status === "Completed"
                                    ? "default"
                                    : order.status === "Ready"
                                      ? "secondary"
                                      : "outline"
                                }
                                className={
                                  order.status === "Completed"
                                    ? "bg-green-100 text-green-800"
                                    : order.status === "Ready"
                                      ? "bg-blue-100 text-blue-800"
                                      : "bg-yellow-100 text-yellow-800"
                                }
                              >
                                {order.status}
                              </Badge>
                            </div>
                            <p className="text-sm text-gray-600">{order.customer}</p>
                            <p className="text-sm text-gray-500">{order.items}</p>
                            <p className="text-xs text-gray-400">{order.date}</p>
                          </div>
                          <div className="text-right ml-4">
                            <p className="font-semibold text-gray-900">{order.amount}</p>
                          </div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>

                {/* Recent Reviews */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center justify-between">
                      Recent Reviews
                      <Button variant="outline" size="sm">
                        View All
                      </Button>
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {recentReviews.map((review, index) => (
                        <div key={index} className="p-4 bg-gray-50 rounded-lg">
                          <div className="flex items-center justify-between mb-2">
                            <span className="font-medium text-gray-900">{review.customer}</span>
                            <div className="flex items-center">
                              {[...Array(review.rating)].map((_, i) => (
                                <Star key={i} className="w-4 h-4 fill-yellow-400 text-yellow-400" />
                              ))}
                            </div>
                          </div>
                          <p className="text-sm text-gray-600 mb-2">{review.comment}</p>
                          <p className="text-xs text-gray-400">{review.date}</p>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </div>

              {/* Quick Actions */}
              <Card>
                <CardHeader>
                  <CardTitle>Quick Actions</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                    <Button variant="outline" className="h-20 flex-col bg-transparent">
                      <Edit className="w-6 h-6 mb-2" />
                      Update Menu
                    </Button>
                    <Button variant="outline" className="h-20 flex-col bg-transparent">
                      <Calendar className="w-6 h-6 mb-2" />
                      Set Hours
                    </Button>
                    <Button variant="outline" className="h-20 flex-col bg-transparent">
                      <MessageSquare className="w-6 h-6 mb-2" />
                      Reply to Reviews
                    </Button>
                    <Button variant="outline" className="h-20 flex-col bg-transparent">
                      <BarChart3 className="w-6 h-6 mb-2" />
                      View Analytics
                    </Button>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="orders" className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>All Orders</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {recentOrders
                      .concat([
                        {
                          id: "#ORD-004",
                          customer: "Rachel K.",
                          items: "Babi Pongteh x1, Kueh Lapis x3",
                          amount: "$20.00",
                          status: "Completed",
                          date: "Yesterday, 4:20 PM",
                        },
                        {
                          id: "#ORD-005",
                          customer: "Marcus T.",
                          items: "Ang Ku Kueh x4, Ondeh Ondeh x8",
                          amount: "$22.40",
                          status: "Completed",
                          date: "Yesterday, 2:15 PM",
                        },
                      ])
                      .map((order, index) => (
                        <div key={index} className="flex items-center justify-between p-4 border rounded-lg">
                          <div className="flex-1">
                            <div className="flex items-center justify-between mb-1">
                              <span className="font-medium text-gray-900">{order.id}</span>
                              <Badge
                                variant={
                                  order.status === "Completed"
                                    ? "default"
                                    : order.status === "Ready"
                                      ? "secondary"
                                      : "outline"
                                }
                                className={
                                  order.status === "Completed"
                                    ? "bg-green-100 text-green-800"
                                    : order.status === "Ready"
                                      ? "bg-blue-100 text-blue-800"
                                      : "bg-yellow-100 text-yellow-800"
                                }
                              >
                                {order.status}
                              </Badge>
                            </div>
                            <p className="text-sm text-gray-600">{order.customer}</p>
                            <p className="text-sm text-gray-500">{order.items}</p>
                            <p className="text-xs text-gray-400">{order.date}</p>
                          </div>
                          <div className="text-right ml-4">
                            <p className="font-semibold text-gray-900">{order.amount}</p>
                            <Button variant="outline" size="sm" className="mt-2 bg-transparent">
                              View Details
                            </Button>
                          </div>
                        </div>
                      ))}
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="reviews" className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>Customer Reviews</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-6">
                    {recentReviews
                      .concat([
                        {
                          customer: "Jennifer L.",
                          rating: 5,
                          date: "3 weeks ago",
                          comment: "Mrs. Lim's cooking reminds me of my childhood. The ayam buah keluak is incredible!",
                        },
                        {
                          customer: "Kevin S.",
                          rating: 4,
                          date: "1 month ago",
                          comment:
                            "Great authentic Peranakan food. The kueh salat was a bit sweet for my taste but overall excellent.",
                        },
                      ])
                      .map((review, index) => (
                        <div key={index} className="p-4 border rounded-lg">
                          <div className="flex items-center justify-between mb-2">
                            <span className="font-medium text-gray-900">{review.customer}</span>
                            <div className="flex items-center space-x-2">
                              <div className="flex">
                                {[...Array(review.rating)].map((_, i) => (
                                  <Star key={i} className="w-4 h-4 fill-yellow-400 text-yellow-400" />
                                ))}
                              </div>
                              <span className="text-sm text-gray-500">{review.date}</span>
                            </div>
                          </div>
                          <p className="text-gray-600 mb-3">{review.comment}</p>
                          <Button variant="outline" size="sm">
                            <MessageSquare className="w-4 h-4 mr-2" />
                            Reply
                          </Button>
                        </div>
                      ))}
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="analytics" className="space-y-6">
              <div className="grid lg:grid-cols-2 gap-6">
                <Card>
                  <CardHeader>
                    <CardTitle>Profile Views Over Time</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="h-64 bg-gray-100 rounded-lg flex items-center justify-center">
                      <span className="text-gray-500">Chart placeholder - Profile views by month</span>
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle>Popular Menu Items</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      <div className="flex items-center justify-between">
                        <span className="text-sm text-gray-600">Kueh Lapis</span>
                        <div className="flex items-center space-x-2">
                          <div className="w-24 bg-gray-200 rounded-full h-2">
                            <div className="bg-orange-600 h-2 rounded-full" style={{ width: "85%" }}></div>
                          </div>
                          <span className="text-sm font-medium">85%</span>
                        </div>
                      </div>
                      <div className="flex items-center justify-between">
                        <span className="text-sm text-gray-600">Laksa Lemak</span>
                        <div className="flex items-center space-x-2">
                          <div className="w-24 bg-gray-200 rounded-full h-2">
                            <div className="bg-orange-600 h-2 rounded-full" style={{ width: "72%" }}></div>
                          </div>
                          <span className="text-sm font-medium">72%</span>
                        </div>
                      </div>
                      <div className="flex items-center justify-between">
                        <span className="text-sm text-gray-600">Ondeh Ondeh</span>
                        <div className="flex items-center space-x-2">
                          <div className="w-24 bg-gray-200 rounded-full h-2">
                            <div className="bg-orange-600 h-2 rounded-full" style={{ width: "68%" }}></div>
                          </div>
                          <span className="text-sm font-medium">68%</span>
                        </div>
                      </div>
                      <div className="flex items-center justify-between">
                        <span className="text-sm text-gray-600">Ayam Buah Keluak</span>
                        <div className="flex items-center space-x-2">
                          <div className="w-24 bg-gray-200 rounded-full h-2">
                            <div className="bg-orange-600 h-2 rounded-full" style={{ width: "45%" }}></div>
                          </div>
                          <span className="text-sm font-medium">45%</span>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>

              <Card>
                <CardHeader>
                  <CardTitle>Performance Insights</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid md:grid-cols-3 gap-6">
                    <div className="text-center">
                      <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-3">
                        <TrendingUp className="w-8 h-8 text-green-600" />
                      </div>
                      <h4 className="font-semibold text-gray-900 mb-1">Growing Popularity</h4>
                      <p className="text-sm text-gray-600">Your profile views increased by 23% this month</p>
                    </div>
                    <div className="text-center">
                      <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-3">
                        <Star className="w-8 h-8 text-blue-600" />
                      </div>
                      <h4 className="font-semibold text-gray-900 mb-1">Excellent Reviews</h4>
                      <p className="text-sm text-gray-600">Maintaining a 4.8-star average rating</p>
                    </div>
                    <div className="text-center">
                      <div className="w-16 h-16 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-3">
                        <Users className="w-8 h-8 text-orange-600" />
                      </div>
                      <h4 className="font-semibold text-gray-900 mb-1">Loyal Customers</h4>
                      <p className="text-sm text-gray-600">40% of orders are from repeat customers</p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
      </div>
    </div>
  )
}


--- FILE: app/cafe/[id]/page.tsx ---
"use client"

import { ArrowLeft, MapPin, Clock, Phone, Mail, Instagram, Star, Heart, Share2, MessageSquare, Map, Navigation, Plus, Minus, ShoppingCart, X } from "lucide-react"
import Image from "next/image"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Separator } from "@/components/ui/separator"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogTrigger } from "@/components/ui/dialog"
import { Textarea } from "@/components/ui/textarea"
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { useState, useEffect } from "react"
import { useAuth } from "@/lib/auth-context"
import { useToast } from "@/components/ui/use-toast"
import { supabase } from "@/lib/supabaseClient"

export default function CafeProfilePage({ params }: { params: { id: string } }) {
  const { user } = useAuth()
  const { toast } = useToast()
  const [isSaved, setIsSaved] = useState(false)
  const [isReviewDialogOpen, setIsReviewDialogOpen] = useState(false)
  const [reviewText, setReviewText] = useState("")
  const [reviewRating, setReviewRating] = useState(5)
  const [isSubmittingReview, setIsSubmittingReview] = useState(false)
  const [nearestLocations, setNearestLocations] = useState<any[]>([])
  
  // Cart state
  const [cart, setCart] = useState<any[]>([])
  const [isCartOpen, setIsCartOpen] = useState(false)
  const [isCheckoutOpen, setIsCheckoutOpen] = useState(false)
  const [customerInfo, setCustomerInfo] = useState({
    name: '',
    phone: '',
    email: '',
    pickupTime: '',
    notes: ''
  })
  const [isProcessingOrder, setIsProcessingOrder] = useState(false)

  // Mock data - in real app, this would be fetched based on params.id
  const cafe = {
    id: 1,
    name: "Ah Ma's Kitchen",
    owner: "Mrs. Lim",
    cuisine: ["Peranakan", "Local"],
    location: "Toa Payoh",
    fullAddress: "Blk 123 Toa Payoh Lorong 1, #01-456, Singapore 310123",
    rating: 4.8,
    reviewCount: 124,
    priceRange: "$$",
    isOpen: true,
    description:
      "Welcome to Ah Ma's Kitchen, where traditional Peranakan recipes meet modern home dining. Started by Mrs. Lim in her HDB flat, we specialize in authentic Nyonya kueh and traditional dishes passed down through three generations. Every dish is prepared with love using family recipes and the freshest local ingredients.",
    specialty: "Authentic Nyonya Kueh & Traditional Peranakan Dishes",
    images: [
      "/placeholder.svg?height=400&width=600",
      "/placeholder.svg?height=300&width=400",
      "/placeholder.svg?height=300&width=400",
      "/placeholder.svg?height=300&width=400",
    ],
    menu: [
      {
        category: "Signature Kueh",
        items: [
          { id: "kueh-lapis", name: "Kueh Lapis", price: 2.50, description: "Traditional 9-layer steamed cake" },
          { id: "ondeh-ondeh", name: "Ondeh Ondeh", price: 1.80, description: "Pandan glutinous rice balls with gula melaka" },
          { id: "kueh-salat", name: "Kueh Salat", price: 3.20, description: "Coconut custard on glutinous rice base" },
          { id: "ang-ku-kueh", name: "Ang Ku Kueh", price: 2.00, description: "Red tortoise cake with sweet mung bean filling" },
        ],
      },
      {
        category: "Main Dishes",
        items: [
          { id: "ayam-buah-keluak", name: "Ayam Buah Keluak", price: 15.80, description: "Chicken with black nuts in rich spicy gravy" },
          { id: "babi-pongteh", name: "Babi Pongteh", price: 12.50, description: "Braised pork belly in fermented bean sauce" },
          { id: "laksa-lemak", name: "Laksa Lemak", price: 8.80, description: "Rich coconut curry noodle soup" },
          { id: "mee-siam", name: "Mee Siam", price: 7.50, description: "Tangy rice vermicelli in tamarind gravy" },
        ],
      },
    ],
    hours: {
      Monday: "9:00 AM - 6:00 PM",
      Tuesday: "9:00 AM - 6:00 PM",
      Wednesday: "9:00 AM - 6:00 PM",
      Thursday: "9:00 AM - 6:00 PM",
      Friday: "9:00 AM - 6:00 PM",
      Saturday: "8:00 AM - 7:00 PM",
      Sunday: "Closed",
    },
    contact: {
      phone: "+65 9123 4567",
      email: "ahmaskitchen@gmail.com",
      instagram: "@ahmas_kitchen_sg",
      whatsapp: "+65 9123 4567",
    },
    coordinates: {
      lat: 1.3521,
      lng: 103.8198,
    },
    reviews: [
      {
        name: "Sarah T.",
        rating: 5,
        date: "2 days ago",
        comment:
          "Amazing authentic Peranakan food! The kueh lapis was exactly like my grandmother used to make. Mrs. Lim is so passionate about preserving these traditional recipes.",
      },
      {
        name: "David L.",
        rating: 5,
        date: "1 week ago",
        comment:
          "Best laksa lemak I've had in Singapore! The flavors are so rich and authentic. Definitely ordering again.",
      },
      {
        name: "Michelle C.",
        rating: 4,
        date: "2 weeks ago",
        comment:
          "Love supporting local home businesses. The ondeh ondeh was perfect - just the right amount of sweetness. Will try more items next time!",
      },
    ],
  }

  // Interactive functions
  const handleSave = async () => {
    if (!user) {
      toast({
        title: "Sign in required",
        description: "Please sign in to save cafes to your favorites",
        variant: "destructive",
      })
      return
    }

    try {
      setIsSaved(!isSaved)
      toast({
        title: isSaved ? "Removed from favorites" : "Added to favorites",
        description: isSaved ? `${cafe.name} removed from your saved cafes` : `${cafe.name} saved to your favorites`,
      })
    } catch (error) {
      console.error("Error saving cafe:", error)
      toast({
        title: "Error",
        description: "Failed to save cafe. Please try again.",
        variant: "destructive",
      })
    }
  }

  const handleShare = async () => {
    const shareData = {
      title: `${cafe.name} - ${cafe.specialty}`,
      text: `Check out ${cafe.name} in ${cafe.location}! ${cafe.description.slice(0, 100)}...`,
      url: window.location.href,
    }

    try {
      if (navigator.share && navigator.canShare(shareData)) {
        await navigator.share(shareData)
      } else {
        await navigator.clipboard.writeText(window.location.href)
        toast({
          title: "Link copied!",
          description: "Cafe link copied to clipboard",
        })
      }
    } catch (error) {
      console.error("Error sharing:", error)
      toast({
        title: "Error",
        description: "Failed to share. Please try again.",
        variant: "destructive",
      })
    }
  }

  const handleCallToOrder = () => {
    const phoneNumber = cafe.contact.phone.replace(/\s/g, "")
    window.open(`tel:${phoneNumber}`)
    toast({
      title: "Calling cafe",
      description: `Dialing ${cafe.contact.phone}`,
    })
  }

  const handleInstagram = () => {
    const instagramHandle = cafe.contact.instagram.replace("@", "")
    window.open(`https://instagram.com/${instagramHandle}`, "_blank")
    toast({
      title: "Opening Instagram",
      description: `Following ${cafe.contact.instagram}`,
    })
  }

  const handleOpenInMaps = () => {
    const encodedAddress = encodeURIComponent(cafe.fullAddress)
    const mapsUrl = `https://www.google.com/maps/search/?api=1&query=${encodedAddress}`
    window.open(mapsUrl, "_blank")
    toast({
      title: "Opening in Maps",
      description: "Directions to " + cafe.name,
    })
  }

  const handleWriteReview = async () => {
    if (!user) {
      toast({
        title: "Sign in required",
        description: "Please sign in to write a review",
        variant: "destructive",
      })
      return
    }
    setIsReviewDialogOpen(true)
  }

  const submitReview = async () => {
    if (!reviewText.trim()) {
      toast({
        title: "Review required",
        description: "Please write a review before submitting",
        variant: "destructive",
      })
      return
    }

    setIsSubmittingReview(true)
    try {
      // Here you would save the review to your database
      await new Promise(resolve => setTimeout(resolve, 1000)) // Simulate API call
      
      toast({
        title: "Review submitted!",
        description: "Thank you for your feedback",
      })
      setIsReviewDialogOpen(false)
      setReviewText("")
      setReviewRating(5)
    } catch (error) {
      console.error("Error submitting review:", error)
      toast({
        title: "Error",
        description: "Failed to submit review. Please try again.",
        variant: "destructive",
      })
    } finally {
      setIsSubmittingReview(false)
    }
  }

  // Cart functionality
  const addToCart = (item: any) => {
    const existingItem = cart.find(cartItem => cartItem.id === item.id)
    
    if (existingItem) {
      setCart(cart.map(cartItem => 
        cartItem.id === item.id 
          ? { ...cartItem, quantity: cartItem.quantity + 1 }
          : cartItem
      ))
    } else {
      setCart([...cart, { ...item, quantity: 1 }])
    }
    
    toast({
      title: "Added to cart",
      description: `${item.name} added to your order`,
    })
  }

  const removeFromCart = (itemId: string) => {
    setCart(cart.filter(item => item.id !== itemId))
    toast({
      title: "Removed from cart",
      description: "Item removed from your order",
    })
  }

  const updateQuantity = (itemId: string, newQuantity: number) => {
    if (newQuantity === 0) {
      removeFromCart(itemId)
      return
    }
    
    setCart(cart.map(item => 
      item.id === itemId 
        ? { ...item, quantity: newQuantity }
        : item
    ))
  }

  const getCartTotal = () => {
    return cart.reduce((total, item) => total + (item.price * item.quantity), 0)
  }

  const clearCart = () => {
    setCart([])
    setIsCartOpen(false)
    toast({
      title: "Cart cleared",
      description: "All items removed from cart",
    })
  }

  const handleCheckout = async () => {
    if (!user) {
      toast({
        title: "Sign in required",
        description: "Please sign in to place an order",
        variant: "destructive",
      })
      return
    }

    if (cart.length === 0) {
      toast({
        title: "Cart is empty",
        description: "Please add items to your cart before checkout",
        variant: "destructive",
      })
      return
    }

    setIsCartOpen(false)
    setIsCheckoutOpen(true)
  }

  const processOrder = async () => {
    if (!customerInfo.name.trim() || !customerInfo.phone.trim()) {
      toast({
        title: "Missing information",
        description: "Please provide your name and phone number",
        variant: "destructive",
      })
      return
    }

    setIsProcessingOrder(true)
    try {
      const response = await fetch('/api/checkout', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          items: cart,
          customerInfo,
          businessId: cafe.id
        })
      })

      const result = await response.json()

      if (!response.ok) {
        throw new Error(result.error || 'Failed to process order')
      }

      toast({
        title: "Order placed successfully!",
        description: `Order ${result.orderNumber} has been confirmed`,
      })

      // Redirect to success page
      window.location.href = result.url
      
      // Clear form and cart
      setCart([])
      setCustomerInfo({
        name: '',
        phone: '',
        email: '',
        pickupTime: '',
        notes: ''
      })
      setIsCheckoutOpen(false)

    } catch (error) {
      console.error("Order processing error:", error)
      toast({
        title: "Order failed",
        description: error instanceof Error ? error.message : "Failed to process order. Please try again.",
        variant: "destructive",
      })
    } finally {
      setIsProcessingOrder(false)
    }
  }

  // Get current day for showing today's hours
  const getCurrentDay = () => {
    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
    return days[new Date().getDay()]
  }

  const todayHours = cafe.hours[getCurrentDay() as keyof typeof cafe.hours]

  useEffect(() => {
    // Mock nearby locations - in real app, this would be a geolocation-based API call
    setNearestLocations([
      { name: "Toa Payoh Central", distance: "0.5 km", walkTime: "6 min" },
      { name: "Toa Payoh MRT Station", distance: "0.8 km", walkTime: "10 min" },
      { name: "HDB Hub", distance: "1.2 km", walkTime: "15 min" },
    ])
  }, [])

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm sticky top-0 z-50">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <Link href="/" className="flex items-center space-x-2 text-gray-600 hover:text-gray-900">
              <ArrowLeft className="w-5 h-5" />
              <span>Back to Browse</span>
            </Link>
            <div className="flex items-center space-x-3">
              <Button variant="ghost" size="sm" onClick={handleSave}>
                <Heart className={`w-4 h-4 mr-2 ${isSaved ? 'fill-red-500 text-red-500' : ''}`} />
                {isSaved ? 'Saved' : 'Save'}
              </Button>
              <Button variant="ghost" size="sm" onClick={handleShare}>
                <Share2 className="w-4 h-4 mr-2" />
                Share
              </Button>
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={() => setIsCartOpen(true)}
                className="relative"
              >
                <ShoppingCart className="w-4 h-4 mr-2" />
                Cart
                {cart.length > 0 && (
                  <Badge className="absolute -top-2 -right-2 bg-orange-600 text-white text-xs min-w-[20px] h-5 flex items-center justify-center rounded-full">
                    {cart.reduce((total, item) => total + item.quantity, 0)}
                  </Badge>
                )}
              </Button>
            </div>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-8">
        <div className="max-w-6xl mx-auto">
          {/* Hero Section */}
          <div className="grid lg:grid-cols-2 gap-8 mb-8">
            {/* Images */}
            <div className="space-y-4">
              <div className="relative">
                <Image
                  src={cafe.images[0] || "/placeholder.svg"}
                  alt={cafe.name}
                  width={600}
                  height={400}
                  className="w-full h-80 object-cover rounded-lg"
                />
                <div className="absolute top-4 right-4">
                  <Badge variant={cafe.isOpen ? "default" : "secondary"} className="bg-white/90 text-gray-900">
                    {cafe.isOpen ? "Open Now" : "Closed"}
                  </Badge>
                </div>
              </div>
              <div className="grid grid-cols-3 gap-2">
                {cafe.images.slice(1).map((image, index) => (
                  <Image
                    key={index}
                    src={image || "/placeholder.svg"}
                    alt={`${cafe.name} ${index + 2}`}
                    width={200}
                    height={150}
                    className="w-full h-24 object-cover rounded-lg cursor-pointer hover:opacity-80 transition-opacity"
                  />
                ))}
              </div>
            </div>

            {/* Info */}
            <div>
              <div className="flex items-start justify-between mb-4">
                <div>
                  <h1 className="text-3xl font-bold text-gray-900 mb-2">{cafe.name}</h1>
                  <p className="text-lg text-orange-600 mb-2">{cafe.specialty}</p>
                  <div className="flex items-center space-x-4 text-sm text-gray-600">
                    <div className="flex items-center">
                      <Star className="w-4 h-4 mr-1 fill-yellow-400 text-yellow-400" />
                      <span className="font-semibold">{cafe.rating}</span>
                      <span className="ml-1">({cafe.reviewCount} reviews)</span>
                    </div>
                    <span>‚Ä¢</span>
                    <span>{cafe.priceRange}</span>
                    <span>‚Ä¢</span>
                    <div className="flex flex-wrap gap-1">
                      {cafe.cuisine.map((type) => (
                        <Badge key={type} variant="outline" className="text-xs">
                          {type}
                        </Badge>
                      ))}
                    </div>
                  </div>
                </div>
              </div>

              <p className="text-gray-600 mb-6 leading-relaxed">{cafe.description}</p>

              <div className="space-y-4 mb-6">
                <div className="flex items-center text-gray-600">
                  <MapPin className="w-5 h-5 mr-3 text-orange-600" />
                  <div>
                    <p className="font-medium">{cafe.fullAddress}</p>
                    <p className="text-sm text-gray-500">Home-based cafe in {cafe.location}</p>
                  </div>
                </div>

                <div className="flex items-center text-gray-600">
                  <Clock className="w-5 h-5 mr-3 text-orange-600" />
                  <div>
                    <p className="font-medium">Open today: {todayHours}</p>
                    <p className="text-sm text-gray-500">See all hours below</p>
                  </div>
                </div>
              </div>

              <div className="flex flex-col sm:flex-row gap-3">
                <Button className="bg-orange-600 hover:bg-orange-700 flex-1" onClick={handleCallToOrder}>
                  <Phone className="w-4 h-4 mr-2" />
                  Call to Order
                </Button>
                <Button variant="outline" className="flex-1 bg-transparent" onClick={handleInstagram}>
                  <Instagram className="w-4 h-4 mr-2" />
                  Follow on Instagram
                </Button>
              </div>
            </div>
          </div>

          <div className="grid lg:grid-cols-3 gap-8">
            {/* Main Content */}
            <div className="lg:col-span-2 space-y-8">
              {/* Menu */}
              <Card>
                <CardContent className="p-6">
                  <h2 className="text-2xl font-bold text-gray-900 mb-6">Menu</h2>
                  {cafe.menu.map((category, categoryIndex) => (
                    <div key={categoryIndex} className="mb-8 last:mb-0">
                      <h3 className="text-xl font-semibold text-gray-900 mb-4">{category.category}</h3>
                      <div className="space-y-4">
                        {category.items.map((item, itemIndex) => (
                          <div key={itemIndex} className="flex justify-between items-center p-4 bg-gray-50 rounded-lg">
                            <div className="flex-1">
                              <h4 className="font-medium text-gray-900">{item.name}</h4>
                              <p className="text-sm text-gray-600 mt-1">{item.description}</p>
                              <span className="font-semibold text-orange-600 text-lg">S${item.price.toFixed(2)}</span>
                            </div>
                            <Button 
                              onClick={() => addToCart(item)}
                              className="bg-orange-600 hover:bg-orange-700 ml-4"
                              size="sm"
                            >
                              <Plus className="w-4 h-4 mr-1" />
                              Add
                            </Button>
                          </div>
                        ))}
                      </div>
                      {categoryIndex < cafe.menu.length - 1 && <Separator className="mt-6" />}
                    </div>
                  ))}
                </CardContent>
              </Card>

              {/* Reviews */}
              <Card>
                <CardContent className="p-6">
                  <div className="flex items-center justify-between mb-6">
                    <h2 className="text-2xl font-bold text-gray-900">Reviews</h2>
                    <Button variant="outline" size="sm" onClick={handleWriteReview}>
                      <MessageSquare className="w-4 h-4 mr-2" />
                      Write a Review
                    </Button>
                  </div>

                  <div className="space-y-6">
                    {cafe.reviews.map((review, index) => (
                      <div key={index} className="border-b border-gray-100 last:border-0 pb-6 last:pb-0">
                        <div className="flex items-center justify-between mb-2">
                          <div className="flex items-center space-x-2">
                            <span className="font-medium text-gray-900">{review.name}</span>
                            <div className="flex">
                              {[...Array(review.rating)].map((_, i) => (
                                <Star key={i} className="w-4 h-4 fill-yellow-400 text-yellow-400" />
                              ))}
                            </div>
                          </div>
                          <span className="text-sm text-gray-500">{review.date}</span>
                        </div>
                        <p className="text-gray-600">{review.comment}</p>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Sidebar */}
            <div className="space-y-6">
              {/* Contact Info */}
              <Card>
                <CardContent className="p-6">
                  <h3 className="font-semibold text-gray-900 mb-4">Contact Information</h3>
                  <div className="space-y-3">
                    <div className="flex items-center">
                      <Phone className="w-4 h-4 mr-3 text-gray-400" />
                      <span className="text-sm">{cafe.contact.phone}</span>
                    </div>
                    <div className="flex items-center">
                      <Mail className="w-4 h-4 mr-3 text-gray-400" />
                      <span className="text-sm">{cafe.contact.email}</span>
                    </div>
                    <div className="flex items-center">
                      <Instagram className="w-4 h-4 mr-3 text-gray-400" />
                      <span className="text-sm">{cafe.contact.instagram}</span>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Hours */}
              <Card>
                <CardContent className="p-6">
                  <h3 className="font-semibold text-gray-900 mb-4">Opening Hours</h3>
                  <div className="space-y-2">
                    {Object.entries(cafe.hours).map(([day, hours]) => (
                      <div key={day} className="flex justify-between text-sm">
                        <span className="text-gray-600">{day}</span>
                        <span className={hours === "Closed" ? "text-red-600" : "text-gray-900"}>{hours}</span>
                      </div>
                    ))}
                  </div>
                  <p className="text-xs text-gray-500 mt-4">
                    *Please call ahead to confirm availability as this is a home-based business
                  </p>
                </CardContent>
              </Card>

              {/* Location */}
              <Card>
                <CardContent className="p-6">
                  <h3 className="font-semibold text-gray-900 mb-4">Location</h3>
                  <div className="bg-gray-100 h-32 rounded-lg flex items-center justify-center mb-4">
                    <span className="text-gray-500">Map placeholder</span>
                  </div>
                  <p className="text-sm text-gray-600 mb-3">{cafe.fullAddress}</p>
                  <Button variant="outline" size="sm" className="w-full bg-transparent mb-2" onClick={handleOpenInMaps}>
                    <Map className="w-4 h-4 mr-2" />
                    Open in Maps
                  </Button>
                  
                  {/* Nearest Locations */}
                  <div className="mt-4">
                    <h4 className="font-medium text-gray-900 mb-2 text-sm">Nearest Landmarks</h4>
                    <div className="space-y-1">
                      {nearestLocations.map((location, index) => (
                        <div key={index} className="flex items-center justify-between text-xs">
                          <div className="flex items-center">
                            <Navigation className="w-3 h-3 mr-1 text-gray-400" />
                            <span className="text-gray-600">{location.name}</span>
                          </div>
                          <div className="text-gray-500">
                            <span>{location.distance}</span>
                            <span className="ml-1">({location.walkTime} walk)</span>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        </div>
      </div>

      {/* Review Dialog */}
      <Dialog open={isReviewDialogOpen} onOpenChange={setIsReviewDialogOpen}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle>Write a Review for {cafe.name}</DialogTitle>
            <DialogDescription>
              Share your thoughts about this cafe
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div>
              <Label htmlFor="rating" className="text-sm font-medium">Rating</Label>
              <div className="flex items-center space-x-1 mt-1">
                {[1, 2, 3, 4, 5].map((star) => (
                  <Star
                    key={star}
                    className={`w-6 h-6 cursor-pointer transition-colors ${
                      star <= reviewRating 
                        ? 'fill-yellow-400 text-yellow-400' 
                        : 'text-gray-300 hover:text-yellow-200'
                    }`}
                    onClick={() => setReviewRating(star)}
                  />
                ))}
              </div>
            </div>
            <div>
              <Label htmlFor="review" className="text-sm font-medium">Your Review</Label>
              <Textarea
                id="review"
                placeholder="Share your experience with this cafe..."
                value={reviewText}
                onChange={(e) => setReviewText(e.target.value)}
                className="mt-1"
                rows={4}
              />
            </div>
            <div className="flex justify-end space-x-2">
              <Button variant="outline" onClick={() => setIsReviewDialogOpen(false)}>
                Cancel
              </Button>
              <Button 
                onClick={submitReview} 
                disabled={isSubmittingReview}
                className="bg-orange-600 hover:bg-orange-700"
              >
                {isSubmittingReview ? "Submitting..." : "Submit Review"}
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Cart Dialog */}
      <Dialog open={isCartOpen} onOpenChange={setIsCartOpen}>
        <DialogContent className="max-w-md max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center justify-between">
              Your Order
              {cart.length > 0 && (
                <Button variant="ghost" size="sm" onClick={clearCart} className="text-red-600 hover:text-red-700">
                  Clear All
                </Button>
              )}
            </DialogTitle>
            <DialogDescription>
              Review your selected items before proceeding to checkout
            </DialogDescription>
          </DialogHeader>
          
          {cart.length === 0 ? (
            <div className="text-center py-8">
              <ShoppingCart className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <p className="text-gray-500">Your cart is empty</p>
              <p className="text-sm text-gray-400 mt-1">Add some delicious items from the menu!</p>
            </div>
          ) : (
            <div className="space-y-4">
              {cart.map((item) => (
                <div key={item.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                  <div className="flex-1">
                    <h4 className="font-medium text-gray-900">{item.name}</h4>
                    <p className="text-sm text-orange-600">S${item.price.toFixed(2)} each</p>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => updateQuantity(item.id, item.quantity - 1)}
                      className="w-8 h-8 p-0"
                    >
                      <Minus className="w-3 h-3" />
                    </Button>
                    <span className="w-8 text-center font-medium">{item.quantity}</span>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => updateQuantity(item.id, item.quantity + 1)}
                      className="w-8 h-8 p-0"
                    >
                      <Plus className="w-3 h-3" />
                    </Button>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => removeFromCart(item.id)}
                      className="w-8 h-8 p-0 text-red-600 hover:text-red-700"
                    >
                      <X className="w-3 h-3" />
                    </Button>
                  </div>
                </div>
              ))}
              
              <div className="border-t pt-4">
                <div className="flex justify-between items-center mb-4">
                  <span className="text-lg font-semibold">Total:</span>
                  <span className="text-xl font-bold text-orange-600">
                    S${getCartTotal().toFixed(2)}
                  </span>
                </div>
                <Button 
                  onClick={handleCheckout}
                  className="w-full bg-orange-600 hover:bg-orange-700"
                >
                  Proceed to Checkout
                </Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/* Checkout Dialog */}
      <Dialog open={isCheckoutOpen} onOpenChange={setIsCheckoutOpen}>
        <DialogContent className="max-w-md max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>Checkout</DialogTitle>
            <DialogDescription>
              Please provide your details to complete the order
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-4">
            {/* Order Summary */}
            <div className="border rounded-lg p-3 bg-gray-50">
              <h4 className="font-medium mb-2">Order Summary</h4>
              {cart.map((item) => (
                <div key={item.id} className="flex justify-between text-sm mb-1">
                  <span>{item.name} x{item.quantity}</span>
                  <span>S${(item.price * item.quantity).toFixed(2)}</span>
                </div>
              ))}
              <div className="border-t pt-2 mt-2 font-semibold">
                Total: S${getCartTotal().toFixed(2)}
              </div>
            </div>

            {/* Customer Information */}
            <div className="space-y-3">
              <div>
                <Label htmlFor="customer-name">Name *</Label>
                <Input
                  id="customer-name"
                  value={customerInfo.name}
                  onChange={(e) => setCustomerInfo({...customerInfo, name: e.target.value})}
                  placeholder="Your full name"
                />
              </div>
              
              <div>
                <Label htmlFor="customer-phone">Phone Number *</Label>
                <Input
                  id="customer-phone"
                  value={customerInfo.phone}
                  onChange={(e) => setCustomerInfo({...customerInfo, phone: e.target.value})}
                  placeholder="+65 9123 4567"
                />
              </div>
              
              <div>
                <Label htmlFor="customer-email">Email (Optional)</Label>
                <Input
                  id="customer-email"
                  type="email"
                  value={customerInfo.email}
                  onChange={(e) => setCustomerInfo({...customerInfo, email: e.target.value})}
                  placeholder="your.email@example.com"
                />
              </div>
              
              <div>
                <Label htmlFor="pickup-time">Preferred Pickup Time</Label>
                <Select value={customerInfo.pickupTime} onValueChange={(value) => setCustomerInfo({...customerInfo, pickupTime: value})}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select pickup time" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="asap">As soon as possible</SelectItem>
                    <SelectItem value="30min">In 30 minutes</SelectItem>
                    <SelectItem value="1hour">In 1 hour</SelectItem>
                    <SelectItem value="2hours">In 2 hours</SelectItem>
                    <SelectItem value="later">Later today</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              <div>
                <Label htmlFor="notes">Special Instructions (Optional)</Label>
                <Textarea
                  id="notes"
                  value={customerInfo.notes}
                  onChange={(e) => setCustomerInfo({...customerInfo, notes: e.target.value})}
                  placeholder="Any special requests or dietary requirements..."
                  rows={2}
                />
              </div>
            </div>

            {/* Payment Info */}
            <div className="border rounded-lg p-3 bg-blue-50">
              <p className="text-sm text-blue-800">
                üí≥ <strong>Payment:</strong> This is a demo order. No real payment will be processed.
              </p>
            </div>

            <div className="flex space-x-2">
              <Button variant="outline" onClick={() => setIsCheckoutOpen(false)} className="flex-1">
                Back to Cart
              </Button>
              <Button 
                onClick={processOrder}
                disabled={isProcessingOrder}
                className="flex-1 bg-orange-600 hover:bg-orange-700"
              >
                {isProcessingOrder ? "Processing..." : "Place Order"}
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  )
}


--- FILE: app/categories/page.tsx ---
"use client"

import Link from "next/link"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"

export default function CategoriesPage() {
  const categories = [
    { 
      name: "Local", 
      icon: "üá∏üá¨", 
      count: 45,
      description: "Authentic Singaporean and traditional dishes",
      slug: "local"
    },
    { 
      name: "Western", 
      icon: "üçî", 
      count: 32,
      description: "Western cuisine and international favorites",
      slug: "western"
    },
    { 
      name: "Asian Fusion", 
      icon: "üçú", 
      count: 28,
      description: "Creative fusion of Asian flavors",
      slug: "asian-fusion"
    },
    { 
      name: "Desserts", 
      icon: "üßÅ", 
      count: 19,
      description: "Sweet treats and handmade pastries",
      slug: "desserts"
    },
    { 
      name: "Coffee", 
      icon: "‚òï", 
      count: 41,
      description: "Artisan coffee and specialty brews",
      slug: "coffee"
    },
    { 
      name: "Healthy", 
      icon: "ü•ó", 
      count: 23,
      description: "Nutritious and organic options",
      slug: "healthy"
    },
  ]

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <Link href="/" className="flex items-center space-x-2">
              <div className="w-10 h-10 bg-gradient-to-r from-orange-500 to-red-500 rounded-full flex items-center justify-center">
                <span className="text-white font-bold text-lg">SG</span>
              </div>
              <span className="font-bold text-xl text-gray-900">SG Home Eats</span>
            </Link>
            <Button asChild variant="outline">
              <Link href="/">‚Üê Back to Home</Link>
            </Button>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-8">
        <div className="mb-8 text-center">
          <h1 className="text-3xl font-bold text-gray-900 mb-4">Browse by Category</h1>
          <p className="text-lg text-gray-600 max-w-2xl mx-auto">
            Discover home cafes by cuisine type and find exactly what you're craving
          </p>
        </div>

        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6 max-w-4xl mx-auto">
          {categories.map((category, index) => (
            <Link key={index} href={`/category/${category.slug}`}>
              <Card className="hover:shadow-lg transition-all duration-300 cursor-pointer group h-full">
                <CardContent className="p-6 text-center h-full flex flex-col">
                  <div className="text-6xl mb-4 group-hover:scale-110 transition-transform">
                    {category.icon}
                  </div>
                  <h3 className="font-bold text-xl text-gray-900 mb-2">
                    {category.name}
                  </h3>
                  <p className="text-gray-600 mb-4 flex-1">
                    {category.description}
                  </p>
                  <div className="text-orange-600 font-semibold">
                    {category.count} cafes
                  </div>
                </CardContent>
              </Card>
            </Link>
          ))}
        </div>

        <div className="text-center mt-12">
          <Button asChild size="lg">
            <Link href="/browse">Browse All Cafes</Link>
          </Button>
        </div>
      </div>
    </div>
  )
}


--- FILE: app/category/[slug]/page.tsx ---
"use client"

import Link from "next/link"
import Image from "next/image"
import { Card, CardContent, CardFooter } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Clock, MapPin, Star } from "lucide-react"

interface CategoryPageProps {
  params: {
    slug: string
  }
}

export default function CategoryPage({ params }: CategoryPageProps) {
  const categoryMap: Record<string, { name: string; icon: string; description: string }> = {
    "local": { 
      name: "Local", 
      icon: "üá∏üá¨", 
      description: "Authentic Singaporean and traditional dishes" 
    },
    "western": { 
      name: "Western", 
      icon: "üçî", 
      description: "Western cuisine and international favorites" 
    },
    "asian-fusion": { 
      name: "Asian Fusion", 
      icon: "üçú", 
      description: "Creative fusion of Asian flavors" 
    },
    "desserts": { 
      name: "Desserts", 
      icon: "üßÅ", 
      description: "Sweet treats and handmade pastries" 
    },
    "coffee": { 
      name: "Coffee", 
      icon: "‚òï", 
      description: "Artisan coffee and specialty brews" 
    },
    "healthy": { 
      name: "Healthy", 
      icon: "ü•ó", 
      description: "Nutritious and organic options" 
    },
  }

  const category = categoryMap[params.slug] || {
    name: "Category",
    icon: "üçΩÔ∏è",
    description: "Delicious home-cooked meals"
  }

  // Sample cafes for the category
  const cafes = [
    {
      id: 1,
      name: "Auntie May's Kitchen",
      description: "Traditional Hainanese chicken rice and local favorites made with love",
      district: "Toa Payoh",
      rating: 4.8,
      reviewCount: 234,
      image: "/placeholder.jpg",
      tags: ["Halal", "Local Favorites"],
      openingHours: "9:00 AM - 8:00 PM"
    },
    {
      id: 2,
      name: "Spice Garden Home",
      description: "Authentic Malaysian and Peranakan dishes with family recipes",
      district: "Katong",
      rating: 4.7,
      reviewCount: 189,
      image: "/placeholder.jpg",
      tags: ["Spicy", "Family Recipe"],
      openingHours: "11:00 AM - 9:00 PM"
    },
    {
      id: 3,
      name: "Sunny's Laksa Corner",
      description: "Award-winning laksa and other local noodle dishes",
      district: "Bedok",
      rating: 4.9,
      reviewCount: 412,
      image: "/placeholder.jpg",
      tags: ["Award Winner", "Noodles"],
      openingHours: "8:00 AM - 3:00 PM"
    },
    {
      id: 4,
      name: "Heritage Flavors",
      description: "Multi-generational recipes from various Asian cultures",
      district: "Chinatown",
      rating: 4.6,
      reviewCount: 156,
      image: "/placeholder.jpg",
      tags: ["Heritage", "Multi-cultural"],
      openingHours: "10:00 AM - 7:00 PM"
    },
    {
      id: 5,
      name: "Mama's Secret Recipe",
      description: "Hidden gems of Southeast Asian cuisine in a cozy home setting",
      district: "Hougang",
      rating: 4.8,
      reviewCount: 298,
      image: "/placeholder.jpg",
      tags: ["Secret Recipe", "Cozy"],
      openingHours: "12:00 PM - 8:00 PM"
    },
    {
      id: 6,
      name: "Golden Wok Express",
      description: "Fast and delicious zi char dishes for the modern family",
      district: "Jurong",
      rating: 4.5,
      reviewCount: 178,
      image: "/placeholder.jpg",
      tags: ["Zi Char", "Quick Service"],
      openingHours: "5:00 PM - 11:00 PM"
    }
  ]

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <Link href="/" className="flex items-center space-x-2">
              <div className="w-10 h-10 bg-gradient-to-r from-orange-500 to-red-500 rounded-full flex items-center justify-center">
                <span className="text-white font-bold text-lg">SG</span>
              </div>
              <span className="font-bold text-xl text-gray-900">SG Home Eats</span>
            </Link>
            <Button asChild variant="outline">
              <Link href="/categories">‚Üê Back to Categories</Link>
            </Button>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-8">
        {/* Category Header */}
        <div className="mb-8 text-center">
          <div className="text-6xl mb-4">{category.icon}</div>
          <h1 className="text-3xl font-bold text-gray-900 mb-2">{category.name} Cafes</h1>
          <p className="text-lg text-gray-600 max-w-2xl mx-auto mb-6">
            {category.description}
          </p>
          <div className="text-gray-500">
            {cafes.length} cafes found
          </div>
        </div>

        {/* Cafes Grid */}
        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
          {cafes.map((cafe) => (
            <Link key={cafe.id} href={`/cafe/${cafe.id}`}>
              <Card className="hover:shadow-lg transition-all duration-300 cursor-pointer group h-full flex flex-col">
                <div className="relative h-48 overflow-hidden rounded-t-lg">
                  <Image
                    src={cafe.image}
                    alt={cafe.name}
                    fill
                    className="object-cover group-hover:scale-105 transition-transform duration-300"
                    onError={(e) => {
                      const target = e.target as HTMLImageElement;
                      target.src = '/placeholder.svg';
                    }}
                  />
                  <div className="absolute top-3 right-3">
                    <Badge variant="secondary" className="bg-white/90 text-gray-900">
                      <Star className="w-3 h-3 mr-1 fill-yellow-400 text-yellow-400" />
                      {cafe.rating}
                    </Badge>
                  </div>
                </div>
                
                <CardContent className="p-4 flex-1 flex flex-col">
                  <h3 className="font-bold text-lg text-gray-900 mb-2 line-clamp-1">
                    {cafe.name}
                  </h3>
                  <p className="text-gray-600 mb-3 line-clamp-2 flex-1">
                    {cafe.description}
                  </p>
                  
                  <div className="space-y-2">
                    <div className="flex items-center text-sm text-gray-500">
                      <MapPin className="w-4 h-4 mr-1" />
                      {cafe.district}
                    </div>
                    <div className="flex items-center text-sm text-gray-500">
                      <Clock className="w-4 h-4 mr-1" />
                      {cafe.openingHours}
                    </div>
                  </div>
                </CardContent>
                
                <CardFooter className="p-4 pt-0">
                  <div className="w-full space-y-3">
                    <div className="flex flex-wrap gap-1">
                      {cafe.tags.map((tag, tagIndex) => (
                        <Badge key={tagIndex} variant="outline" className="text-xs">
                          {tag}
                        </Badge>
                      ))}
                    </div>
                    <div className="text-sm text-gray-500">
                      {cafe.reviewCount} reviews
                    </div>
                  </div>
                </CardFooter>
              </Card>
            </Link>
          ))}
        </div>

        {/* Back to Categories */}
        <div className="text-center mt-12">
          <Button asChild size="lg" variant="outline" className="mr-4">
            <Link href="/categories">View All Categories</Link>
          </Button>
          <Button asChild size="lg">
            <Link href="/browse">Browse All Cafes</Link>
          </Button>
        </div>
      </div>
    </div>
  )
}


--- FILE: app/contact/page.tsx ---
"use client"

import Link from "next/link"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Label } from "@/components/ui/label"
import { 
  MapPin,
  Phone,
  Mail,
  Clock,
  MessageCircle,
  Send,
  CheckCircle,
  Users,
  Building,
  HelpCircle
} from "lucide-react"

export default function ContactPage() {
  const contactInfo = [
    {
      icon: <MapPin className="w-6 h-6 text-orange-600" />,
      title: "Office Address",
      details: [
        "SG Home Eats Pte Ltd",
        "123 Food Street, #12-34",
        "Singapore 123456"
      ]
    },
    {
      icon: <Phone className="w-6 h-6 text-green-600" />,
      title: "Phone Support",
      details: [
        "+65 6123 4567 (General)",
        "+65 6123 4568 (Business)",
        "Mon-Fri: 9am-6pm SGT"
      ]
    },
    {
      icon: <Mail className="w-6 h-6 text-blue-600" />,
      title: "Email Support",
      details: [
        "hello@sghomeeats.com",
        "business@sghomeeats.com",
        "support@sghomeeats.com"
      ]
    },
    {
      icon: <Clock className="w-6 h-6 text-purple-600" />,
      title: "Business Hours",
      details: [
        "Monday - Friday: 9:00 AM - 6:00 PM",
        "Saturday: 10:00 AM - 4:00 PM",
        "Sunday: Closed"
      ]
    }
  ]

  const inquiryTypes = [
    {
      value: "general",
      label: "General Inquiry",
      icon: <HelpCircle className="w-5 h-5" />
    },
    {
      value: "business",
      label: "Business Partnership",
      icon: <Building className="w-5 h-5" />
    },
    {
      value: "support",
      label: "Technical Support",
      icon: <MessageCircle className="w-5 h-5" />
    },
    {
      value: "feedback",
      label: "Feedback & Suggestions",
      icon: <Users className="w-5 h-5" />
    }
  ]

  const features = [
    {
      icon: <CheckCircle className="w-8 h-8 text-green-600" />,
      title: "Quick Response",
      description: "We typically respond within 2-4 hours during business hours"
    },
    {
      icon: <Users className="w-8 h-8 text-blue-600" />,
      title: "Dedicated Team",
      description: "Our support team knows the platform inside and out"
    },
    {
      icon: <MessageCircle className="w-8 h-8 text-purple-600" />,
      title: "Multiple Channels",
      description: "Reach us via email, phone, chat, or this contact form"
    }
  ]

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <Link href="/" className="flex items-center space-x-2">
              <div className="w-10 h-10 bg-gradient-to-r from-orange-500 to-red-500 rounded-full flex items-center justify-center">
                <span className="text-white font-bold text-lg">SG</span>
              </div>
              <span className="font-bold text-xl text-gray-900">SG Home Eats</span>
            </Link>
            <Button asChild variant="outline">
              <Link href="/">‚Üê Back to Home</Link>
            </Button>
          </div>
        </div>
      </header>

      {/* Hero Section */}
      <section className="bg-gradient-to-br from-orange-50 to-red-50 py-16">
        <div className="container mx-auto px-4 text-center">
          <h1 className="text-4xl md:text-5xl font-bold text-gray-900 mb-6">
            Get in
            <br />
            <span className="text-orange-600">Touch</span>
          </h1>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto mb-8">
            Have questions, suggestions, or need support? We'd love to hear from you. 
            Our team is here to help you make the most of SG Home Eats.
          </p>
        </div>
      </section>

      <div className="container mx-auto px-4 py-12">
        <div className="grid lg:grid-cols-3 gap-12">
          {/* Contact Form */}
          <div className="lg:col-span-2">
            <Card>
              <CardContent className="p-8">
                <h2 className="text-2xl font-bold text-gray-900 mb-6">Send us a Message</h2>
                <form className="space-y-6">
                  <div className="grid md:grid-cols-2 gap-6">
                    <div>
                      <Label htmlFor="firstName">First Name</Label>
                      <Input id="firstName" placeholder="Enter your first name" className="mt-2" />
                    </div>
                    <div>
                      <Label htmlFor="lastName">Last Name</Label>
                      <Input id="lastName" placeholder="Enter your last name" className="mt-2" />
                    </div>
                  </div>

                  <div className="grid md:grid-cols-2 gap-6">
                    <div>
                      <Label htmlFor="email">Email Address</Label>
                      <Input id="email" type="email" placeholder="your.email@example.com" className="mt-2" />
                    </div>
                    <div>
                      <Label htmlFor="phone">Phone Number (Optional)</Label>
                      <Input id="phone" placeholder="+65 1234 5678" className="mt-2" />
                    </div>
                  </div>

                  <div>
                    <Label htmlFor="inquiryType">Inquiry Type</Label>
                    <div className="grid md:grid-cols-2 gap-3 mt-2">
                      {inquiryTypes.map((type) => (
                        <label key={type.value} className="flex items-center space-x-3 p-3 border border-gray-200 rounded-lg hover:border-orange-300 cursor-pointer transition-colors">
                          <input 
                            type="radio" 
                            name="inquiryType" 
                            value={type.value}
                            className="text-orange-600 focus:ring-orange-500"
                          />
                          {type.icon}
                          <span className="font-medium">{type.label}</span>
                        </label>
                      ))}
                    </div>
                  </div>

                  <div>
                    <Label htmlFor="subject">Subject</Label>
                    <Input id="subject" placeholder="Brief description of your inquiry" className="mt-2" />
                  </div>

                  <div>
                    <Label htmlFor="message">Message</Label>
                    <Textarea 
                      id="message" 
                      placeholder="Please provide details about your inquiry. The more information you provide, the better we can assist you."
                      rows={6}
                      className="mt-2"
                    />
                  </div>

                  <div className="flex items-center space-x-2">
                    <input 
                      type="checkbox" 
                      id="newsletter"
                      className="text-orange-600 focus:ring-orange-500"
                    />
                    <Label htmlFor="newsletter" className="text-sm text-gray-600">
                      I'd like to receive updates about SG Home Eats features and community news
                    </Label>
                  </div>

                  <Button size="lg" className="w-full md:w-auto bg-orange-600 hover:bg-orange-700">
                    <Send className="w-4 h-4 mr-2" />
                    Send Message
                  </Button>
                </form>
              </CardContent>
            </Card>
          </div>

          {/* Contact Information */}
          <div className="lg:col-span-1">
            <div className="space-y-6">
              {/* Contact Details */}
              {contactInfo.map((info, index) => (
                <Card key={index}>
                  <CardContent className="p-6">
                    <div className="flex items-start space-x-4">
                      {info.icon}
                      <div>
                        <h3 className="font-semibold text-gray-900 mb-2">{info.title}</h3>
                        <div className="space-y-1">
                          {info.details.map((detail, detailIndex) => (
                            <p key={detailIndex} className="text-gray-600 text-sm">
                              {detail}
                            </p>
                          ))}
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}

              {/* Quick Actions */}
              <Card>
                <CardContent className="p-6">
                  <h3 className="font-semibold text-gray-900 mb-4">Quick Actions</h3>
                  <div className="space-y-3">
                    <Button variant="outline" className="w-full justify-start" asChild>
                      <Link href="/help">
                        <HelpCircle className="w-4 h-4 mr-2" />
                        Visit Help Center
                      </Link>
                    </Button>
                    <Button variant="outline" className="w-full justify-start" asChild>
                      <Link href="#">
                        <MessageCircle className="w-4 h-4 mr-2" />
                        Start Live Chat
                      </Link>
                    </Button>
                    <Button variant="outline" className="w-full justify-start" asChild>
                      <Link href="tel:+6561234567">
                        <Phone className="w-4 h-4 mr-2" />
                        Call Support
                      </Link>
                    </Button>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        </div>
      </div>

      {/* Features Section */}
      <section className="py-16 bg-white">
        <div className="container mx-auto px-4">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold text-gray-900 mb-4">Why Contact Us?</h2>
            <p className="text-lg text-gray-600 max-w-2xl mx-auto">
              We're committed to providing excellent support and building lasting relationships with our community.
            </p>
          </div>
          
          <div className="grid md:grid-cols-3 gap-8 max-w-4xl mx-auto">
            {features.map((feature, index) => (
              <Card key={index} className="text-center">
                <CardContent className="p-8">
                  <div className="flex justify-center mb-4">
                    {feature.icon}
                  </div>
                  <h3 className="text-xl font-bold text-gray-900 mb-4">
                    {feature.title}
                  </h3>
                  <p className="text-gray-600">
                    {feature.description}
                  </p>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>

      {/* Map Section (Placeholder) */}
      <section className="py-16">
        <div className="container mx-auto px-4">
          <div className="text-center mb-8">
            <h2 className="text-3xl font-bold text-gray-900 mb-4">Visit Our Office</h2>
            <p className="text-lg text-gray-600">
              Located in the heart of Singapore's food district
            </p>
          </div>
          
          <Card className="max-w-4xl mx-auto">
            <CardContent className="p-0">
              <div className="bg-gray-200 h-96 rounded-lg flex items-center justify-center">
                <div className="text-center">
                  <MapPin className="w-12 h-12 text-gray-500 mx-auto mb-4" />
                  <p className="text-gray-600">Interactive map would be displayed here</p>
                  <p className="text-sm text-gray-500 mt-2">123 Food Street, #12-34, Singapore 123456</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </section>

      {/* Office Hours & Emergency Contact */}
      <section className="py-16 bg-gray-100">
        <div className="container mx-auto px-4">
          <div className="grid md:grid-cols-2 gap-8 max-w-4xl mx-auto">
            <Card>
              <CardContent className="p-8">
                <Clock className="w-8 h-8 text-purple-600 mb-4" />
                <h3 className="text-xl font-bold text-gray-900 mb-4">Office Hours</h3>
                <div className="space-y-2 text-gray-600">
                  <div className="flex justify-between">
                    <span>Monday - Friday</span>
                    <span>9:00 AM - 6:00 PM</span>
                  </div>
                  <div className="flex justify-between">
                    <span>Saturday</span>
                    <span>10:00 AM - 4:00 PM</span>
                  </div>
                  <div className="flex justify-between">
                    <span>Sunday</span>
                    <span>Closed</span>
                  </div>
                </div>
                <p className="text-sm text-gray-500 mt-4">
                  All times are in Singapore Standard Time (SGT)
                </p>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="p-8">
                <Phone className="w-8 h-8 text-green-600 mb-4" />
                <h3 className="text-xl font-bold text-gray-900 mb-4">Emergency Support</h3>
                <p className="text-gray-600 mb-4">
                  For urgent platform issues or payment problems that affect your business operations:
                </p>
                <div className="space-y-2">
                  <div>
                    <strong className="text-gray-900">Emergency Hotline:</strong>
                    <br />
                    <a href="tel:+6561234567" className="text-orange-600 hover:underline">
                      +65 6123 4567
                    </a>
                  </div>
                  <div>
                    <strong className="text-gray-900">Emergency Email:</strong>
                    <br />
                    <a href="mailto:emergency@sghomeeats.com" className="text-orange-600 hover:underline">
                      emergency@sghomeeats.com
                    </a>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-16 bg-gradient-to-br from-orange-500 to-red-500 text-white">
        <div className="container mx-auto px-4 text-center">
          <h2 className="text-3xl font-bold mb-4">Ready to Get Started?</h2>
          <p className="text-xl mb-8 opacity-90">
            Don't wait to join Singapore's favorite home dining community.
          </p>
          <div className="flex flex-wrap justify-center gap-4">
            <Button asChild size="lg" variant="secondary">
              <Link href="/auth/get-started">Join SG Home Eats</Link>
            </Button>
            <Button asChild size="lg" variant="outline" className="bg-transparent border-white text-white hover:bg-white hover:text-orange-600">
              <Link href="/browse">Browse Home Cafes</Link>
            </Button>
          </div>
        </div>
      </section>
    </div>
  )
}


--- FILE: app/dashboard/page.tsx ---
"use client"

import { useEffect } from "react"
import { useRouter } from "next/navigation"
import { useAuth } from "@/lib/auth-context"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { 
  Coffee, 
  Users, 
  Star, 
  TrendingUp, 
  Plus, 
  Settings, 
  Mail,
  BarChart3,
  Clock,
  CheckCircle,
  ExternalLink
} from "lucide-react"
import Link from "next/link"

export default function DashboardPage() {
  const { user, userProfile, loading } = useAuth()
  const router = useRouter()

  useEffect(() => {
    if (!loading && !user) {
      router.push("/auth/signin")
    }
  }, [user, loading, router])

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-orange-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading your dashboard...</p>
        </div>
      </div>
    )
  }

  if (!user || !userProfile) {
    return null
  }

  const isBusinessOwner = userProfile.user_type === "business_owner"
  const isEmailVerified = user.email_confirmed_at !== null

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <Link href="/" className="flex items-center space-x-2">
              <div className="w-8 h-8 bg-gradient-to-r from-orange-500 to-red-500 rounded-full flex items-center justify-center">
                <span className="text-white font-bold text-sm">SG</span>
              </div>
              <span className="font-bold text-lg text-gray-900">SG Home Eats</span>
            </Link>

            <div className="flex items-center space-x-4">
              <div className="text-right">
                <p className="font-medium text-gray-900">
                  {userProfile.first_name} {userProfile.last_name}
                </p>
                <Badge variant={isBusinessOwner ? "default" : "secondary"} className="text-xs">
                  {isBusinessOwner ? "Business Owner" : "Customer"}
                </Badge>
              </div>
              <Button variant="outline" size="sm" asChild>
                <Link href="/profile">
                  <Settings className="w-4 h-4 mr-2" />
                  Profile
                </Link>
              </Button>
            </div>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-8">
        {/* Email Verification Banner */}
        {!isEmailVerified && (
          <Alert className="mb-6 border-orange-200 bg-orange-50">
            <Mail className="h-4 w-4 text-orange-600" />
            <AlertDescription className="text-orange-800">
              <div className="flex items-center justify-between">
                <span>
                  Please verify your email address to access all features. Check your inbox for the verification link.
                </span>
                <Button variant="outline" size="sm" className="ml-4">
                  Resend Email
                </Button>
              </div>
            </AlertDescription>
          </Alert>
        )}

        {/* Welcome Section */}
        <div className="mb-8">
          <h1 className="text-2xl md:text-3xl font-bold text-gray-900 mb-2">
            Welcome back, {userProfile.first_name}! üëã
          </h1>
          <p className="text-gray-600">
            {isBusinessOwner 
              ? "Manage your food business and connect with customers"
              : "Discover amazing home-based cafes and place orders"
            }
          </p>
        </div>

        {/* Dashboard Content */}
        {isBusinessOwner ? (
          <BusinessOwnerDashboard userProfile={userProfile} isEmailVerified={isEmailVerified} />
        ) : (
          <CustomerDashboard userProfile={userProfile} />
        )}
      </div>
    </div>
  )
}

function BusinessOwnerDashboard({ userProfile, isEmailVerified }: { 
  userProfile: any, 
  isEmailVerified: boolean 
}) {
  return (
    <div className="space-y-6">
      {/* Quick Actions */}
      <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-4">
        <Card className="border-orange-200 bg-orange-50">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-orange-800">List Your Cafe</p>
                <p className="text-xs text-orange-600">Get started now</p>
              </div>
              <Coffee className="w-8 h-8 text-orange-600" />
            </div>
            <Button 
              className="w-full mt-3 bg-orange-600 hover:bg-orange-700" 
              size="sm"
              disabled={!isEmailVerified}
              asChild
            >
              <Link href="/register-business">
                <Plus className="w-4 h-4 mr-2" />
                Create Business
              </Link>
            </Button>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-900">Analytics</p>
                <p className="text-xs text-gray-600">View insights</p>
              </div>
              <BarChart3 className="w-8 h-8 text-blue-600" />
            </div>
            <Button variant="outline" className="w-full mt-3" size="sm" disabled>
              <TrendingUp className="w-4 h-4 mr-2" />
              Coming Soon
            </Button>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-900">Orders</p>
                <p className="text-xs text-gray-600">Manage orders</p>
              </div>
              <Clock className="w-8 h-8 text-green-600" />
            </div>
            <Button variant="outline" className="w-full mt-3" size="sm" disabled>
              <CheckCircle className="w-4 h-4 mr-2" />
              Coming Soon
            </Button>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-900">Profile</p>
                <p className="text-xs text-gray-600">Edit details</p>
              </div>
              <Settings className="w-8 h-8 text-gray-600" />
            </div>
            <Button variant="outline" className="w-full mt-3" size="sm" asChild>
              <Link href="/profile">
                <Settings className="w-4 h-4 mr-2" />
                Edit Profile
              </Link>
            </Button>
          </CardContent>
        </Card>
      </div>

      {/* Business Setup Guide */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center">
            <Coffee className="w-5 h-5 mr-2 text-orange-600" />
            Get Started with Your Business
          </CardTitle>
          <CardDescription>
            Follow these steps to set up your home-based cafe on SG Home Eats
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="flex items-center space-x-3">
              {isEmailVerified ? (
                <CheckCircle className="w-5 h-5 text-green-600" />
              ) : (
                <div className="w-5 h-5 rounded-full border-2 border-gray-300" />
              )}
              <span className={isEmailVerified ? "line-through text-gray-500" : "text-gray-900"}>
                Verify your email address
              </span>
            </div>
            
            <div className="flex items-center space-x-3">
              <div className="w-5 h-5 rounded-full border-2 border-gray-300" />
              <span className="text-gray-900">Create your business profile</span>
            </div>
            
            <div className="flex items-center space-x-3">
              <div className="w-5 h-5 rounded-full border-2 border-gray-300" />
              <span className="text-gray-900">Add your menu items</span>
            </div>
            
            <div className="flex items-center space-x-3">
              <div className="w-5 h-5 rounded-full border-2 border-gray-300" />
              <span className="text-gray-900">Go live and start receiving orders</span>
            </div>
          </div>

          {isEmailVerified && (
            <div className="mt-6 pt-4 border-t">
              <Button className="bg-orange-600 hover:bg-orange-700" asChild>
                <Link href="/register-business">
                  <Plus className="w-4 h-4 mr-2" />
                  Start Creating Your Business Profile
                </Link>
              </Button>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Intended Business Name */}
      {userProfile.intended_business_name && (
        <Card>
          <CardHeader>
            <CardTitle className="text-lg">Your Business Idea</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-gray-600">
              You mentioned wanting to create: <strong>{userProfile.intended_business_name}</strong>
            </p>
            <p className="text-sm text-gray-500 mt-2">
              You can use this name or choose a different one when creating your business profile.
            </p>
          </CardContent>
        </Card>
      )}
    </div>
  )
}

function CustomerDashboard({ userProfile }: { userProfile: any }) {
  return (
    <div className="space-y-6">
      {/* Quick Actions */}
      <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-4">
        <Card className="border-blue-200 bg-blue-50">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-blue-800">Browse Cafes</p>
                <p className="text-xs text-blue-600">Discover new flavors</p>
              </div>
              <Coffee className="w-8 h-8 text-blue-600" />
            </div>
            <Button className="w-full mt-3 bg-blue-600 hover:bg-blue-700" size="sm" asChild>
              <Link href="/">
                <ExternalLink className="w-4 h-4 mr-2" />
                Explore Cafes
              </Link>
            </Button>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-900">My Orders</p>
                <p className="text-xs text-gray-600">Order history</p>
              </div>
              <Clock className="w-8 h-8 text-green-600" />
            </div>
            <Button variant="outline" className="w-full mt-3" size="sm" disabled>
              <Clock className="w-4 h-4 mr-2" />
              Coming Soon
            </Button>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-900">Favorites</p>
                <p className="text-xs text-gray-600">Saved cafes</p>
              </div>
              <Star className="w-8 h-8 text-yellow-600" />
            </div>
            <Button variant="outline" className="w-full mt-3" size="sm" disabled>
              <Star className="w-4 h-4 mr-2" />
              Coming Soon
            </Button>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-900">Profile</p>
                <p className="text-xs text-gray-600">Edit details</p>
              </div>
              <Settings className="w-8 h-8 text-gray-600" />
            </div>
            <Button variant="outline" className="w-full mt-3" size="sm" asChild>
              <Link href="/profile">
                <Settings className="w-4 h-4 mr-2" />
                Edit Profile
              </Link>
            </Button>
          </CardContent>
        </Card>
      </div>

      {/* Featured Cafes */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center">
            <Star className="w-5 h-5 mr-2 text-yellow-600" />
            Recommended for You
          </CardTitle>
          <CardDescription>
            Discover popular home-based cafes in your area
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="text-center py-8">
            <Coffee className="w-12 h-12 text-gray-400 mx-auto mb-4" />
            <p className="text-gray-600 mb-4">Start exploring amazing home-based cafes</p>
            <Button asChild>
              <Link href="/">
                <ExternalLink className="w-4 h-4 mr-2" />
                Browse All Cafes
              </Link>
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}


--- FILE: app/globals.css ---
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    border-color: hsl(var(--border));
  }
  body {
    background-color: hsl(var(--background));
    color: hsl(var(--foreground));
    font-family: var(--font-sans), ui-sans-serif, system-ui, sans-serif;
  }
}


--- FILE: app/help/page.tsx ---
"use client"

import Link from "next/link"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { 
  Search, 
  Book,
  MessageCircle,
  Phone,
  Mail,
  Users,
  ShoppingCart,
  CreditCard,
  Settings,
  HelpCircle,
  ChevronRight,
  Star,
  Shield,
  Clock
} from "lucide-react"

export default function HelpPage() {
  const categories = [
    {
      icon: <Users className="w-6 h-6 text-blue-600" />,
      title: "Getting Started",
      description: "Learn the basics of using SG Home Eats",
      articles: 12,
      popular: true
    },
    {
      icon: <ShoppingCart className="w-6 h-6 text-green-600" />,
      title: "Ordering & Delivery",
      description: "How to place orders and track deliveries",
      articles: 8,
      popular: true
    },
    {
      icon: <CreditCard className="w-6 h-6 text-purple-600" />,
      title: "Payments & Billing",
      description: "Payment methods, refunds, and billing",
      articles: 6,
      popular: false
    },
    {
      icon: <Settings className="w-6 h-6 text-orange-600" />,
      title: "Business Management",
      description: "For home cafe owners and operators",
      articles: 15,
      popular: true
    },
    {
      icon: <Shield className="w-6 h-6 text-red-600" />,
      title: "Safety & Quality",
      description: "Food safety standards and quality assurance",
      articles: 7,
      popular: false
    },
    {
      icon: <HelpCircle className="w-6 h-6 text-gray-600" />,
      title: "Troubleshooting",
      description: "Common issues and solutions",
      articles: 9,
      popular: false
    }
  ]

  const popularArticles = [
    {
      title: "How to place your first order",
      category: "Getting Started",
      views: 2456,
      rating: 4.8
    },
    {
      title: "Setting up your home cafe profile",
      category: "Business Management",
      views: 1834,
      rating: 4.9
    },
    {
      title: "Payment methods and security",
      category: "Payments & Billing",
      views: 1623,
      rating: 4.7
    },
    {
      title: "Food safety requirements for home cafes",
      category: "Safety & Quality",
      views: 1345,
      rating: 4.6
    },
    {
      title: "Managing orders and customer communication",
      category: "Business Management",
      views: 1289,
      rating: 4.8
    }
  ]

  const quickHelp = [
    {
      question: "How do I track my order?",
      answer: "Once your order is placed, you'll receive a confirmation email with a tracking link. You can also check your order status in your dashboard."
    },
    {
      question: "What if my order is late?",
      answer: "If your order is delayed beyond the estimated time, you'll be notified automatically. You can also contact the home cafe directly through our messaging system."
    },
    {
      question: "How do I cancel an order?",
      answer: "Orders can be cancelled within 30 minutes of placing them, provided the home cafe hasn't started preparation. Go to your orders page and click cancel."
    },
    {
      question: "What payment methods do you accept?",
      answer: "We accept major credit cards, PayNow, and bank transfers. All payments are processed securely through our payment partners."
    }
  ]

  const contactOptions = [
    {
      icon: <MessageCircle className="w-8 h-8 text-blue-600" />,
      title: "Live Chat",
      description: "Chat with our support team",
      availability: "Mon-Fri, 9am-6pm",
      action: "Start Chat",
      primary: true
    },
    {
      icon: <Mail className="w-8 h-8 text-green-600" />,
      title: "Email Support",
      description: "Send us a detailed message",
      availability: "Response within 24 hours",
      action: "Send Email",
      primary: false
    },
    {
      icon: <Phone className="w-8 h-8 text-orange-600" />,
      title: "Phone Support",
      description: "Speak directly with our team",
      availability: "+65 6123 4567",
      action: "Call Now",
      primary: false
    }
  ]

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <Link href="/" className="flex items-center space-x-2">
              <div className="w-10 h-10 bg-gradient-to-r from-orange-500 to-red-500 rounded-full flex items-center justify-center">
                <span className="text-white font-bold text-lg">SG</span>
              </div>
              <span className="font-bold text-xl text-gray-900">SG Home Eats</span>
            </Link>
            <Button asChild variant="outline">
              <Link href="/">‚Üê Back to Home</Link>
            </Button>
          </div>
        </div>
      </header>

      {/* Hero Section */}
      <section className="bg-gradient-to-br from-orange-50 to-red-50 py-16">
        <div className="container mx-auto px-4 text-center">
          <h1 className="text-4xl md:text-5xl font-bold text-gray-900 mb-6">
            How Can We
            <br />
            <span className="text-orange-600">Help You?</span>
          </h1>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto mb-8">
            Find answers to your questions, learn how to use SG Home Eats effectively, 
            or get in touch with our support team.
          </p>
          
          {/* Search Bar */}
          <div className="max-w-2xl mx-auto">
            <div className="relative">
              <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
              <Input
                placeholder="Search for help articles, guides, or FAQs..."
                className="pl-12 h-14 text-lg border-2 border-orange-200 focus:border-orange-500"
              />
              <Button className="absolute right-2 top-2 bg-orange-600 hover:bg-orange-700">
                Search
              </Button>
            </div>
          </div>
        </div>
      </section>

      <div className="container mx-auto px-4 py-12">
        <div className="grid lg:grid-cols-3 gap-8">
          {/* Main Content */}
          <div className="lg:col-span-2">
            {/* Categories */}
            <div className="mb-12">
              <h2 className="text-2xl font-bold text-gray-900 mb-8">Browse by Category</h2>
              <div className="grid md:grid-cols-2 gap-6">
                {categories.map((category, index) => (
                  <Card key={index} className="hover:shadow-md transition-shadow cursor-pointer group">
                    <CardContent className="p-6">
                      <div className="flex items-start justify-between mb-4">
                        <div className="flex items-center space-x-3">
                          {category.icon}
                          <div>
                            <h3 className="font-semibold text-gray-900 group-hover:text-orange-600 transition-colors">
                              {category.title}
                            </h3>
                            {category.popular && (
                              <Badge variant="secondary" className="text-xs mt-1">Popular</Badge>
                            )}
                          </div>
                        </div>
                        <ChevronRight className="w-5 h-5 text-gray-400 group-hover:text-orange-600 transition-colors" />
                      </div>
                      <p className="text-gray-600 text-sm mb-3">{category.description}</p>
                      <div className="text-sm text-gray-500">
                        {category.articles} articles
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>

            {/* Popular Articles */}
            <div className="mb-12">
              <h2 className="text-2xl font-bold text-gray-900 mb-8">Popular Articles</h2>
              <div className="space-y-4">
                {popularArticles.map((article, index) => (
                  <Card key={index} className="hover:shadow-md transition-shadow cursor-pointer">
                    <CardContent className="p-6">
                      <div className="flex items-center justify-between">
                        <div className="flex-1">
                          <h3 className="font-semibold text-gray-900 hover:text-orange-600 transition-colors mb-2">
                            {article.title}
                          </h3>
                          <div className="flex items-center space-x-4 text-sm text-gray-500">
                            <Badge variant="outline" className="text-xs">
                              {article.category}
                            </Badge>
                            <span>{article.views} views</span>
                            <div className="flex items-center">
                              <Star className="w-3 h-3 fill-yellow-400 text-yellow-400 mr-1" />
                              <span>{article.rating}</span>
                            </div>
                          </div>
                        </div>
                        <ChevronRight className="w-5 h-5 text-gray-400" />
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>

            {/* Quick Help */}
            <div>
              <h2 className="text-2xl font-bold text-gray-900 mb-8">Quick Help</h2>
              <div className="space-y-4">
                {quickHelp.map((item, index) => (
                  <Card key={index}>
                    <CardContent className="p-6">
                      <h3 className="font-semibold text-gray-900 mb-3">
                        {item.question}
                      </h3>
                      <p className="text-gray-600">
                        {item.answer}
                      </p>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>
          </div>

          {/* Sidebar */}
          <div className="lg:col-span-1">
            {/* Contact Support */}
            <Card className="mb-6">
              <CardContent className="p-6">
                <h3 className="font-bold text-gray-900 mb-6">Contact Support</h3>
                <div className="space-y-4">
                  {contactOptions.map((option, index) => (
                    <div key={index} className={`p-4 rounded-lg border-2 ${option.primary ? 'border-orange-200 bg-orange-50' : 'border-gray-200'}`}>
                      <div className="flex items-start space-x-3">
                        {option.icon}
                        <div className="flex-1">
                          <h4 className="font-semibold text-gray-900 mb-1">{option.title}</h4>
                          <p className="text-sm text-gray-600 mb-2">{option.description}</p>
                          <p className="text-xs text-gray-500 mb-3">{option.availability}</p>
                          <Button 
                            size="sm" 
                            className={option.primary ? 'bg-orange-600 hover:bg-orange-700' : ''}
                            variant={option.primary ? 'default' : 'outline'}
                            asChild
                          >
                            <Link href="/contact">{option.action}</Link>
                          </Button>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            {/* Quick Stats */}
            <Card className="mb-6">
              <CardContent className="p-6">
                <h3 className="font-bold text-gray-900 mb-4">Help Center Stats</h3>
                <div className="space-y-3">
                  <div className="flex justify-between items-center">
                    <span className="text-gray-600">Articles</span>
                    <span className="font-semibold">150+</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-gray-600">Average Response</span>
                    <span className="font-semibold">2 hours</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-gray-600">Satisfaction Rate</span>
                    <span className="font-semibold">98%</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-gray-600">Active Support Hours</span>
                    <span className="font-semibold">Mon-Fri 9am-6pm</span>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Community */}
            <Card>
              <CardContent className="p-6">
                <h3 className="font-bold text-gray-900 mb-4">Join Our Community</h3>
                <p className="text-gray-600 text-sm mb-4">
                  Connect with other home chefs and food lovers in our community forums.
                </p>
                <div className="space-y-2">
                  <Button variant="outline" className="w-full justify-start" asChild>
                    <Link href="#">
                      <MessageCircle className="w-4 h-4 mr-2" />
                      Community Forum
                    </Link>
                  </Button>
                  <Button variant="outline" className="w-full justify-start" asChild>
                    <Link href="#">
                      <Book className="w-4 h-4 mr-2" />
                      Recipe Exchange
                    </Link>
                  </Button>
                  <Button variant="outline" className="w-full justify-start" asChild>
                    <Link href="#">
                      <Users className="w-4 h-4 mr-2" />
                      Chef Network
                    </Link>
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>

      {/* Additional Resources */}
      <section className="py-16 bg-white">
        <div className="container mx-auto px-4">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold text-gray-900 mb-4">Additional Resources</h2>
            <p className="text-lg text-gray-600 max-w-2xl mx-auto">
              Explore more ways to get help and make the most of SG Home Eats.
            </p>
          </div>
          
          <div className="grid md:grid-cols-3 gap-8">
            <Card className="text-center">
              <CardContent className="p-8">
                <Book className="w-12 h-12 text-blue-600 mx-auto mb-4" />
                <h3 className="text-xl font-bold text-gray-900 mb-4">Video Tutorials</h3>
                <p className="text-gray-600 mb-6">
                  Step-by-step video guides for common tasks and features.
                </p>
                <Button variant="outline" asChild>
                  <Link href="#">Watch Videos</Link>
                </Button>
              </CardContent>
            </Card>

            <Card className="text-center">
              <CardContent className="p-8">
                <Clock className="w-12 h-12 text-green-600 mx-auto mb-4" />
                <h3 className="text-xl font-bold text-gray-900 mb-4">Webinars</h3>
                <p className="text-gray-600 mb-6">
                  Join live sessions with our experts and successful home chefs.
                </p>
                <Button variant="outline" asChild>
                  <Link href="#">View Schedule</Link>
                </Button>
              </CardContent>
            </Card>

            <Card className="text-center">
              <CardContent className="p-8">
                <Users className="w-12 h-12 text-purple-600 mx-auto mb-4" />
                <h3 className="text-xl font-bold text-gray-900 mb-4">One-on-One Help</h3>
                <p className="text-gray-600 mb-6">
                  Schedule personalized support sessions with our team.
                </p>
                <Button variant="outline" asChild>
                  <Link href="/contact">Book Session</Link>
                </Button>
              </CardContent>
            </Card>
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-16 bg-gradient-to-br from-orange-500 to-red-500 text-white">
        <div className="container mx-auto px-4 text-center">
          <h2 className="text-3xl font-bold mb-4">Still Need Help?</h2>
          <p className="text-xl mb-8 opacity-90">
            Our friendly support team is here to help you succeed with SG Home Eats.
          </p>
          <div className="flex flex-wrap justify-center gap-4">
            <Button asChild size="lg" variant="secondary">
              <Link href="/contact">Contact Support</Link>
            </Button>
            <Button asChild size="lg" variant="outline" className="bg-transparent border-white text-white hover:bg-white hover:text-orange-600">
              <Link href="#">Join Community</Link>
            </Button>
          </div>
        </div>
      </section>
    </div>
  )
}


--- FILE: app/how-it-works/page.tsx ---
"use client"

import Link from "next/link"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { 
  Search, 
  MapPin, 
  Star, 
  ShoppingCart, 
  Clock, 
  CheckCircle,
  Users,
  Coffee,
  Heart,
  Shield
} from "lucide-react"

export default function HowItWorksPage() {
  const customerSteps = [
    {
      step: 1,
      icon: <Search className="w-8 h-8 text-orange-600" />,
      title: "Discover",
      description: "Browse through hundreds of home cafes in your neighborhood. Filter by cuisine, location, ratings, and dietary preferences."
    },
    {
      step: 2,
      icon: <ShoppingCart className="w-8 h-8 text-orange-600" />,
      title: "Order",
      description: "Choose your favorite dishes and place your order directly through our platform. Pay securely online or upon delivery."
    },
    {
      step: 3,
      icon: <Clock className="w-8 h-8 text-orange-600" />,
      title: "Enjoy",
      description: "Relax while your food is freshly prepared. Track your order and get notified when it's ready for pickup or delivery."
    }
  ]

  const businessSteps = [
    {
      step: 1,
      icon: <Users className="w-8 h-8 text-green-600" />,
      title: "Sign Up",
      description: "Create your business profile and tell us about your specialties, story, and what makes your home cafe unique."
    },
    {
      step: 2,
      icon: <Coffee className="w-8 h-8 text-green-600" />,
      title: "Set Up Menu",
      description: "Upload photos and descriptions of your dishes. Set prices, availability, and delivery options that work for you."
    },
    {
      step: 3,
      icon: <Heart className="w-8 h-8 text-green-600" />,
      title: "Start Cooking",
      description: "Receive orders, prepare delicious food, and build a community of loyal customers who love your cooking."
    }
  ]

  const features = [
    {
      icon: <Shield className="w-6 h-6 text-blue-600" />,
      title: "Safety First",
      description: "All home cafes are verified and follow strict hygiene standards."
    },
    {
      icon: <Star className="w-6 h-6 text-yellow-600" />,
      title: "Quality Assured",
      description: "Customer reviews and ratings help maintain high quality standards."
    },
    {
      icon: <MapPin className="w-6 h-6 text-red-600" />,
      title: "Local Focus",
      description: "Supporting neighborhood businesses and reducing delivery distances."
    },
    {
      icon: <CheckCircle className="w-6 h-6 text-green-600" />,
      title: "Easy Process",
      description: "Simple ordering and streamlined business management tools."
    }
  ]

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <Link href="/" className="flex items-center space-x-2">
              <div className="w-10 h-10 bg-gradient-to-r from-orange-500 to-red-500 rounded-full flex items-center justify-center">
                <span className="text-white font-bold text-lg">SG</span>
              </div>
              <span className="font-bold text-xl text-gray-900">SG Home Eats</span>
            </Link>
            <Button asChild variant="outline">
              <Link href="/">‚Üê Back to Home</Link>
            </Button>
          </div>
        </div>
      </header>

      {/* Hero Section */}
      <section className="bg-gradient-to-br from-orange-50 to-red-50 py-16">
        <div className="container mx-auto px-4 text-center">
          <h1 className="text-4xl md:text-5xl font-bold text-gray-900 mb-6">
            How SG Home Eats 
            <br />
            <span className="text-orange-600">Works</span>
          </h1>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto mb-8">
            Connecting food lovers with passionate home chefs across Singapore is simple. 
            Whether you're looking to enjoy amazing home-cooked meals or share your culinary 
            talents with the community, we make it easy.
          </p>
        </div>
      </section>

      {/* For Customers Section */}
      <section className="py-16 bg-white">
        <div className="container mx-auto px-4">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold text-gray-900 mb-4">For Food Lovers</h2>
            <p className="text-lg text-gray-600 max-w-2xl mx-auto">
              Discover and enjoy authentic home-cooked meals from passionate chefs in your neighborhood.
            </p>
          </div>
          
          <div className="grid md:grid-cols-3 gap-8 max-w-4xl mx-auto">
            {customerSteps.map((step, index) => (
              <Card key={index} className="text-center relative">
                <CardContent className="p-8">
                  <div className="absolute -top-4 left-1/2 transform -translate-x-1/2">
                    <Badge className="bg-orange-600 text-white px-4 py-2 text-lg font-bold">
                      {step.step}
                    </Badge>
                  </div>
                  <div className="flex justify-center mb-6 mt-4">
                    {step.icon}
                  </div>
                  <h3 className="text-xl font-bold text-gray-900 mb-4">
                    {step.title}
                  </h3>
                  <p className="text-gray-600">
                    {step.description}
                  </p>
                </CardContent>
              </Card>
            ))}
          </div>

          <div className="text-center mt-12">
            <Button asChild size="lg">
              <Link href="/browse">Start Browsing Cafes</Link>
            </Button>
          </div>
        </div>
      </section>

      {/* For Business Owners Section */}
      <section className="py-16">
        <div className="container mx-auto px-4">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold text-gray-900 mb-4">For Home Chefs</h2>
            <p className="text-lg text-gray-600 max-w-2xl mx-auto">
              Turn your passion for cooking into a thriving home-based business and connect with food lovers in your community.
            </p>
          </div>
          
          <div className="grid md:grid-cols-3 gap-8 max-w-4xl mx-auto">
            {businessSteps.map((step, index) => (
              <Card key={index} className="text-center relative">
                <CardContent className="p-8">
                  <div className="absolute -top-4 left-1/2 transform -translate-x-1/2">
                    <Badge className="bg-green-600 text-white px-4 py-2 text-lg font-bold">
                      {step.step}
                    </Badge>
                  </div>
                  <div className="flex justify-center mb-6 mt-4">
                    {step.icon}
                  </div>
                  <h3 className="text-xl font-bold text-gray-900 mb-4">
                    {step.title}
                  </h3>
                  <p className="text-gray-600">
                    {step.description}
                  </p>
                </CardContent>
              </Card>
            ))}
          </div>

          <div className="text-center mt-12">
            <Button asChild size="lg" className="bg-green-600 hover:bg-green-700">
              <Link href="/auth/get-started">Start Your Home Cafe</Link>
            </Button>
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section className="py-16 bg-white">
        <div className="container mx-auto px-4">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold text-gray-900 mb-4">Why Choose SG Home Eats?</h2>
            <p className="text-lg text-gray-600 max-w-2xl mx-auto">
              We've built a platform that prioritizes safety, quality, and community connection.
            </p>
          </div>
          
          <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6">
            {features.map((feature, index) => (
              <Card key={index} className="text-center h-full">
                <CardContent className="p-6">
                  <div className="flex justify-center mb-4">
                    {feature.icon}
                  </div>
                  <h3 className="text-lg font-bold text-gray-900 mb-2">
                    {feature.title}
                  </h3>
                  <p className="text-gray-600 text-sm">
                    {feature.description}
                  </p>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>

      {/* FAQ Section */}
      <section className="py-16">
        <div className="container mx-auto px-4">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold text-gray-900 mb-4">Frequently Asked Questions</h2>
          </div>
          
          <div className="max-w-3xl mx-auto space-y-6">
            <Card>
              <CardContent className="p-6">
                <h3 className="text-lg font-bold text-gray-900 mb-2">
                  How do you ensure food safety?
                </h3>
                <p className="text-gray-600">
                  All our home cafes undergo verification and must comply with Singapore's food safety standards. 
                  We provide guidance on hygiene practices and conduct regular check-ins with our partners.
                </p>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="p-6">
                <h3 className="text-lg font-bold text-gray-900 mb-2">
                  What are the delivery options?
                </h3>
                <p className="text-gray-600">
                  Most home cafes offer both pickup and delivery options. Delivery areas vary by location, 
                  and some chefs may offer scheduled pickup times to ensure freshness.
                </p>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="p-6">
                <h3 className="text-lg font-bold text-gray-900 mb-2">
                  How much does it cost to list my home cafe?
                </h3>
                <p className="text-gray-600">
                  It's free to create your profile and start listing your dishes. We only charge a small 
                  commission on successful orders, which helps us maintain the platform and support our community.
                </p>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="p-6">
                <h3 className="text-lg font-bold text-gray-900 mb-2">
                  Can I customize my orders?
                </h3>
                <p className="text-gray-600">
                  Many home chefs offer customization options for dietary restrictions or preferences. 
                  You can communicate directly with chefs through our messaging system to discuss special requests.
                </p>
              </CardContent>
            </Card>
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-16 bg-gradient-to-br from-orange-500 to-red-500 text-white">
        <div className="container mx-auto px-4 text-center">
          <h2 className="text-3xl font-bold mb-4">Ready to Get Started?</h2>
          <p className="text-xl mb-8 opacity-90">
            Join our growing community of food lovers and home chefs today.
          </p>
          <div className="flex flex-wrap justify-center gap-4">
            <Button asChild size="lg" variant="secondary">
              <Link href="/browse">Browse Home Cafes</Link>
            </Button>
            <Button asChild size="lg" variant="outline" className="bg-transparent border-white text-white hover:bg-white hover:text-orange-600">
              <Link href="/auth/get-started">Start Your Home Cafe</Link>
            </Button>
          </div>
        </div>
      </section>
    </div>
  )
}


--- FILE: app/layout.tsx ---
import type { Metadata } from 'next'
import { GeistSans } from 'geist/font/sans'
import { GeistMono } from 'geist/font/mono'
import { AuthProvider } from '@/lib/auth-context'
import { Toaster } from '@/components/ui/toaster'
import './globals.css'

export const metadata: Metadata = {
  title: 'v0 App',
  description: 'Created with v0',
  generator: 'v0.dev',
}

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  return (
    <html lang="en" className={`${GeistSans.variable} ${GeistMono.variable}`}>
      <body className={GeistSans.className}>
        <AuthProvider>
          {children}
          <Toaster />
        </AuthProvider>
      </body>
    </html>
  )
}


--- FILE: app/loading.tsx ---
export default function Loading() {
  return null
}


--- FILE: app/orders/page.tsx ---
"use client"

import { useEffect } from "react"
import { useRouter } from "next/navigation"
import { useAuth } from "@/lib/auth-context"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { 
  ShoppingBag,
  Clock,
  CheckCircle,
  XCircle,
  ArrowLeft
} from "lucide-react"
import Link from "next/link"

export default function OrdersPage() {
  const { user, userProfile, loading } = useAuth()
  const router = useRouter()

  useEffect(() => {
    if (!loading && !user) {
      router.push("/auth/signin")
    }
  }, [user, loading, router])

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-orange-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading your orders...</p>
        </div>
      </div>
    )
  }

  if (!user || !userProfile) {
    return null
  }

  // Mock orders data - in real app, this would be fetched from API
  const orders = [
    {
      id: "ORD-001",
      cafeName: "Ah Ma's Kitchen",
      orderDate: "2025-01-02",
      status: "completed",
      total: 28.50,
      items: ["Kueh Lapis x2", "Ondeh Ondeh x3", "Laksa Lemak x1"]
    },
    {
      id: "ORD-002", 
      cafeName: "Brew & Bite",
      orderDate: "2025-01-01",
      status: "preparing",
      total: 45.00,
      items: ["Artisan Coffee x2", "Avocado Toast x1", "Breakfast Bowl x1"]
    },
    {
      id: "ORD-003",
      cafeName: "Spice Route Home", 
      orderDate: "2024-12-30",
      status: "cancelled",
      total: 22.00,
      items: ["Butter Chicken x1", "Garlic Naan x2"]
    }
  ]

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'completed':
        return <Badge className="bg-green-100 text-green-800 hover:bg-green-100"><CheckCircle className="w-3 h-3 mr-1" />Completed</Badge>
      case 'preparing':
        return <Badge className="bg-blue-100 text-blue-800 hover:bg-blue-100"><Clock className="w-3 h-3 mr-1" />Preparing</Badge>
      case 'cancelled':
        return <Badge className="bg-red-100 text-red-800 hover:bg-red-100"><XCircle className="w-3 h-3 mr-1" />Cancelled</Badge>
      default:
        return <Badge variant="outline">{status}</Badge>
    }
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <Link href="/dashboard" className="flex items-center text-gray-600 hover:text-gray-900">
              <ArrowLeft className="w-4 h-4 mr-2" />
              Back to Dashboard
            </Link>
            <h1 className="text-xl font-semibold text-gray-900">My Orders</h1>
            <div></div>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-8 max-w-4xl">
        <div className="mb-8">
          <h1 className="text-2xl md:text-3xl font-bold text-gray-900 mb-2">
            Order History
          </h1>
          <p className="text-gray-600">
            Track your orders and reorder your favorites
          </p>
        </div>

        {orders.length > 0 ? (
          <div className="space-y-6">
            {orders.map((order) => (
              <Card key={order.id} className="hover:shadow-md transition-shadow">
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <div>
                      <CardTitle className="text-lg">{order.cafeName}</CardTitle>
                      <p className="text-sm text-gray-600">Order #{order.id} ‚Ä¢ {order.orderDate}</p>
                    </div>
                    <div className="text-right">
                      {getStatusBadge(order.status)}
                      <p className="text-lg font-semibold text-gray-900 mt-1">${order.total.toFixed(2)}</p>
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    <div>
                      <h4 className="font-medium text-gray-900 mb-2">Items Ordered:</h4>
                      <div className="space-y-1">
                        {order.items.map((item, index) => (
                          <p key={index} className="text-sm text-gray-600">‚Ä¢ {item}</p>
                        ))}
                      </div>
                    </div>
                    
                    <div className="flex gap-3 pt-3 border-t">
                      <Button variant="outline" size="sm">
                        View Details
                      </Button>
                      {order.status === 'completed' && (
                        <Button size="sm" className="bg-orange-600 hover:bg-orange-700">
                          Reorder
                        </Button>
                      )}
                      {order.status === 'completed' && (
                        <Button variant="outline" size="sm">
                          Write Review
                        </Button>
                      )}
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        ) : (
          <div className="text-center py-12">
            <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <ShoppingBag className="w-8 h-8 text-gray-400" />
            </div>
            <h3 className="text-lg font-medium text-gray-900 mb-2">No orders yet</h3>
            <p className="text-gray-600 mb-6">
              Start exploring amazing home cafes and place your first order!
            </p>
            <Button asChild className="bg-orange-600 hover:bg-orange-700">
              <Link href="/browse">
                <ShoppingBag className="w-4 h-4 mr-2" />
                Browse Cafes
              </Link>
            </Button>
          </div>
        )}
      </div>
    </div>
  )
}


--- FILE: app/orders/success/page.tsx ---
'use client'

import { useEffect, useState } from 'react'
import { useSearchParams } from 'next/navigation'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { CheckCircle, Clock, MapPin, Phone } from 'lucide-react'
import Link from 'next/link'

export default function OrderSuccessPage() {
  const searchParams = useSearchParams()
  const orderNumber = searchParams.get('order')
  const [orderDetails, setOrderDetails] = useState<any>(null)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    if (orderNumber) {
      // In real app, fetch order details from API
      // For now, show mock success data
      setTimeout(() => {
        setOrderDetails({
          orderNumber,
          totalAmount: 15.50,
          pickupTime: '15-20 minutes',
          businessName: 'The Local Brew',
          businessAddress: '123 Coffee Street, Singapore',
          businessPhone: '+65 9123 4567',
          items: [
            { name: 'Flat White', quantity: 2, price: 5.50 },
            { name: 'Croissant', quantity: 1, price: 4.50 }
          ]
        })
        setLoading(false)
      }, 1000)
    } else {
      setLoading(false)
    }
  }, [orderNumber])

  if (!orderNumber) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4">
        <Card className="w-full max-w-md">
          <CardHeader className="text-center">
            <CardTitle className="text-red-600">Order Not Found</CardTitle>
            <CardDescription>
              No order information was provided.
            </CardDescription>
          </CardHeader>
          <CardContent className="text-center">
            <Link href="/">
              <Button>Return to Home</Button>
            </Link>
          </CardContent>
        </Card>
      </div>
    )
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4">
        <Card className="w-full max-w-md">
          <CardContent className="p-8 text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 mx-auto mb-4"></div>
            <p>Loading order details...</p>
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50 p-4">
      <div className="max-w-2xl mx-auto pt-8">
        {/* Success Header */}
        <Card className="mb-6">
          <CardHeader className="text-center">
            <div className="mx-auto w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mb-4">
              <CheckCircle className="w-8 h-8 text-green-600" />
            </div>
            <CardTitle className="text-2xl text-green-700">Order Confirmed!</CardTitle>
            <CardDescription className="text-lg">
              Thank you for your order. We're preparing it now.
            </CardDescription>
          </CardHeader>
        </Card>

        {/* Order Details */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Clock className="w-5 h-5" />
              Order Details
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="flex justify-between items-center py-2 border-b">
                <span className="font-medium">Order Number:</span>
                <span className="font-mono text-sm bg-gray-100 px-2 py-1 rounded">
                  {orderDetails?.orderNumber}
                </span>
              </div>
              
              <div className="flex justify-between items-center py-2 border-b">
                <span className="font-medium">Estimated Pickup:</span>
                <span className="text-orange-600 font-medium">
                  {orderDetails?.pickupTime}
                </span>
              </div>

              <div className="flex justify-between items-center py-2 border-b">
                <span className="font-medium">Total Amount:</span>
                <span className="font-bold text-lg">
                  S${orderDetails?.totalAmount?.toFixed(2)}
                </span>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Business Info */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <MapPin className="w-5 h-5" />
              Pickup Location
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              <h3 className="font-semibold text-lg">{orderDetails?.businessName}</h3>
              <p className="text-gray-600">{orderDetails?.businessAddress}</p>
              <div className="flex items-center gap-2">
                <Phone className="w-4 h-4" />
                <span>{orderDetails?.businessPhone}</span>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Order Items */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle>Your Order</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {orderDetails?.items?.map((item: any, index: number) => (
                <div key={index} className="flex justify-between items-center">
                  <div>
                    <span className="font-medium">{item.name}</span>
                    <span className="text-gray-500 ml-2">x{item.quantity}</span>
                  </div>
                  <span className="font-medium">
                    S${(item.price * item.quantity).toFixed(2)}
                  </span>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* Actions */}
        <div className="flex flex-col sm:flex-row gap-4 mb-8">
          <Link href="/orders" className="flex-1">
            <Button variant="outline" className="w-full">
              View All Orders
            </Button>
          </Link>
          <Link href="/" className="flex-1">
            <Button className="w-full">
              Continue Shopping
            </Button>
          </Link>
        </div>

        {/* Additional Info */}
        <Card>
          <CardContent className="p-4">
            <div className="text-sm text-gray-600 space-y-2">
              <p>üì± <strong>SMS updates:</strong> You'll receive SMS notifications about your order status.</p>
              <p>‚è∞ <strong>Pickup time:</strong> Please arrive within 10 minutes of the estimated time.</p>
              <p>‚ùì <strong>Questions?</strong> Call the caf√© directly or check your order status in the Orders page.</p>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}


--- FILE: app/page.tsx ---
"use client";

import {
  Search,
  MapPin,
  Star,
  Plus,
  TrendingUp,
  Users,
  Coffee,
  ChevronDown,
  User,
  Settings,
  ShoppingBag,
  LogOut,
} from "lucide-react";
import Image from "next/image";
import Link from "next/link";
import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { useAuth } from "@/lib/auth-context";

export default function HomePage() {
  const { user, userProfile, signOut } = useAuth();
  const router = useRouter();
  const [searchQuery, setSearchQuery] = useState("");
  const [dynamicStats, setDynamicStats] = useState({
    cafes: "200+",
    customers: "15K+", 
    orders: "50K+"
  });

  // Fetch dynamic stats on component mount
  useEffect(() => {
    fetch('/api/stats')
      .then(res => res.json())
      .then(data => setDynamicStats(data))
      .catch(err => {
        console.error('Failed to fetch stats:', err)
        // Keep default values on error
      })
  }, [])

  // Helper function to get user initials for avatar
  const getUserInitials = () => {
    if (userProfile?.first_name && userProfile?.last_name) {
      return `${userProfile.first_name[0]}${userProfile.last_name[0]}`.toUpperCase()
    }
    if (user?.email) {
      return user.email[0].toUpperCase()
    }
    return "U"
  }

  const getUserDisplayName = () => {
    if (userProfile?.first_name) {
      return userProfile.first_name
    }
    if (user?.email) {
      return user.email.split('@')[0]
    }
    return "User"
  }

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault()
    if (searchQuery.trim()) {
      router.push(`/browse?q=${encodeURIComponent(searchQuery.trim())}`)
    } else {
      router.push('/browse')
    }
  }

  const handleSearchKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleSearch(e)
    }
  }

  const featuredCafes = [
    {
      id: 1,
      name: "Ah Ma's Kitchen",
      cuisine: "Peranakan",
      location: "Toa Payoh",
      rating: 4.8,
      reviews: 124,
      image: "/placeholder.svg?height=200&width=300",
      specialty: "Authentic Nyonya Kueh",
      priceRange: "$$",
      isOpen: true,
    },
    {
      id: 2,
      name: "Brew & Bite",
      cuisine: "Western Fusion",
      location: "Tampines",
      rating: 4.6,
      reviews: 89,
      image: "/placeholder.svg?height=200&width=300",
      specialty: "Artisan Coffee & Brunch",
      priceRange: "$$$",
      isOpen: true,
    },
    {
      id: 3,
      name: "Spice Route Home",
      cuisine: "Indian",
      location: "Jurong West",
      rating: 4.9,
      reviews: 156,
      image: "/placeholder.svg?height=200&width=300",
      specialty: "Homestyle Curries",
      priceRange: "$",
      isOpen: false,
    },
    {
      id: 4,
      name: "Noodle Nest",
      cuisine: "Chinese",
      location: "Ang Mo Kio",
      rating: 4.7,
      reviews: 203,
      image: "/placeholder.svg?height=200&width=300",
      specialty: "Hand-pulled Noodles",
      priceRange: "$$",
      isOpen: true,
    },
  ];

  const categories = [
    { name: "Local", icon: "üá∏üá¨", count: 45 },
    { name: "Western", icon: "üçî", count: 32 },
    { name: "Asian Fusion", icon: "üçú", count: 28 },
    { name: "Desserts", icon: "üßÅ", count: 19 },
    { name: "Coffee", icon: "‚òï", count: 41 },
    { name: "Healthy", icon: "ü•ó", count: 23 },
  ];

  const stats = [
    { label: "Home Cafes", value: dynamicStats.cafes, icon: Coffee },
    { label: "Happy Customers", value: dynamicStats.customers, icon: Users },
    { label: "Orders Completed", value: dynamicStats.orders, icon: TrendingUp },
  ];

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm sticky top-0 z-50">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <Link href="/" className="flex items-center space-x-2">
              <div className="w-10 h-10 bg-gradient-to-r from-orange-500 to-red-500 rounded-full flex items-center justify-center">
                <span className="text-white font-bold text-lg">SG</span>
              </div>
              <div>
              </div>
            </Link>

            <nav className="hidden md:flex items-center space-x-6">
              <Link
                href="/browse"
                className="text-gray-600 hover:text-orange-600 transition-colors"
              >
                Browse
              </Link>
              <Link
                href="/categories"
                className="text-gray-600 hover:text-orange-600 transition-colors"
              >
                Categories
              </Link>
              <Link
                href="/about"
                className="text-gray-600 hover:text-orange-600 transition-colors"
              >
                About
              </Link>

              {user ? (
                <div className="flex items-center space-x-4">
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button variant="ghost" className="flex items-center space-x-2 hover:bg-gray-100">
                        <Avatar className="h-8 w-8">
                          <AvatarImage src="" />
                          <AvatarFallback className="bg-orange-500 text-white text-sm">
                            {getUserInitials()}
                          </AvatarFallback>
                        </Avatar>
                        <span className="text-sm text-gray-700">
                          Hi, {getUserDisplayName()}
                        </span>
                        <ChevronDown className="h-4 w-4 text-gray-500" />
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent align="end" className="w-56">
                      <DropdownMenuLabel>My Account</DropdownMenuLabel>
                      <DropdownMenuSeparator />
                      <DropdownMenuItem asChild>
                        <Link href="/profile" className="flex items-center">
                          <User className="mr-2 h-4 w-4" />
                          Profile
                        </Link>
                      </DropdownMenuItem>
                      <DropdownMenuItem asChild>
                        <Link href="/dashboard" className="flex items-center">
                          <Settings className="mr-2 h-4 w-4" />
                          Dashboard
                        </Link>
                      </DropdownMenuItem>
                      <DropdownMenuItem asChild>
                        <Link href="/orders" className="flex items-center">
                          <ShoppingBag className="mr-2 h-4 w-4" />
                          My Orders
                        </Link>
                      </DropdownMenuItem>
                      <DropdownMenuSeparator />
                      <DropdownMenuItem 
                        onClick={signOut}
                        className="text-red-600 focus:text-red-600"
                      >
                        <LogOut className="mr-2 h-4 w-4" />
                        Sign Out
                      </DropdownMenuItem>
                    </DropdownMenuContent>
                  </DropdownMenu>
                </div>
              ) : (
                <>
                  <Button asChild variant="outline">
                    <Link href="/auth/signin">Sign In</Link>
                  </Button>
                  <Button asChild className="bg-orange-600 hover:bg-orange-700">
                    <Link href="/auth/get-started">
                      <Plus className="w-4 h-4 mr-2" />
                      Get Started
                    </Link>
                  </Button>
                </>
              )}
            </nav>
          </div>
        </div>
      </header>

      {/* Hero Section */}
      <section className="bg-gradient-to-r from-orange-50 to-red-50 py-16">
        <div className="container mx-auto px-4">
          <div className="max-w-4xl mx-auto text-center">
            <h1 className="text-4xl md:text-6xl font-bold text-gray-900 mb-6">
              Discover Singapore's Best
              <span className="text-orange-600 block">Home-Based Cafes</span>
            </h1>
            <p className="text-xl text-gray-600 mb-8 max-w-2xl mx-auto">
              Support local entrepreneurs and taste authentic flavors from
              passionate home chefs across Singapore
            </p>

            {/* Search Bar */}
            <div className="max-w-2xl mx-auto mb-8">
              <form onSubmit={handleSearch} className="flex flex-col sm:flex-row gap-4">
                <div className="relative flex-1">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                  <Input
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    onKeyPress={handleSearchKeyPress}
                    placeholder="Search for cuisine, location, or cafe name..."
                    className="pl-10 h-12 text-lg"
                  />
                </div>
                <Button
                  type="submit"
                  size="lg"
                  className="bg-orange-600 hover:bg-orange-700 h-12 px-8"
                >
                  Search
                </Button>
              </form>
            </div>

            {/* Stats */}
            <div className="grid grid-cols-3 gap-8 max-w-2xl mx-auto">
              {stats.map((stat, index) => (
                <div key={index} className="text-center">
                  <div className="flex justify-center mb-2">
                    <stat.icon className="w-8 h-8 text-orange-600" />
                  </div>
                  <div className="text-2xl font-bold text-gray-900">
                    {stat.value}
                  </div>
                  <div className="text-sm text-gray-600">{stat.label}</div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </section>

      {/* Categories */}
      <section className="py-16 bg-white">
        <div className="container mx-auto px-4">
          <h2 className="text-3xl font-bold text-gray-900 text-center mb-12">
            Browse by Category
          </h2>
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-6 max-w-4xl mx-auto">
            {categories.map((category, index) => (
              <Link
                key={index}
                href={`/category/${category.name.toLowerCase()}`}
              >
                <Card className="hover:shadow-lg transition-all duration-300 cursor-pointer group h-full">
                  <CardContent className="p-6 text-center h-full flex flex-col justify-center">
                    <div className="text-4xl mb-3 group-hover:scale-110 transition-transform">
                      {category.icon}
                    </div>
                    <h3 className="font-semibold text-gray-900 mb-1 min-h-[2.5rem] flex items-center justify-center">
                      {category.name}
                    </h3>
                    <p className="text-sm text-gray-500">
                      {category.count} cafes
                    </p>
                  </CardContent>
                </Card>
              </Link>
            ))}
          </div>
        </div>
      </section>

      {/* Featured Cafes */}
      <section className="py-16 bg-gray-50">
        <div className="container mx-auto px-4">
          <div className="flex justify-between items-center mb-12">
            <h2 className="text-3xl font-bold text-gray-900">
              Featured Home Cafes
            </h2>
            <Button variant="outline" asChild>
              <Link href="/browse">View All</Link>
            </Button>
          </div>

          <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6">
            {featuredCafes.map((cafe) => (
              <Link key={cafe.id} href={`/cafe/${cafe.id}`}>
                <Card className="hover:shadow-lg transition-all duration-300 cursor-pointer group overflow-hidden">
                  <div className="relative">
                    <Image
                      src={cafe.image || "/placeholder.svg"}
                      alt={cafe.name}
                      width={300}
                      height={200}
                      className="w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300"
                    />
                    <div className="absolute top-3 right-3">
                      <Badge
                        variant={cafe.isOpen ? "default" : "secondary"}
                        className="bg-white/90 text-gray-900"
                      >
                        {cafe.isOpen ? "Open" : "Closed"}
                      </Badge>
                    </div>
                  </div>
                  <CardContent className="p-4">
                    <div className="flex justify-between items-start mb-2">
                      <h3 className="font-semibold text-gray-900 group-hover:text-orange-600 transition-colors">
                        {cafe.name}
                      </h3>
                      <span className="text-sm text-gray-500">
                        {cafe.priceRange}
                      </span>
                    </div>
                    <p className="text-sm text-orange-600 mb-2">
                      {cafe.specialty}
                    </p>
                    <div className="flex items-center justify-between text-sm text-gray-500">
                      <div className="flex items-center">
                        <MapPin className="w-4 h-4 mr-1" />
                        {cafe.location}
                      </div>
                      <div className="flex items-center">
                        <Star className="w-4 h-4 mr-1 fill-yellow-400 text-yellow-400" />
                        {cafe.rating} ({cafe.reviews})
                      </div>
                    </div>
                    <Badge variant="outline" className="mt-2 text-xs">
                      {cafe.cuisine}
                    </Badge>
                  </CardContent>
                </Card>
              </Link>
            ))}
          </div>
        </div>
      </section>

      {/* Call to Action for Business Owners */}
      <section className="py-16 bg-gradient-to-r from-orange-600 to-red-600 text-white">
        <div className="container mx-auto px-4 text-center">
          <h2 className="text-3xl md:text-4xl font-bold mb-6">
            Ready to Share Your Culinary Passion?
          </h2>
          <p className="text-xl mb-8 max-w-2xl mx-auto opacity-90">
            Join Singapore's growing community of home-based food entrepreneurs.
            Create your profile in minutes and start connecting with food lovers
            in your neighborhood.
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <Button
              size="lg"
              variant="secondary"
              asChild
              className="bg-white text-orange-600 hover:bg-gray-100"
            >
              <Link
                href={
                  user && userProfile?.user_type === "business_owner"
                    ? "/register-business"
                    : "/auth/get-started"
                }
              >
                <Plus className="w-5 h-5 mr-2" />
                {user && userProfile?.user_type === "business_owner"
                  ? "List Your Cafe"
                  : "Get Started"}
              </Link>
            </Button>
            <Button
              size="lg"
              variant="outline"
              asChild
              className="border-white text-white hover:bg-white/10 bg-transparent"
            >
              <Link href="/how-it-works">Learn How It Works</Link>
            </Button>
          </div>
        </div>
      </section>

      {/* Footer */}
      <footer className="bg-gray-900 text-white py-12">
        <div className="container mx-auto px-4">
          <div className="grid md:grid-cols-4 gap-8">
            <div>
              <div className="flex items-center space-x-2 mb-4">
                <div className="w-8 h-8 bg-gradient-to-r from-orange-500 to-red-500 rounded-full flex items-center justify-center">
                  <span className="text-white font-bold text-sm">SG</span>
                </div>
                <span className="font-bold text-lg">SG Home Eats</span>
              </div>
              <p className="text-gray-400 text-sm">
                Connecting food lovers with passionate home chefs across
                Singapore.
              </p>
            </div>

            <div>
              <h4 className="font-semibold mb-4">For Customers</h4>
              <ul className="space-y-2 text-sm text-gray-400">
                <li>
                  <Link
                    href="/browse"
                    className="hover:text-white transition-colors"
                  >
                    Browse Cafes
                  </Link>
                </li>
                <li>
                  <Link
                    href="/categories"
                    className="hover:text-white transition-colors"
                  >
                    Categories
                  </Link>
                </li>
                <li>
                  <Link
                    href="/reviews"
                    className="hover:text-white transition-colors"
                  >
                    Reviews
                  </Link>
                </li>
              </ul>
            </div>

            <div>
              <h4 className="font-semibold mb-4">For Business</h4>
              <ul className="space-y-2 text-sm text-gray-400">
                <li>
                  <Link
                    href={
                      user && userProfile?.user_type === "business_owner"
                        ? "/register-business"
                        : "/auth/get-started"
                    }
                    className="hover:text-white transition-colors"
                  >
                    {user && userProfile?.user_type === "business_owner"
                      ? "List Your Cafe"
                      : "Get Started"}
                  </Link>
                </li>
                <li>
                  <Link
                    href="/business-dashboard"
                    className="hover:text-white transition-colors"
                  >
                    Business Dashboard
                  </Link>
                </li>
                <li>
                  <Link
                    href="/pricing"
                    className="hover:text-white transition-colors"
                  >
                    Pricing
                  </Link>
                </li>
              </ul>
            </div>

            <div>
              <h4 className="font-semibold mb-4">Support</h4>
              <ul className="space-y-2 text-sm text-gray-400">
                <li>
                  <Link
                    href="/help"
                    className="hover:text-white transition-colors"
                  >
                    Help Center
                  </Link>
                </li>
                <li>
                  <Link
                    href="/contact"
                    className="hover:text-white transition-colors"
                  >
                    Contact Us
                  </Link>
                </li>
                <li>
                  <Link
                    href="/terms"
                    className="hover:text-white transition-colors"
                  >
                    Terms of Service
                  </Link>
                </li>
              </ul>
            </div>
          </div>

          <div className="border-t border-gray-800 mt-8 pt-8 text-center text-sm text-gray-400">
            <p>
              ¬© {new Date().getFullYear()} SG Home Eats. All rights reserved. Made with ‚ù§Ô∏è in
              Singapore
            </p>
          </div>
        </div>
      </footer>
    </div>
  );
}


--- FILE: app/pricing/page.tsx ---
"use client"

import Link from "next/link"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { 
  Check, 
  X, 
  Star,
  Users,
  TrendingUp,
  Shield,
  Headphones,
  Zap,
  Crown,
  Calculator
} from "lucide-react"

export default function PricingPage() {
  const plans = [
    {
      name: "Starter",
      price: "Free",
      period: "",
      description: "Perfect for trying out SG Home Eats",
      badge: null,
      color: "border-gray-200",
      buttonColor: "bg-gray-600 hover:bg-gray-700",
      features: [
        { text: "List up to 5 menu items", included: true },
        { text: "Basic profile setup", included: true },
        { text: "Standard order processing", included: true },
        { text: "Community support", included: true },
        { text: "5% + $0.50 transaction fee", included: true },
        { text: "Analytics dashboard", included: false },
        { text: "Priority customer support", included: false },
        { text: "Marketing tools", included: false },
        { text: "Custom branding", included: false }
      ]
    },
    {
      name: "Growth",
      price: "$19",
      period: "/month",
      description: "For established home cafes ready to grow",
      badge: "Most Popular",
      color: "border-orange-500 ring-2 ring-orange-500",
      buttonColor: "bg-orange-600 hover:bg-orange-700",
      features: [
        { text: "Unlimited menu items", included: true },
        { text: "Enhanced profile with photos", included: true },
        { text: "Priority order processing", included: true },
        { text: "Email & chat support", included: true },
        { text: "3% + $0.30 transaction fee", included: true },
        { text: "Advanced analytics dashboard", included: true },
        { text: "Customer insights", included: true },
        { text: "Basic marketing tools", included: true },
        { text: "Custom branding", included: false }
      ]
    },
    {
      name: "Pro",
      price: "$49",
      period: "/month",
      description: "For serious food entrepreneurs",
      badge: "Best Value",
      color: "border-purple-500",
      buttonColor: "bg-purple-600 hover:bg-purple-700",
      features: [
        { text: "Everything in Growth", included: true },
        { text: "Premium profile placement", included: true },
        { text: "Instant order notifications", included: true },
        { text: "Priority customer support", included: true },
        { text: "2% + $0.25 transaction fee", included: true },
        { text: "Advanced marketing tools", included: true },
        { text: "Customer loyalty program", included: true },
        { text: "Custom branding & domain", included: true },
        { text: "API access", included: true }
      ]
    }
  ]

  const features = [
    {
      icon: <Shield className="w-6 h-6 text-green-600" />,
      title: "Secure Payments",
      description: "Bank-level security for all transactions"
    },
    {
      icon: <TrendingUp className="w-6 h-6 text-blue-600" />,
      title: "Analytics & Insights",
      description: "Track your performance and customer behavior"
    },
    {
      icon: <Users className="w-6 h-6 text-purple-600" />,
      title: "Customer Management",
      description: "Build relationships with your customers"
    },
    {
      icon: <Zap className="w-6 h-6 text-yellow-600" />,
      title: "Easy Setup",
      description: "Get started in minutes, not hours"
    }
  ]

  const testimonials = [
    {
      name: "Sarah Lim",
      cafe: "Ah Ma's Kitchen",
      quote: "The Growth plan helped me double my orders in just 3 months. The analytics are incredibly helpful!",
      rating: 5
    },
    {
      name: "Marcus Wong",
      cafe: "Brew & Bite",
      quote: "Started with the free plan and upgraded to Pro. The custom branding really makes a difference.",
      rating: 5
    },
    {
      name: "Priya Sharma",
      cafe: "Spice Route Home",
      quote: "Customer support is amazing. They helped me optimize my menu and increase sales.",
      rating: 5
    }
  ]

  const faqs = [
    {
      question: "Can I change plans anytime?",
      answer: "Yes! You can upgrade or downgrade your plan at any time. Changes take effect immediately, and we'll prorate the billing accordingly."
    },
    {
      question: "What payment methods do you accept?",
      answer: "We accept all major credit cards, PayNow, and bank transfers. All payments are processed securely through Stripe."
    },
    {
      question: "Is there a setup fee?",
      answer: "No setup fees! You only pay the monthly subscription and transaction fees. We want to make it as easy as possible to get started."
    },
    {
      question: "How are transaction fees calculated?",
      answer: "Transaction fees are charged only on successful orders. The percentage and fixed fee depend on your plan tier. This covers payment processing and platform maintenance."
    },
    {
      question: "Can I try before I commit?",
      answer: "Absolutely! Start with our free Starter plan to test the waters. You can always upgrade when you're ready to grow your business."
    },
    {
      question: "Do you offer discounts for annual payments?",
      answer: "Yes! Pay annually and save 20% on your subscription. Contact our sales team for more details on annual plans."
    }
  ]

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <Link href="/" className="flex items-center space-x-2">
              <div className="w-10 h-10 bg-gradient-to-r from-orange-500 to-red-500 rounded-full flex items-center justify-center">
                <span className="text-white font-bold text-lg">SG</span>
              </div>
              <span className="font-bold text-xl text-gray-900">SG Home Eats</span>
            </Link>
            <Button asChild variant="outline">
              <Link href="/">‚Üê Back to Home</Link>
            </Button>
          </div>
        </div>
      </header>

      {/* Hero Section */}
      <section className="bg-gradient-to-br from-orange-50 to-red-50 py-16">
        <div className="container mx-auto px-4 text-center">
          <h1 className="text-4xl md:text-5xl font-bold text-gray-900 mb-6">
            Simple, Transparent
            <br />
            <span className="text-orange-600">Pricing</span>
          </h1>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto mb-8">
            Choose the plan that fits your home cafe's needs. Start free and scale as you grow. 
            No hidden fees, no long-term contracts.
          </p>
          
          <div className="flex items-center justify-center space-x-4">
            <Calculator className="w-5 h-5 text-orange-600" />
            <span className="text-lg text-gray-700">Only pay transaction fees on successful orders</span>
          </div>
        </div>
      </section>

      {/* Pricing Plans */}
      <section className="py-16">
        <div className="container mx-auto px-4">
          <div className="grid md:grid-cols-3 gap-8 max-w-6xl mx-auto">
            {plans.map((plan, index) => (
              <Card key={index} className={`relative ${plan.color} ${plan.badge ? 'transform scale-105' : ''}`}>
                {plan.badge && (
                  <div className="absolute -top-4 left-1/2 transform -translate-x-1/2">
                    <Badge className="bg-orange-600 text-white px-4 py-2">
                      {plan.badge}
                    </Badge>
                  </div>
                )}
                
                <CardContent className="p-8">
                  <div className="text-center mb-8">
                    <h3 className="text-2xl font-bold text-gray-900 mb-2">{plan.name}</h3>
                    <div className="mb-4">
                      <span className="text-4xl font-bold text-gray-900">{plan.price}</span>
                      <span className="text-gray-600">{plan.period}</span>
                    </div>
                    <p className="text-gray-600">{plan.description}</p>
                  </div>

                  <ul className="space-y-3 mb-8">
                    {plan.features.map((feature, featureIndex) => (
                      <li key={featureIndex} className="flex items-center">
                        {feature.included ? (
                          <Check className="w-5 h-5 text-green-600 mr-3 flex-shrink-0" />
                        ) : (
                          <X className="w-5 h-5 text-gray-400 mr-3 flex-shrink-0" />
                        )}
                        <span className={feature.included ? "text-gray-900" : "text-gray-500"}>
                          {feature.text}
                        </span>
                      </li>
                    ))}
                  </ul>

                  <Button 
                    asChild 
                    className={`w-full ${plan.buttonColor}`}
                    size="lg"
                  >
                    <Link href="/auth/get-started">
                      {plan.name === "Starter" ? "Get Started Free" : `Choose ${plan.name}`}
                    </Link>
                  </Button>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>

      {/* Features */}
      <section className="py-16 bg-white">
        <div className="container mx-auto px-4">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold text-gray-900 mb-4">Why Choose SG Home Eats?</h2>
            <p className="text-lg text-gray-600 max-w-2xl mx-auto">
              All plans include these essential features to help your home cafe succeed.
            </p>
          </div>
          
          <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6">
            {features.map((feature, index) => (
              <Card key={index} className="text-center">
                <CardContent className="p-6">
                  <div className="flex justify-center mb-4">
                    {feature.icon}
                  </div>
                  <h3 className="text-lg font-bold text-gray-900 mb-2">
                    {feature.title}
                  </h3>
                  <p className="text-gray-600 text-sm">
                    {feature.description}
                  </p>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>

      {/* Testimonials */}
      <section className="py-16">
        <div className="container mx-auto px-4">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold text-gray-900 mb-4">What Our Home Chefs Say</h2>
            <p className="text-lg text-gray-600 max-w-2xl mx-auto">
              See how SG Home Eats is helping food entrepreneurs grow their businesses.
            </p>
          </div>
          
          <div className="grid md:grid-cols-3 gap-8 max-w-4xl mx-auto">
            {testimonials.map((testimonial, index) => (
              <Card key={index}>
                <CardContent className="p-6">
                  <div className="flex items-center mb-4">
                    {Array.from({ length: testimonial.rating }, (_, i) => (
                      <Star key={i} className="w-4 h-4 fill-yellow-400 text-yellow-400" />
                    ))}
                  </div>
                  <blockquote className="text-gray-600 mb-4 italic">
                    "{testimonial.quote}"
                  </blockquote>
                  <div>
                    <div className="font-semibold text-gray-900">{testimonial.name}</div>
                    <div className="text-sm text-orange-600">{testimonial.cafe}</div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>

      {/* FAQ */}
      <section className="py-16 bg-white">
        <div className="container mx-auto px-4">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold text-gray-900 mb-4">Frequently Asked Questions</h2>
          </div>
          
          <div className="max-w-3xl mx-auto space-y-6">
            {faqs.map((faq, index) => (
              <Card key={index}>
                <CardContent className="p-6">
                  <h3 className="text-lg font-bold text-gray-900 mb-2">
                    {faq.question}
                  </h3>
                  <p className="text-gray-600">
                    {faq.answer}
                  </p>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>

      {/* Enterprise CTA */}
      <section className="py-16">
        <div className="container mx-auto px-4">
          <Card className="bg-gradient-to-r from-purple-500 to-indigo-600 text-white">
            <CardContent className="p-12 text-center">
              <Crown className="w-12 h-12 mx-auto mb-6 text-yellow-300" />
              <h2 className="text-3xl font-bold mb-4">Need Something Custom?</h2>
              <p className="text-xl mb-8 opacity-90 max-w-2xl mx-auto">
                Running multiple home cafes or need special features? Let's talk about a custom solution 
                tailored to your unique needs.
              </p>
              <div className="flex flex-wrap justify-center gap-4">
                <Button asChild size="lg" variant="secondary">
                  <Link href="/contact">Contact Sales</Link>
                </Button>
                <Button asChild size="lg" variant="outline" className="bg-transparent border-white text-white hover:bg-white hover:text-purple-600">
                  <Link href="/help">Learn More</Link>
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </section>

      {/* Final CTA */}
      <section className="py-16 bg-gradient-to-br from-orange-500 to-red-500 text-white">
        <div className="container mx-auto px-4 text-center">
          <h2 className="text-3xl font-bold mb-4">Ready to Start Your Home Cafe Journey?</h2>
          <p className="text-xl mb-8 opacity-90">
            Join hundreds of successful home chefs already earning with SG Home Eats.
          </p>
          <div className="flex flex-wrap justify-center gap-4">
            <Button asChild size="lg" variant="secondary">
              <Link href="/auth/get-started">Start Free Today</Link>
            </Button>
            <Button asChild size="lg" variant="outline" className="bg-transparent border-white text-white hover:bg-white hover:text-orange-600">
              <Link href="/how-it-works">See How It Works</Link>
            </Button>
          </div>
        </div>
      </section>
    </div>
  )
}


--- FILE: app/profile/page.tsx ---
"use client"

import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import { useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import { z } from "zod"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Badge } from "@/components/ui/badge"
import { useToast } from "@/components/ui/use-toast"
import { useAuth } from "@/lib/auth-context"
import { ArrowLeft, User, Mail, Phone, Save, Loader2 } from "lucide-react"
import Link from "next/link"

const profileSchema = z.object({
  firstName: z.string().min(1, "First name is required"),
  lastName: z.string().min(1, "Last name is required"),
  phone: z.string().optional(),
  intendedBusinessName: z.string().optional(),
})

type ProfileFormData = z.infer<typeof profileSchema>

export default function ProfilePage() {
  const { user, userProfile, loading, refreshUser, signOut } = useAuth()
  const router = useRouter()
  const { toast } = useToast()
  
  const [isLoading, setIsLoading] = useState(false)

  const form = useForm<ProfileFormData>({
    resolver: zodResolver(profileSchema),
    defaultValues: {
      firstName: "",
      lastName: "",
      phone: "",
      intendedBusinessName: "",
    },
  })

  useEffect(() => {
    if (!loading && !user) {
      router.push("/auth/signin")
    }
  }, [user, loading, router])

  useEffect(() => {
    if (userProfile) {
      form.reset({
        firstName: userProfile.first_name || "",
        lastName: userProfile.last_name || "",
        phone: userProfile.phone || "",
        intendedBusinessName: userProfile.intended_business_name || "",
      })
    }
  }, [userProfile, form])

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-orange-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading profile...</p>
        </div>
      </div>
    )
  }

  if (!user || !userProfile) {
    return null
  }

  const onSubmit = async (data: ProfileFormData) => {
    setIsLoading(true)

    try {
      // Here you would typically call an API to update the user profile
      // For now, we'll just show a success message
      toast({
        title: "Profile updated!",
        description: "Your profile has been updated successfully.",
      })
      
      await refreshUser()
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "Failed to update profile. Please try again.",
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  const isBusinessOwner = userProfile.user_type === "business_owner"
  const isEmailVerified = user.email_confirmed_at !== null

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <Link href="/dashboard" className="flex items-center text-gray-600 hover:text-gray-900">
              <ArrowLeft className="w-4 h-4 mr-2" />
              Back to Dashboard
            </Link>

            <Button variant="outline" onClick={signOut}>
              Sign Out
            </Button>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-8 max-w-2xl">
        <div className="mb-8">
          <h1 className="text-2xl md:text-3xl font-bold text-gray-900 mb-2">
            Profile Settings
          </h1>
          <p className="text-gray-600">
            Manage your account information and preferences
          </p>
        </div>

        <div className="space-y-6">
          {/* Account Information */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <User className="w-5 h-5 mr-2" />
                Account Information
              </CardTitle>
              <CardDescription>
                Update your personal details and account settings
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {/* Email (readonly) */}
              <div>
                <Label>Email Address</Label>
                <div className="flex items-center space-x-2 mt-1">
                  <Input value={user.email || ""} disabled />
                  <Badge variant={isEmailVerified ? "default" : "secondary"}>
                    {isEmailVerified ? "Verified" : "Unverified"}
                  </Badge>
                </div>
                {!isEmailVerified && (
                  <p className="text-sm text-orange-600 mt-1">
                    Please check your email to verify your account
                  </p>
                )}
              </div>

              {/* Account Type (readonly) */}
              <div>
                <Label>Account Type</Label>
                <div className="mt-1">
                  <Badge variant={isBusinessOwner ? "default" : "secondary"} className="text-sm">
                    {isBusinessOwner ? "Business Owner" : "Customer"}
                  </Badge>
                </div>
              </div>

              {/* User ID (readonly) */}
              <div>
                <Label>User ID</Label>
                <Input value={user.id} disabled className="text-xs font-mono" />
                <p className="text-xs text-gray-500 mt-1">
                  This is your unique user identifier
                </p>
              </div>
            </CardContent>
          </Card>

          {/* Profile Details Form */}
          <Card>
            <CardHeader>
              <CardTitle>Profile Details</CardTitle>
              <CardDescription>
                Update your personal information
              </CardDescription>
            </CardHeader>
            <CardContent>
              <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                {/* Name Fields */}
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="firstName">First Name</Label>
                    <Input
                      id="firstName"
                      {...form.register("firstName")}
                    />
                    {form.formState.errors.firstName && (
                      <p className="text-sm text-red-600 mt-1">
                        {form.formState.errors.firstName.message}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label htmlFor="lastName">Last Name</Label>
                    <Input
                      id="lastName"
                      {...form.register("lastName")}
                    />
                    {form.formState.errors.lastName && (
                      <p className="text-sm text-red-600 mt-1">
                        {form.formState.errors.lastName.message}
                      </p>
                    )}
                  </div>
                </div>

                {/* Phone */}
                <div>
                  <Label htmlFor="phone">
                    Phone Number {isBusinessOwner && <span className="text-red-500">*</span>}
                  </Label>
                  <Input
                    id="phone"
                    {...form.register("phone")}
                    placeholder="+65 8123 4567"
                  />
                  {form.formState.errors.phone && (
                    <p className="text-sm text-red-600 mt-1">
                      {form.formState.errors.phone.message}
                    </p>
                  )}
                  {isBusinessOwner && (
                    <p className="text-sm text-gray-500 mt-1">
                      Phone number is required for business accounts
                    </p>
                  )}
                </div>

                {/* Business Name (for business owners) */}
                {isBusinessOwner && (
                  <div>
                    <Label htmlFor="intendedBusinessName">
                      Intended Business Name <span className="text-gray-500">(optional)</span>
                    </Label>
                    <Input
                      id="intendedBusinessName"
                      {...form.register("intendedBusinessName")}
                      placeholder="Ah Ma's Kitchen"
                    />
                    <p className="text-xs text-gray-500 mt-1">
                      This can be changed when creating your business profile
                    </p>
                  </div>
                )}

                <div className="pt-4">
                  <Button 
                    type="submit" 
                    className="bg-orange-600 hover:bg-orange-700"
                    disabled={isLoading}
                  >
                    {isLoading ? (
                      <>
                        <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                        Saving...
                      </>
                    ) : (
                      <>
                        <Save className="w-4 h-4 mr-2" />
                        Save Changes
                      </>
                    )}
                  </Button>
                </div>
              </form>
            </CardContent>
          </Card>

          {/* Account Actions */}
          <Card>
            <CardHeader>
              <CardTitle className="text-red-600">Danger Zone</CardTitle>
              <CardDescription>
                Irreversible actions for your account
              </CardDescription>
            </CardHeader>
            <CardContent>
              <Button variant="destructive" disabled>
                Delete Account (Coming Soon)
              </Button>
              <p className="text-sm text-gray-500 mt-2">
                Account deletion will be available in a future update
              </p>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}


--- FILE: app/register-business/page.tsx ---
"use client"

import { useState } from "react"
import { ArrowLeft, Upload, Camera, Plus, X } from "lucide-react"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Card, CardContent } from "@/components/ui/card"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Checkbox } from "@/components/ui/checkbox"
import { Badge } from "@/components/ui/badge"

export default function RegisterBusinessPage() {
  const [currentStep, setCurrentStep] = useState(1)
  const [menuItems, setMenuItems] = useState([{ name: "", price: "", description: "" }])
  const [selectedCuisines, setSelectedCuisines] = useState<string[]>([])

  const cuisineTypes = [
    "Local Singaporean",
    "Chinese",
    "Malay",
    "Indian",
    "Peranakan",
    "Western",
    "Japanese",
    "Korean",
    "Thai",
    "Vietnamese",
    "Italian",
    "Mexican",
    "Fusion",
  ]

  const addMenuItem = () => {
    setMenuItems([...menuItems, { name: "", price: "", description: "" }])
  }

  const removeMenuItem = (index: number) => {
    setMenuItems(menuItems.filter((_, i) => i !== index))
  }

  const updateMenuItem = (index: number, field: string, value: string) => {
    const updated = menuItems.map((item, i) => (i === index ? { ...item, [field]: value } : item))
    setMenuItems(updated)
  }

  const toggleCuisine = (cuisine: string) => {
    setSelectedCuisines((prev) => (prev.includes(cuisine) ? prev.filter((c) => c !== cuisine) : [...prev, cuisine]))
  }

  const steps = [
    { number: 1, title: "Basic Information", description: "Tell us about your cafe" },
    { number: 2, title: "Location & Hours", description: "Where and when you operate" },
    { number: 3, title: "Menu & Pricing", description: "Showcase your offerings" },
    { number: 4, title: "Photos & Final Details", description: "Make your listing shine" },
  ]

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <Link href="/" className="flex items-center space-x-2 text-gray-600 hover:text-gray-900">
              <ArrowLeft className="w-5 h-5" />
              <span>Back to Home</span>
            </Link>
            <div className="flex items-center space-x-2">
              <div className="w-8 h-8 bg-gradient-to-r from-orange-500 to-red-500 rounded-full flex items-center justify-center">
                <span className="text-white font-bold text-sm">SG</span>
              </div>
              <span className="font-bold text-lg text-gray-900">SG Home Eats</span>
            </div>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-8">
        <div className="max-w-4xl mx-auto">
          {/* Progress Steps */}
          <div className="mb-8">
            <div className="flex items-center justify-between mb-4">
              {steps.map((step, index) => (
                <div key={step.number} className="flex items-center">
                  <div
                    className={`w-10 h-10 rounded-full flex items-center justify-center text-sm font-semibold ${
                      currentStep >= step.number ? "bg-orange-600 text-white" : "bg-gray-200 text-gray-600"
                    }`}
                  >
                    {step.number}
                  </div>
                  {index < steps.length - 1 && (
                    <div className={`w-24 h-1 mx-4 ${currentStep > step.number ? "bg-orange-600" : "bg-gray-200"}`} />
                  )}
                </div>
              ))}
            </div>
            <div className="text-center">
              <h1 className="text-2xl font-bold text-gray-900 mb-2">{steps[currentStep - 1].title}</h1>
              <p className="text-gray-600">{steps[currentStep - 1].description}</p>
            </div>
          </div>

          {/* Step Content */}
          <Card>
            <CardContent className="p-8">
              {currentStep === 1 && (
                <div className="space-y-6">
                  <div className="grid md:grid-cols-2 gap-6">
                    <div>
                      <Label htmlFor="businessName">Business Name *</Label>
                      <Input id="businessName" placeholder="e.g., Ah Ma's Kitchen" className="mt-2" />
                    </div>
                    <div>
                      <Label htmlFor="ownerName">Owner Name *</Label>
                      <Input id="ownerName" placeholder="Your full name" className="mt-2" />
                    </div>
                  </div>

                  <div>
                    <Label htmlFor="description">Business Description *</Label>
                    <Textarea
                      id="description"
                      placeholder="Tell customers about your story, specialties, and what makes your cafe unique..."
                      className="mt-2 min-h-[120px]"
                    />
                  </div>

                  <div>
                    <Label className="text-base font-semibold">Cuisine Types *</Label>
                    <p className="text-sm text-gray-600 mb-4">Select all that apply to your offerings</p>
                    <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                      {cuisineTypes.map((cuisine) => (
                        <div key={cuisine} className="flex items-center space-x-2">
                          <Checkbox
                            id={cuisine}
                            checked={selectedCuisines.includes(cuisine)}
                            onCheckedChange={() => toggleCuisine(cuisine)}
                          />
                          <Label htmlFor={cuisine} className="text-sm">
                            {cuisine}
                          </Label>
                        </div>
                      ))}
                    </div>
                    {selectedCuisines.length > 0 && (
                      <div className="mt-4 flex flex-wrap gap-2">
                        {selectedCuisines.map((cuisine) => (
                          <Badge key={cuisine} variant="secondary">
                            {cuisine}
                            <X className="w-3 h-3 ml-1 cursor-pointer" onClick={() => toggleCuisine(cuisine)} />
                          </Badge>
                        ))}
                      </div>
                    )}
                  </div>

                  <div className="grid md:grid-cols-2 gap-6">
                    <div>
                      <Label htmlFor="phone">Phone Number *</Label>
                      <Input id="phone" placeholder="+65 9123 4567" className="mt-2" />
                    </div>
                    <div>
                      <Label htmlFor="email">Email Address *</Label>
                      <Input id="email" type="email" placeholder="hello@yourbusiness.com" className="mt-2" />
                    </div>
                  </div>
                </div>
              )}

              {currentStep === 2 && (
                <div className="space-y-6">
                  <div>
                    <Label htmlFor="address">Full Address *</Label>
                    <Input
                      id="address"
                      placeholder="Blk 123 Toa Payoh Lorong 1, #01-456, Singapore 310123"
                      className="mt-2"
                    />
                    <p className="text-sm text-gray-500 mt-1">Include block number, unit number, and postal code</p>
                  </div>

                  <div className="grid md:grid-cols-2 gap-6">
                    <div>
                      <Label htmlFor="district">District/Area *</Label>
                      <Select>
                        <SelectTrigger className="mt-2">
                          <SelectValue placeholder="Select district" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="central">Central</SelectItem>
                          <SelectItem value="north">North</SelectItem>
                          <SelectItem value="south">South</SelectItem>
                          <SelectItem value="east">East</SelectItem>
                          <SelectItem value="west">West</SelectItem>
                          <SelectItem value="northeast">Northeast</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    <div>
                      <Label htmlFor="priceRange">Price Range *</Label>
                      <Select>
                        <SelectTrigger className="mt-2">
                          <SelectValue placeholder="Select price range" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="$">$ (Under $10 per person)</SelectItem>
                          <SelectItem value="$$">$$ ($10-20 per person)</SelectItem>
                          <SelectItem value="$$$">$$$ ($20-35 per person)</SelectItem>
                          <SelectItem value="$$$$">$$$$ (Above $35 per person)</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  <div>
                    <Label className="text-base font-semibold">Operating Hours *</Label>
                    <div className="mt-4 space-y-4">
                      {["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"].map((day) => (
                        <div key={day} className="flex items-center space-x-4">
                          <div className="w-24">
                            <Label className="text-sm">{day}</Label>
                          </div>
                          <Checkbox id={`${day}-open`} />
                          <Label htmlFor={`${day}-open`} className="text-sm">
                            Open
                          </Label>
                          <Input placeholder="9:00 AM" className="w-24" />
                          <span className="text-gray-500">to</span>
                          <Input placeholder="6:00 PM" className="w-24" />
                        </div>
                      ))}
                    </div>
                  </div>

                  <div>
                    <Label htmlFor="specialNotes">Special Notes</Label>
                    <Textarea
                      id="specialNotes"
                      placeholder="e.g., Please call ahead, Closed during public holidays, etc."
                      className="mt-2"
                    />
                  </div>
                </div>
              )}

              {currentStep === 3 && (
                <div className="space-y-6">
                  <div>
                    <Label className="text-base font-semibold">Menu Items *</Label>
                    <p className="text-sm text-gray-600 mb-4">Add your signature dishes and popular items</p>

                    {menuItems.map((item, index) => (
                      <Card key={index} className="mb-4">
                        <CardContent className="p-4">
                          <div className="flex justify-between items-start mb-4">
                            <h4 className="font-semibold">Item {index + 1}</h4>
                            {menuItems.length > 1 && (
                              <Button
                                variant="ghost"
                                size="sm"
                                onClick={() => removeMenuItem(index)}
                                className="text-red-600 hover:text-red-700"
                              >
                                <X className="w-4 h-4" />
                              </Button>
                            )}
                          </div>
                          <div className="grid md:grid-cols-3 gap-4">
                            <div>
                              <Label htmlFor={`item-name-${index}`}>Item Name *</Label>
                              <Input
                                id={`item-name-${index}`}
                                value={item.name}
                                onChange={(e) => updateMenuItem(index, "name", e.target.value)}
                                placeholder="e.g., Kaya Toast Set"
                                className="mt-1"
                              />
                            </div>
                            <div>
                              <Label htmlFor={`item-price-${index}`}>Price *</Label>
                              <Input
                                id={`item-price-${index}`}
                                value={item.price}
                                onChange={(e) => updateMenuItem(index, "price", e.target.value)}
                                placeholder="e.g., $6.80"
                                className="mt-1"
                              />
                            </div>
                            <div className="md:col-span-1">
                              <Label htmlFor={`item-description-${index}`}>Description</Label>
                              <Input
                                id={`item-description-${index}`}
                                value={item.description}
                                onChange={(e) => updateMenuItem(index, "description", e.target.value)}
                                placeholder="Brief description"
                                className="mt-1"
                              />
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    ))}

                    <Button variant="outline" onClick={addMenuItem} className="w-full border-dashed bg-transparent">
                      <Plus className="w-4 h-4 mr-2" />
                      Add Another Item
                    </Button>
                  </div>

                  <div>
                    <Label htmlFor="specialties">Signature Specialties</Label>
                    <Input
                      id="specialties"
                      placeholder="e.g., Homemade Kaya, Traditional Nyonya Kueh"
                      className="mt-2"
                    />
                    <p className="text-sm text-gray-500 mt-1">What are you most known for?</p>
                  </div>
                </div>
              )}

              {currentStep === 4 && (
                <div className="space-y-6">
                  <div>
                    <Label className="text-base font-semibold">Business Photos</Label>
                    <p className="text-sm text-gray-600 mb-4">Upload photos of your food, setup, and workspace</p>

                    <div className="grid md:grid-cols-2 gap-6">
                      <div>
                        <Label>Cover Photo *</Label>
                        <div className="mt-2 border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-orange-400 transition-colors cursor-pointer">
                          <Camera className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                          <p className="text-gray-600">Click to upload your main photo</p>
                          <p className="text-sm text-gray-500 mt-1">JPG, PNG up to 5MB</p>
                        </div>
                      </div>

                      <div>
                        <Label>Additional Photos</Label>
                        <div className="mt-2 border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-orange-400 transition-colors cursor-pointer">
                          <Upload className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                          <p className="text-gray-600">Upload more photos</p>
                          <p className="text-sm text-gray-500 mt-1">Up to 10 photos</p>
                        </div>
                      </div>
                    </div>
                  </div>

                  <div>
                    <Label htmlFor="socialMedia">Social Media (Optional)</Label>
                    <div className="mt-2 space-y-3">
                      <Input placeholder="Instagram: @yourbusiness" />
                      <Input placeholder="Facebook: facebook.com/yourbusiness" />
                      <Input placeholder="WhatsApp: +65 9123 4567" />
                    </div>
                  </div>

                  <div>
                    <Label htmlFor="additionalInfo">Additional Information</Label>
                    <Textarea
                      id="additionalInfo"
                      placeholder="Any other details customers should know? Dietary options, special services, etc."
                      className="mt-2"
                    />
                  </div>

                  <div className="bg-orange-50 p-6 rounded-lg">
                    <h3 className="font-semibold text-orange-900 mb-2">Ready to Launch!</h3>
                    <p className="text-orange-800 text-sm">
                      Once you submit, our team will review your listing within 24 hours. You'll receive an email
                      confirmation and can start managing your profile through the business dashboard.
                    </p>
                  </div>
                </div>
              )}

              {/* Navigation Buttons */}
              <div className="flex justify-between pt-8 border-t">
                <Button
                  variant="outline"
                  onClick={() => setCurrentStep(Math.max(1, currentStep - 1))}
                  disabled={currentStep === 1}
                >
                  Previous
                </Button>

                {currentStep < 4 ? (
                  <Button
                    onClick={() => setCurrentStep(Math.min(4, currentStep + 1))}
                    className="bg-orange-600 hover:bg-orange-700"
                  >
                    Next Step
                  </Button>
                ) : (
                  <Button className="bg-green-600 hover:bg-green-700">Submit for Review</Button>
                )}
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}


--- FILE: app/reviews/page.tsx ---
"use client"

import Link from "next/link"
import Image from "next/image"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { 
  Star, 
  Search, 
  Filter,
  MapPin,
  Clock,
  ThumbsUp,
  MessageCircle,
  TrendingUp
} from "lucide-react"

export default function ReviewsPage() {
  const featuredReviews = [
    {
      id: 1,
      reviewer: "Sarah Chen",
      avatar: "/placeholder-user.jpg",
      rating: 5,
      date: "2 days ago",
      cafe: "Ah Ma's Kitchen",
      cafeLocation: "Toa Payoh",
      title: "Absolutely Amazing Laksa!",
      content: "I've been searching for authentic laksa in Singapore, and Ah Ma's Kitchen delivered beyond my expectations. The broth was rich and aromatic, with just the right amount of spice. The prawns were fresh and the cockles were perfectly cooked. Will definitely order again!",
      helpful: 24,
      images: ["/placeholder.svg?height=200&width=200", "/placeholder.svg?height=200&width=200"],
      verified: true
    },
    {
      id: 2,
      reviewer: "Marcus Wong",
      avatar: "/placeholder-user.jpg",
      rating: 5,
      date: "1 week ago",
      cafe: "Brew & Bite",
      cafeLocation: "Tampines",
      title: "Best Home-Brewed Coffee Experience",
      content: "The barista's attention to detail is incredible. They take time to explain each step of the brewing process. The coffee beans are sourced locally and roasted to perfection. The homemade pastries complement the coffee beautifully. A hidden gem in Tampines!",
      helpful: 18,
      images: ["/placeholder.svg?height=200&width=200"],
      verified: true
    },
    {
      id: 3,
      reviewer: "Priya Sharma",
      avatar: "/placeholder-user.jpg",
      rating: 4,
      date: "3 days ago",
      cafe: "Spice Route Home",
      cafeLocation: "Jurong West",
      title: "Homestyle Indian Comfort Food",
      content: "Reminds me of my grandmother's cooking. The dal was perfectly seasoned and the roti was soft and warm. The portion sizes are generous and the prices are very reasonable. Only minor feedback is that delivery took a bit longer than expected, but the quality made up for it.",
      helpful: 15,
      images: ["/placeholder.svg?height=200&width=200", "/placeholder.svg?height=200&width=200", "/placeholder.svg?height=200&width=200"],
      verified: true
    },
    {
      id: 4,
      reviewer: "David Lim",
      avatar: "/placeholder-user.jpg",
      rating: 5,
      date: "5 days ago",
      cafe: "Noodle Nest",
      cafeLocation: "Ang Mo Kio",
      title: "Hand-Pulled Noodles Worth the Wait",
      content: "Watched through the window as they hand-pulled the noodles. The texture was incredible - springy and fresh. The broth had depth of flavor that you can only get from hours of simmering. This is what authentic Chinese noodles should taste like. Highly recommended!",
      helpful: 31,
      images: ["/placeholder.svg?height=200&width=200"],
      verified: true
    },
    {
      id: 5,
      reviewer: "Lisa Tan",
      avatar: "/placeholder-user.jpg",
      rating: 4,
      date: "1 day ago",
      cafe: "Sweet Treats Corner",
      cafeLocation: "Bedok",
      title: "Delightful Homemade Desserts",
      content: "The kueh lapis was incredibly moist and flavorful. You can taste the love and traditional techniques in every layer. The ondeh ondeh burst with gula melaka sweetness. Perfect for satisfying my dessert cravings with authentic local flavors.",
      helpful: 12,
      images: ["/placeholder.svg?height=200&width=200", "/placeholder.svg?height=200&width=200"],
      verified: true
    }
  ]

  const topRatedCafes = [
    { name: "Ah Ma's Kitchen", rating: 4.9, reviews: 124, cuisine: "Peranakan" },
    { name: "Spice Route Home", rating: 4.8, reviews: 156, cuisine: "Indian" },
    { name: "Brew & Bite", rating: 4.7, reviews: 89, cuisine: "Western" },
    { name: "Noodle Nest", rating: 4.7, reviews: 203, cuisine: "Chinese" },
    { name: "Sweet Treats Corner", rating: 4.6, reviews: 67, cuisine: "Desserts" }
  ]

  const renderStars = (rating: number) => {
    return Array.from({ length: 5 }, (_, index) => (
      <Star
        key={index}
        className={`w-4 h-4 ${
          index < rating
            ? "fill-yellow-400 text-yellow-400"
            : "text-gray-300"
        }`}
      />
    ))
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <Link href="/" className="flex items-center space-x-2">
              <div className="w-10 h-10 bg-gradient-to-r from-orange-500 to-red-500 rounded-full flex items-center justify-center">
                <span className="text-white font-bold text-lg">SG</span>
              </div>
              <span className="font-bold text-xl text-gray-900">SG Home Eats</span>
            </Link>
            <Button asChild variant="outline">
              <Link href="/">‚Üê Back to Home</Link>
            </Button>
          </div>
        </div>
      </header>

      {/* Hero Section */}
      <section className="bg-gradient-to-br from-orange-50 to-red-50 py-16">
        <div className="container mx-auto px-4 text-center">
          <h1 className="text-4xl md:text-5xl font-bold text-gray-900 mb-6">
            Community
            <br />
            <span className="text-orange-600">Reviews</span>
          </h1>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto mb-8">
            Discover what our food-loving community has to say about Singapore's best home cafes. 
            Real reviews from real customers help you find your next favorite meal.
          </p>
          
          {/* Search Bar */}
          <div className="max-w-2xl mx-auto">
            <div className="flex flex-col sm:flex-row gap-4">
              <div className="relative flex-1">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                <Input
                  placeholder="Search reviews by cafe name, cuisine, or location..."
                  className="pl-10 h-12 text-lg"
                />
              </div>
              <Button size="lg" className="bg-orange-600 hover:bg-orange-700 h-12 px-8">
                <Filter className="w-4 h-4 mr-2" />
                Filter
              </Button>
            </div>
          </div>
        </div>
      </section>

      <div className="container mx-auto px-4 py-12">
        <div className="grid lg:grid-cols-4 gap-8">
          {/* Main Reviews Content */}
          <div className="lg:col-span-3">
            <div className="flex justify-between items-center mb-8">
              <h2 className="text-2xl font-bold text-gray-900">Latest Reviews</h2>
              <Badge variant="outline" className="px-3 py-1">
                {featuredReviews.length} Reviews
              </Badge>
            </div>

            <div className="space-y-6">
              {featuredReviews.map((review) => (
                <Card key={review.id} className="hover:shadow-md transition-shadow">
                  <CardContent className="p-6">
                    {/* Review Header */}
                    <div className="flex items-start justify-between mb-4">
                      <div className="flex items-center space-x-3">
                        <div className="relative w-12 h-12 rounded-full overflow-hidden">
                          <Image
                            src={review.avatar}
                            alt={review.reviewer}
                            fill
                            className="object-cover"
                            onError={(e) => {
                              const target = e.target as HTMLImageElement;
                              target.src = '/placeholder-user.jpg';
                            }}
                          />
                        </div>
                        <div>
                          <div className="flex items-center space-x-2">
                            <h3 className="font-semibold text-gray-900">{review.reviewer}</h3>
                            {review.verified && (
                              <Badge variant="secondary" className="text-xs">Verified</Badge>
                            )}
                          </div>
                          <div className="flex items-center space-x-2 text-sm text-gray-500">
                            <Clock className="w-3 h-3" />
                            <span>{review.date}</span>
                          </div>
                        </div>
                      </div>
                      <div className="flex items-center space-x-1">
                        {renderStars(review.rating)}
                        <span className="ml-2 font-semibold text-gray-900">{review.rating}.0</span>
                      </div>
                    </div>

                    {/* Cafe Info */}
                    <div className="mb-4">
                      <Link href={`/cafe/${review.id}`} className="hover:text-orange-600 transition-colors">
                        <h4 className="font-semibold text-lg text-gray-900">{review.cafe}</h4>
                      </Link>
                      <div className="flex items-center text-sm text-gray-500">
                        <MapPin className="w-3 h-3 mr-1" />
                        {review.cafeLocation}
                      </div>
                    </div>

                    {/* Review Content */}
                    <div className="mb-4">
                      <h5 className="font-medium text-gray-900 mb-2">{review.title}</h5>
                      <p className="text-gray-600 leading-relaxed">{review.content}</p>
                    </div>

                    {/* Review Images */}
                    {review.images && review.images.length > 0 && (
                      <div className="flex gap-2 mb-4 overflow-x-auto">
                        {review.images.map((image, index) => (
                          <div key={index} className="relative w-20 h-20 rounded-lg overflow-hidden flex-shrink-0">
                            <Image
                              src={image}
                              alt={`Review image ${index + 1}`}
                              fill
                              className="object-cover hover:scale-105 transition-transform cursor-pointer"
                              onError={(e) => {
                                const target = e.target as HTMLImageElement;
                                target.src = '/placeholder.svg';
                              }}
                            />
                          </div>
                        ))}
                      </div>
                    )}

                    {/* Review Actions */}
                    <div className="flex items-center justify-between pt-4 border-t border-gray-100">
                      <div className="flex items-center space-x-4 text-sm text-gray-500">
                        <button className="flex items-center space-x-1 hover:text-orange-600 transition-colors">
                          <ThumbsUp className="w-4 h-4" />
                          <span>Helpful ({review.helpful})</span>
                        </button>
                        <button className="flex items-center space-x-1 hover:text-orange-600 transition-colors">
                          <MessageCircle className="w-4 h-4" />
                          <span>Reply</span>
                        </button>
                      </div>
                      <Button variant="outline" size="sm" asChild>
                        <Link href={`/cafe/${review.id}`}>Visit Cafe</Link>
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>

            {/* Load More */}
            <div className="text-center mt-8">
              <Button variant="outline" size="lg">
                Load More Reviews
              </Button>
            </div>
          </div>

          {/* Sidebar */}
          <div className="lg:col-span-1">
            {/* Top Rated Cafes */}
            <Card className="mb-6">
              <CardContent className="p-6">
                <div className="flex items-center mb-4">
                  <TrendingUp className="w-5 h-5 text-orange-600 mr-2" />
                  <h3 className="font-bold text-gray-900">Top Rated Cafes</h3>
                </div>
                <div className="space-y-4">
                  {topRatedCafes.map((cafe, index) => (
                    <div key={index} className="flex items-center justify-between">
                      <div className="flex-1">
                        <Link href={`/cafe/${index + 1}`} className="font-medium text-gray-900 hover:text-orange-600 transition-colors">
                          {cafe.name}
                        </Link>
                        <div className="flex items-center space-x-2 text-sm text-gray-500">
                          <div className="flex items-center">
                            <Star className="w-3 h-3 fill-yellow-400 text-yellow-400 mr-1" />
                            <span>{cafe.rating}</span>
                          </div>
                          <span>‚Ä¢</span>
                          <span>{cafe.reviews} reviews</span>
                        </div>
                        <Badge variant="outline" className="text-xs mt-1">
                          {cafe.cuisine}
                        </Badge>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            {/* Review Stats */}
            <Card>
              <CardContent className="p-6">
                <h3 className="font-bold text-gray-900 mb-4">Review Stats</h3>
                <div className="space-y-3">
                  <div className="flex justify-between items-center">
                    <span className="text-gray-600">Total Reviews</span>
                    <span className="font-semibold">12,450+</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-gray-600">Average Rating</span>
                    <div className="flex items-center">
                      <Star className="w-4 h-4 fill-yellow-400 text-yellow-400 mr-1" />
                      <span className="font-semibold">4.7</span>
                    </div>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-gray-600">This Month</span>
                    <span className="font-semibold">1,240 new</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-gray-600">Verified Reviews</span>
                    <span className="font-semibold">98%</span>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>

      {/* CTA Section */}
      <section className="py-16 bg-gradient-to-br from-orange-500 to-red-500 text-white">
        <div className="container mx-auto px-4 text-center">
          <h2 className="text-3xl font-bold mb-4">Share Your Experience</h2>
          <p className="text-xl mb-8 opacity-90">
            Help others discover amazing home cafes by sharing your honest reviews.
          </p>
          <div className="flex flex-wrap justify-center gap-4">
            <Button asChild size="lg" variant="secondary">
              <Link href="/browse">Find a Cafe to Review</Link>
            </Button>
            <Button asChild size="lg" variant="outline" className="bg-transparent border-white text-white hover:bg-white hover:text-orange-600">
              <Link href="/dashboard">My Reviews</Link>
            </Button>
          </div>
        </div>
      </section>
    </div>
  )
}


--- FILE: app/terms/page.tsx ---
"use client"

import Link from "next/link"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { 
  FileText,
  Calendar,
  Shield,
  AlertCircle,
  CheckCircle,
  Mail,
  Scale
} from "lucide-react"

export default function TermsPage() {
  const lastUpdated = "March 15, 2024"
  const effectiveDate = "March 1, 2024"

  const sections = [
    {
      id: "acceptance",
      title: "1. Acceptance of Terms",
      content: `By accessing and using SG Home Eats ("Platform", "Service"), you accept and agree to be bound by the terms and provision of this agreement. If you do not agree to abide by the above, please do not use this service.`
    },
    {
      id: "definitions",
      title: "2. Definitions",
      content: `
‚Ä¢ "Platform" refers to the SG Home Eats website, mobile application, and related services
‚Ä¢ "User" means any person who accesses or uses our Platform
‚Ä¢ "Home Chef" refers to individuals who prepare and sell food through our Platform
‚Ä¢ "Customer" refers to users who purchase food through our Platform
‚Ä¢ "Content" includes text, images, videos, and other materials posted on the Platform
      `
    },
    {
      id: "eligibility",
      title: "3. User Eligibility",
      content: `
You must be at least 18 years old to use this Platform. By using SG Home Eats, you represent and warrant that:
‚Ä¢ You are at least 18 years of age
‚Ä¢ You have the legal capacity to enter into this agreement
‚Ä¢ Your use of the Platform will not violate any applicable law or regulation
‚Ä¢ All information you provide is accurate and complete
      `
    },
    {
      id: "registration",
      title: "4. Account Registration",
      content: `
To access certain features of our Platform, you must register for an account. You agree to:
‚Ä¢ Provide accurate, current, and complete information during registration
‚Ä¢ Maintain and update your account information
‚Ä¢ Keep your account credentials secure and confidential
‚Ä¢ Accept responsibility for all activities under your account
‚Ä¢ Notify us immediately of any unauthorized use of your account
      `
    },
    {
      id: "home-chef-terms",
      title: "5. Home Chef Terms",
      content: `
If you register as a Home Chef, you additionally agree to:
‚Ä¢ Comply with all applicable food safety regulations and local licensing requirements
‚Ä¢ Provide accurate descriptions and pricing for your food items
‚Ä¢ Maintain high standards of food preparation and hygiene
‚Ä¢ Respond promptly to customer orders and inquiries
‚Ä¢ Allow us to process payments on your behalf and deduct applicable fees
‚Ä¢ Provide valid business registration documents if required by local law
      `
    },
    {
      id: "customer-terms",
      title: "6. Customer Terms",
      content: `
If you use our Platform to order food, you agree to:
‚Ä¢ Provide accurate delivery information and payment details
‚Ä¢ Pay for all orders placed through your account
‚Ä¢ Treat Home Chefs and delivery personnel with respect
‚Ä¢ Provide honest and fair reviews of your experiences
‚Ä¢ Not misuse our review or rating system
      `
    },
    {
      id: "prohibited-conduct",
      title: "7. Prohibited Conduct",
      content: `
You may not use our Platform to:
‚Ä¢ Violate any laws, regulations, or third-party rights
‚Ä¢ Post false, misleading, or fraudulent content
‚Ä¢ Engage in harassment, abuse, or discrimination
‚Ä¢ Interfere with the Platform's operation or security
‚Ä¢ Create fake accounts or manipulate reviews
‚Ä¢ Sell alcohol, tobacco, or other restricted items
‚Ä¢ Use the Platform for any illegal food business activities
      `
    },
    {
      id: "payments",
      title: "8. Payments and Fees",
      content: `
‚Ä¢ All payments are processed securely through our payment partners
‚Ä¢ Home Chefs are charged a service fee on each successful transaction
‚Ä¢ Customers pay the food price plus any applicable delivery fees and taxes
‚Ä¢ Refunds are processed according to our refund policy
‚Ä¢ We reserve the right to change our fee structure with reasonable notice
      `
    },
    {
      id: "intellectual-property",
      title: "9. Intellectual Property",
      content: `
‚Ä¢ SG Home Eats retains all rights to our Platform, trademarks, and proprietary content
‚Ä¢ Users retain rights to their own content but grant us a license to use it on our Platform
‚Ä¢ You may not copy, reproduce, or redistribute our Platform or content without permission
‚Ä¢ Respect the intellectual property rights of other users and third parties
      `
    },
    {
      id: "privacy",
      title: "10. Privacy and Data Protection",
      content: `
Your privacy is important to us. Our Privacy Policy explains:
‚Ä¢ What personal information we collect and how we use it
‚Ä¢ How we protect your data and maintain security
‚Ä¢ Your rights regarding your personal information
‚Ä¢ How we handle cookies and tracking technologies
‚Ä¢ Our compliance with Singapore's Personal Data Protection Act (PDPA)
      `
    },
    {
      id: "liability",
      title: "11. Limitation of Liability",
      content: `
SG Home Eats is a platform that connects Home Chefs with Customers. We:
‚Ä¢ Do not prepare, handle, or deliver food ourselves
‚Ä¢ Are not responsible for food quality, safety, or preparation methods
‚Ä¢ Cannot guarantee the accuracy of Home Chef information or reviews
‚Ä¢ Limit our liability to the maximum extent permitted by law
‚Ä¢ Encourage users to exercise their own judgment when using our Platform
      `
    },
    {
      id: "termination",
      title: "12. Account Termination",
      content: `
We may suspend or terminate your account if you:
‚Ä¢ Violate these Terms of Service
‚Ä¢ Engage in fraudulent or illegal activities
‚Ä¢ Receive multiple complaints about your conduct
‚Ä¢ Fail to pay applicable fees or charges
‚Ä¢ Request account deletion

You may terminate your account at any time by contacting our support team.
      `
    },
    {
      id: "dispute-resolution",
      title: "13. Dispute Resolution",
      content: `
For disputes between users, we encourage direct communication and provide mediation support when requested. For disputes with SG Home Eats:
‚Ä¢ Contact our support team first to seek resolution
‚Ä¢ Unresolved disputes will be governed by Singapore law
‚Ä¢ Any legal proceedings must be conducted in Singapore courts
‚Ä¢ We encourage alternative dispute resolution methods when appropriate
      `
    },
    {
      id: "changes",
      title: "14. Changes to Terms",
      content: `
We reserve the right to modify these terms at any time. When we make changes:
‚Ä¢ We will notify users via email or Platform notification
‚Ä¢ Continued use of the Platform constitutes acceptance of new terms
‚Ä¢ Significant changes will include a reasonable notice period
‚Ä¢ You may terminate your account if you disagree with changes
      `
    },
    {
      id: "contact",
      title: "15. Contact Information",
      content: `
If you have questions about these Terms of Service, please contact us:
‚Ä¢ Email: legal@sghomeeats.com
‚Ä¢ Phone: +65 6123 4567
‚Ä¢ Address: SG Home Eats Pte Ltd, 123 Food Street, #12-34, Singapore 123456
‚Ä¢ Business Registration: 202400123A
      `
    }
  ]

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <Link href="/" className="flex items-center space-x-2">
              <div className="w-10 h-10 bg-gradient-to-r from-orange-500 to-red-500 rounded-full flex items-center justify-center">
                <span className="text-white font-bold text-lg">SG</span>
              </div>
              <span className="font-bold text-xl text-gray-900">SG Home Eats</span>
            </Link>
            <Button asChild variant="outline">
              <Link href="/">‚Üê Back to Home</Link>
            </Button>
          </div>
        </div>
      </header>

      {/* Hero Section */}
      <section className="bg-gradient-to-br from-orange-50 to-red-50 py-16">
        <div className="container mx-auto px-4 text-center">
          <h1 className="text-4xl md:text-5xl font-bold text-gray-900 mb-6">
            Terms of
            <br />
            <span className="text-orange-600">Service</span>
          </h1>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto mb-8">
            These terms govern your use of SG Home Eats and outline the rights and responsibilities 
            of all users on our platform.
          </p>
          
          <div className="flex flex-wrap justify-center gap-6 text-sm">
            <div className="flex items-center space-x-2">
              <Calendar className="w-4 h-4 text-orange-600" />
              <span className="text-gray-600">Last Updated: {lastUpdated}</span>
            </div>
            <div className="flex items-center space-x-2">
              <CheckCircle className="w-4 h-4 text-green-600" />
              <span className="text-gray-600">Effective: {effectiveDate}</span>
            </div>
          </div>
        </div>
      </section>

      <div className="container mx-auto px-4 py-12">
        <div className="grid lg:grid-cols-4 gap-8">
          {/* Table of Contents */}
          <div className="lg:col-span-1">
            <div className="sticky top-8">
              <Card>
                <CardContent className="p-6">
                  <h3 className="font-bold text-gray-900 mb-4">Table of Contents</h3>
                  <nav className="space-y-2">
                    {sections.map((section) => (
                      <a
                        key={section.id}
                        href={`#${section.id}`}
                        className="block text-sm text-gray-600 hover:text-orange-600 transition-colors py-1"
                      >
                        {section.title}
                      </a>
                    ))}
                  </nav>
                </CardContent>
              </Card>

              {/* Key Points */}
              <Card className="mt-6">
                <CardContent className="p-6">
                  <h3 className="font-bold text-gray-900 mb-4">Key Points</h3>
                  <div className="space-y-3 text-sm">
                    <div className="flex items-start space-x-2">
                      <Shield className="w-4 h-4 text-green-600 mt-0.5 flex-shrink-0" />
                      <span className="text-gray-600">Must be 18+ to use platform</span>
                    </div>
                    <div className="flex items-start space-x-2">
                      <FileText className="w-4 h-4 text-blue-600 mt-0.5 flex-shrink-0" />
                      <span className="text-gray-600">Food safety compliance required</span>
                    </div>
                    <div className="flex items-start space-x-2">
                      <Scale className="w-4 h-4 text-purple-600 mt-0.5 flex-shrink-0" />
                      <span className="text-gray-600">Singapore law governs disputes</span>
                    </div>
                    <div className="flex items-start space-x-2">
                      <AlertCircle className="w-4 h-4 text-orange-600 mt-0.5 flex-shrink-0" />
                      <span className="text-gray-600">Terms may change with notice</span>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>

          {/* Main Content */}
          <div className="lg:col-span-3">
            {/* Important Notice */}
            <Card className="mb-8 border-orange-200 bg-orange-50">
              <CardContent className="p-6">
                <div className="flex items-start space-x-3">
                  <AlertCircle className="w-6 h-6 text-orange-600 mt-1 flex-shrink-0" />
                  <div>
                    <h3 className="font-semibold text-gray-900 mb-2">Important Notice</h3>
                    <p className="text-gray-700 text-sm leading-relaxed">
                      By using SG Home Eats, you agree to these terms in their entirety. 
                      Please read them carefully. If you don't agree with any part of these terms, 
                      you should not use our platform. These terms are legally binding and enforceable.
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Terms Sections */}
            <div className="space-y-8">
              {sections.map((section) => (
                <Card key={section.id} id={section.id}>
                  <CardContent className="p-8">
                    <h2 className="text-2xl font-bold text-gray-900 mb-4">
                      {section.title}
                    </h2>
                    <div className="prose prose-gray max-w-none">
                      <div className="whitespace-pre-line text-gray-700 leading-relaxed">
                        {section.content}
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>

            {/* Document Info */}
            <Card className="mt-12 bg-gray-100">
              <CardContent className="p-8">
                <div className="grid md:grid-cols-2 gap-6">
                  <div>
                    <h3 className="font-semibold text-gray-900 mb-3">Document Information</h3>
                    <div className="space-y-2 text-sm text-gray-600">
                      <div className="flex justify-between">
                        <span>Version:</span>
                        <span>2.1</span>
                      </div>
                      <div className="flex justify-between">
                        <span>Last Updated:</span>
                        <span>{lastUpdated}</span>
                      </div>
                      <div className="flex justify-between">
                        <span>Effective Date:</span>
                        <span>{effectiveDate}</span>
                      </div>
                      <div className="flex justify-between">
                        <span>Language:</span>
                        <span>English</span>
                      </div>
                    </div>
                  </div>

                  <div>
                    <h3 className="font-semibold text-gray-900 mb-3">Legal Entity</h3>
                    <div className="space-y-1 text-sm text-gray-600">
                      <p>SG Home Eats Pte Ltd</p>
                      <p>UEN: 202400123A</p>
                      <p>123 Food Street, #12-34</p>
                      <p>Singapore 123456</p>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>

      {/* Related Documents */}
      <section className="py-16 bg-white">
        <div className="container mx-auto px-4">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold text-gray-900 mb-4">Related Documents</h2>
            <p className="text-lg text-gray-600 max-w-2xl mx-auto">
              These additional documents provide important information about using SG Home Eats.
            </p>
          </div>
          
          <div className="grid md:grid-cols-3 gap-6 max-w-4xl mx-auto">
            <Card className="text-center hover:shadow-md transition-shadow">
              <CardContent className="p-6">
                <Shield className="w-8 h-8 text-green-600 mx-auto mb-4" />
                <h3 className="font-semibold text-gray-900 mb-2">Privacy Policy</h3>
                <p className="text-gray-600 text-sm mb-4">
                  Learn how we collect, use, and protect your personal information.
                </p>
                <Button variant="outline" size="sm" asChild>
                  <Link href="/privacy">Read Policy</Link>
                </Button>
              </CardContent>
            </Card>

            <Card className="text-center hover:shadow-md transition-shadow">
              <CardContent className="p-6">
                <FileText className="w-8 h-8 text-blue-600 mx-auto mb-4" />
                <h3 className="font-semibold text-gray-900 mb-2">Community Guidelines</h3>
                <p className="text-gray-600 text-sm mb-4">
                  Standards for respectful interaction within our community.
                </p>
                <Button variant="outline" size="sm" asChild>
                  <Link href="/guidelines">View Guidelines</Link>
                </Button>
              </CardContent>
            </Card>

            <Card className="text-center hover:shadow-md transition-shadow">
              <CardContent className="p-6">
                <Scale className="w-8 h-8 text-purple-600 mx-auto mb-4" />
                <h3 className="font-semibold text-gray-900 mb-2">Cookie Policy</h3>
                <p className="text-gray-600 text-sm mb-4">
                  Information about how we use cookies and tracking technologies.
                </p>
                <Button variant="outline" size="sm" asChild>
                  <Link href="/cookies">Learn More</Link>
                </Button>
              </CardContent>
            </Card>
          </div>
        </div>
      </section>

      {/* Questions Section */}
      <section className="py-16">
        <div className="container mx-auto px-4">
          <Card className="bg-gradient-to-r from-orange-500 to-red-500 text-white">
            <CardContent className="p-12 text-center">
              <Mail className="w-12 h-12 mx-auto mb-6 text-white" />
              <h2 className="text-3xl font-bold mb-4">Questions About Our Terms?</h2>
              <p className="text-xl mb-8 opacity-90 max-w-2xl mx-auto">
                Our legal team is available to clarify any aspects of these terms. 
                We're committed to transparency and helping you understand your rights and obligations.
              </p>
              <div className="flex flex-wrap justify-center gap-4">
                <Button asChild size="lg" variant="secondary">
                  <Link href="/contact">Contact Legal Team</Link>
                </Button>
                <Button asChild size="lg" variant="outline" className="bg-transparent border-white text-white hover:bg-white hover:text-orange-600">
                  <Link href="/help">Visit Help Center</Link>
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </section>
    </div>
  )
}


--- FILE: components/theme-provider.tsx ---
'use client'

import * as React from 'react'
import {
  ThemeProvider as NextThemesProvider,
  type ThemeProviderProps,
} from 'next-themes'

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}


--- FILE: components/ui/accordion.tsx ---
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }


--- FILE: components/ui/alert-dialog.tsx ---
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}


--- FILE: components/ui/alert.tsx ---
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }


--- FILE: components/ui/aspect-ratio.tsx ---
"use client"

import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }


--- FILE: components/ui/avatar.tsx ---
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }


--- FILE: components/ui/badge.tsx ---
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }


--- FILE: components/ui/breadcrumb.tsx ---
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}


--- FILE: components/ui/button.tsx ---
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }


--- FILE: components/ui/calendar.tsx ---
'use client'

import * as React from 'react'
import {
  ChevronDownIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
} from 'lucide-react'
import { DayButton, DayPicker, getDefaultClassNames } from 'react-day-picker'

import { cn } from '@/lib/utils'
import { Button, buttonVariants } from '@/components/ui/button'

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  captionLayout = 'label',
  buttonVariant = 'ghost',
  formatters,
  components,
  ...props
}: React.ComponentProps<typeof DayPicker> & {
  buttonVariant?: React.ComponentProps<typeof Button>['variant']
}) {
  const defaultClassNames = getDefaultClassNames()

  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn(
        'bg-background group/calendar p-3 [--cell-size:--spacing(8)] [[data-slot=card-content]_&]:bg-transparent [[data-slot=popover-content]_&]:bg-transparent',
        String.raw`rtl:**:[.rdp-button\_next>svg]:rotate-180`,
        String.raw`rtl:**:[.rdp-button\_previous>svg]:rotate-180`,
        className
      )}
      captionLayout={captionLayout}
      formatters={{
        formatMonthDropdown: date =>
          date.toLocaleString('default', { month: 'short' }),
        ...formatters,
      }}
      classNames={{
        root: cn('w-fit', defaultClassNames.root),
        months: cn(
          'flex gap-4 flex-col md:flex-row relative',
          defaultClassNames.months
        ),
        month: cn('flex flex-col w-full gap-4', defaultClassNames.month),
        nav: cn(
          'flex items-center gap-1 w-full absolute top-0 inset-x-0 justify-between',
          defaultClassNames.nav
        ),
        button_previous: cn(
          buttonVariants({ variant: buttonVariant }),
          'size-[--cell-size] aria-disabled:opacity-50 p-0 select-none',
          defaultClassNames.button_previous
        ),
        button_next: cn(
          buttonVariants({ variant: buttonVariant }),
          'size-[--cell-size] aria-disabled:opacity-50 p-0 select-none',
          defaultClassNames.button_next
        ),
        month_caption: cn(
          'flex items-center justify-center h-[--cell-size] w-full px-[--cell-size]',
          defaultClassNames.month_caption
        ),
        dropdowns: cn(
          'w-full flex items-center text-sm font-medium justify-center h-[--cell-size] gap-1.5',
          defaultClassNames.dropdowns
        ),
        dropdown_root: cn(
          'relative has-focus:border-ring border border-input shadow-xs has-focus:ring-ring/50 has-focus:ring-[3px] rounded-md',
          defaultClassNames.dropdown_root
        ),
        dropdown: cn(
          'absolute bg-popover inset-0 opacity-0',
          defaultClassNames.dropdown
        ),
        caption_label: cn(
          'select-none font-medium',
          captionLayout === 'label'
            ? 'text-sm'
            : 'rounded-md pl-2 pr-1 flex items-center gap-1 text-sm h-8 [&>svg]:text-muted-foreground [&>svg]:size-3.5',
          defaultClassNames.caption_label
        ),
        table: 'w-full border-collapse',
        weekdays: cn('flex', defaultClassNames.weekdays),
        weekday: cn(
          'text-muted-foreground rounded-md flex-1 font-normal text-[0.8rem] select-none',
          defaultClassNames.weekday
        ),
        week: cn('flex w-full mt-2', defaultClassNames.week),
        week_number_header: cn(
          'select-none w-[--cell-size]',
          defaultClassNames.week_number_header
        ),
        week_number: cn(
          'text-[0.8rem] select-none text-muted-foreground',
          defaultClassNames.week_number
        ),
        day: cn(
          'relative w-full h-full p-0 text-center [&:first-child[data-selected=true]_button]:rounded-l-md [&:last-child[data-selected=true]_button]:rounded-r-md group/day aspect-square select-none',
          defaultClassNames.day
        ),
        range_start: cn(
          'rounded-l-md bg-accent',
          defaultClassNames.range_start
        ),
        range_middle: cn('rounded-none', defaultClassNames.range_middle),
        range_end: cn('rounded-r-md bg-accent', defaultClassNames.range_end),
        today: cn(
          'bg-accent text-accent-foreground rounded-md data-[selected=true]:rounded-none',
          defaultClassNames.today
        ),
        outside: cn(
          'text-muted-foreground aria-selected:text-muted-foreground',
          defaultClassNames.outside
        ),
        disabled: cn(
          'text-muted-foreground opacity-50',
          defaultClassNames.disabled
        ),
        hidden: cn('invisible', defaultClassNames.hidden),
        ...classNames,
      }}
      components={{
        Root: ({ className, rootRef, ...props }) => {
          return (
            <div
              data-slot="calendar"
              ref={rootRef}
              className={cn(className)}
              {...props}
            />
          )
        },
        Chevron: ({ className, orientation, ...props }) => {
          if (orientation === 'left') {
            return (
              <ChevronLeftIcon className={cn('size-4', className)} {...props} />
            )
          }

          if (orientation === 'right') {
            return (
              <ChevronRightIcon
                className={cn('size-4', className)}
                {...props}
              />
            )
          }

          return (
            <ChevronDownIcon className={cn('size-4', className)} {...props} />
          )
        },
        DayButton: CalendarDayButton,
        WeekNumber: ({ children, ...props }) => {
          return (
            <td {...props}>
              <div className="flex size-[--cell-size] items-center justify-center text-center">
                {children}
              </div>
            </td>
          )
        },
        ...components,
      }}
      {...props}
    />
  )
}

function CalendarDayButton({
  className,
  day,
  modifiers,
  ...props
}: React.ComponentProps<typeof DayButton>) {
  const defaultClassNames = getDefaultClassNames()

  const ref = React.useRef<HTMLButtonElement>(null)
  React.useEffect(() => {
    if (modifiers.focused) ref.current?.focus()
  }, [modifiers.focused])

  return (
    <Button
      ref={ref}
      variant="ghost"
      size="icon"
      data-day={day.date.toLocaleDateString()}
      data-selected-single={
        modifiers.selected &&
        !modifiers.range_start &&
        !modifiers.range_end &&
        !modifiers.range_middle
      }
      data-range-start={modifiers.range_start}
      data-range-end={modifiers.range_end}
      data-range-middle={modifiers.range_middle}
      className={cn(
        'data-[selected-single=true]:bg-primary data-[selected-single=true]:text-primary-foreground data-[range-middle=true]:bg-accent data-[range-middle=true]:text-accent-foreground data-[range-start=true]:bg-primary data-[range-start=true]:text-primary-foreground data-[range-end=true]:bg-primary data-[range-end=true]:text-primary-foreground group-data-[focused=true]/day:border-ring group-data-[focused=true]/day:ring-ring/50 dark:hover:text-accent-foreground flex aspect-square w-full min-w-[--cell-size] flex-col gap-1 leading-none font-normal group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:ring-[3px] data-[range-end=true]:rounded-md data-[range-end=true]:rounded-r-md data-[range-middle=true]:rounded-none data-[range-start=true]:rounded-md data-[range-start=true]:rounded-l-md [&>span]:text-xs [&>span]:opacity-70',
        defaultClassNames.day,
        className
      )}
      {...props}
    />
  )
}

export { Calendar, CalendarDayButton }


--- FILE: components/ui/card.tsx ---
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }


--- FILE: components/ui/carousel.tsx ---
"use client"

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}


--- FILE: components/ui/chart.tsx ---
"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}


--- FILE: components/ui/checkbox.tsx ---
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }


--- FILE: components/ui/collapsible.tsx ---
"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }


--- FILE: components/ui/command.tsx ---
"use client"

import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({ children, ...props }: DialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}


--- FILE: components/ui/context-menu.tsx ---
"use client"

import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}


--- FILE: components/ui/dialog.tsx ---
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}


--- FILE: components/ui/drawer.tsx ---
"use client"

import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}


--- FILE: components/ui/dropdown-menu.tsx ---
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}


--- FILE: components/ui/form.tsx ---
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}


--- FILE: components/ui/hover-card.tsx ---
"use client"

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }


--- FILE: components/ui/input-otp.tsx ---
"use client"

import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }


--- FILE: components/ui/input.tsx ---
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }


--- FILE: components/ui/label.tsx ---
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }


--- FILE: components/ui/menubar.tsx ---
"use client"

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}


--- FILE: components/ui/navigation-menu.tsx ---
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}


--- FILE: components/ui/pagination.tsx ---
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}


--- FILE: components/ui/popover.tsx ---
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }


--- FILE: components/ui/progress.tsx ---
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }


--- FILE: components/ui/radio-group.tsx ---
"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }


--- FILE: components/ui/resizable.tsx ---
"use client"

import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }


--- FILE: components/ui/restaurant-card.tsx ---


--- FILE: components/ui/scroll-area.tsx ---
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }


--- FILE: components/ui/select.tsx ---
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}


--- FILE: components/ui/separator.tsx ---
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }


--- FILE: components/ui/sheet.tsx ---
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}


--- FILE: components/ui/sidebar.tsx ---
"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/components/ui/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}


--- FILE: components/ui/skeleton.tsx ---
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }


--- FILE: components/ui/slider.tsx ---
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }


--- FILE: components/ui/sonner.tsx ---
"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }


--- FILE: components/ui/switch.tsx ---
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }


--- FILE: components/ui/table.tsx ---
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}


--- FILE: components/ui/tabs.tsx ---
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }


--- FILE: components/ui/textarea.tsx ---
import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<"textarea">
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }


--- FILE: components/ui/toast.tsx ---
"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}


--- FILE: components/ui/toaster.tsx ---
"use client"

import { useToast } from "@/components/ui/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}


--- FILE: components/ui/toggle-group.tsx ---
"use client"

import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }


--- FILE: components/ui/toggle.tsx ---
"use client"

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3 min-w-10",
        sm: "h-9 px-2.5 min-w-9",
        lg: "h-11 px-5 min-w-11",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }


--- FILE: components/ui/tooltip.tsx ---
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }


--- FILE: components/ui/use-mobile.tsx ---
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}


--- FILE: components/ui/use-toast.ts ---
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }


--- FILE: lib/auth-context.tsx ---
"use client"

import { createContext, useContext, useEffect, useState } from "react"
import { useRouter } from "next/navigation"
import { User as SupabaseUser } from "@supabase/supabase-js"
import { createClient } from "./supabaseClient"  // üü¢ Use the new SSR client
import { type UserProfile } from "./database"

interface AuthContextType {
  user: SupabaseUser | null
  userProfile: UserProfile | null
  loading: boolean
  signOut: () => Promise<void>
  refreshUser: () => Promise<void>
}

const AuthContext = createContext<AuthContextType | undefined>(undefined)

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const router = useRouter()
  const [user, setUser] = useState<SupabaseUser | null>(null)
  const [userProfile, setUserProfile] = useState<UserProfile | null>(null)
  const [loading, setLoading] = useState(true)
  
  // Initialize supabase client for this component
  const supabase = createClient()

  const refreshUser = async () => {
    try {
      const { data: { user } } = await supabase.auth.getUser()
      setUser(user)
      
      if (user) {
        try {
          const { data: profile, error } = await supabase
            .from("user_profiles")
            .select("*")
            .eq("user_id", user.id)
            .maybeSingle()

          if (error) {
            console.error("Error fetching user profile:", error)
            
            // If profile doesn't exist, just set to null - profile creation should be server-side
            if (error.code === 'PGRST116' || error.message?.includes('no rows') || !profile) {
              console.log("üîÑ [AUTH CONTEXT] Profile not found - profile creation should happen server-side")
              setUserProfile(null)
            } else {
              setUserProfile(null)
            }
          } else {
            setUserProfile(profile)
          }
        } catch (profileError) {
          console.error("‚ùå [AUTH CONTEXT] Profile fetch error:", profileError)
          setUserProfile(null)
        }
      } else {
        setUserProfile(null)
      }
    } catch (error) {
      console.error("Error refreshing user:", error)
    } finally {
      setLoading(false)
    }
  }

useEffect(() => {
  refreshUser()

  const { data: { subscription } } = supabase.auth.onAuthStateChange(
    async (event: any, session: any) => {
      setLoading(true)
      setUser(session?.user ?? null)

      if (session?.user) {
        try {
          const { data: profile, error } = await supabase
            .from("user_profiles")
            .select("*")
            .eq("user_id", session.user.id)
            .maybeSingle()

          if (error) {
            console.error("‚ùå [AUTH STATE] Profile fetch error:", error)
            setUserProfile(null)
          } else {
            setUserProfile(profile)
          }
        } catch (profileError) {
          console.error("‚ùå [AUTH STATE] Profile query error:", profileError)
          setUserProfile(null)
        }
      } else {
        setUserProfile(null)
      }

      setLoading(false)
    }
  )

  return () => subscription.unsubscribe()
}, [supabase])

  const signOut = async () => {
    try {
      console.log("üîÑ [AUTH] Signing out...")
      
      // Clear Supabase session
      const { error } = await supabase.auth.signOut()
      if (error) {
        console.error("‚ùå [AUTH] Sign out error:", error)
        throw error
      }

      // Clear local state
      setUser(null)
      setUserProfile(null)
      
      // Clear any cached data
      localStorage.removeItem('supabase.auth.token')
      sessionStorage.clear()
      
      console.log("‚úÖ [AUTH] Signed out successfully")
      
      // Use Next.js router to navigate instead of hard redirect
      router.push("/")
      router.refresh()
    } catch (error) {
      console.error("‚ùå [AUTH] Sign out failed:", error)
      // Even if there's an error, clear local state and redirect
      setUser(null)
      setUserProfile(null)
      router.push("/")
      router.refresh()
    }
  }

  const value = {
    user,
    userProfile,
    loading,
    signOut,
    refreshUser,
  }

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>
}

export function useAuth() {
  const context = useContext(AuthContext)
  if (context === undefined) {
    throw new Error("useAuth must be used within an AuthProvider")
  }
  return context
}


--- FILE: lib/auth-schemas.ts ---
import { z } from "zod"

export const signUpSchema = z.object({
  email: z.string().email("Please enter a valid email address"),
  password: z
    .string()
    .min(8, "Password must be at least 8 characters")
    .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/, "Password must contain at least one uppercase letter, one lowercase letter, and one number"),
  firstName: z.string().min(1, "First name is required"),
  lastName: z.string().min(1, "Last name is required"),
  userType: z.enum(["customer", "business_owner"]),
  phone: z.string().optional(),
  intendedBusinessName: z.string().optional(),
})

export const customerSignUpSchema = signUpSchema.extend({
  userType: z.literal("customer"),
  phone: z.string().optional(),
})

export const businessOwnerSignUpSchema = signUpSchema.extend({
  userType: z.literal("business_owner"),
  phone: z
    .string()
    .min(1, "Phone number is required for business owners")
    .regex(/^\+65\s?\d{4}\s?\d{4}$/, "Please enter a valid Singapore phone number (+65 XXXX XXXX)"),
  intendedBusinessName: z.string().optional(),
})

export const signInSchema = z.object({
  email: z.string().email("Please enter a valid email address"),
  password: z.string().min(1, "Password is required"),
})

export const resetPasswordSchema = z.object({
  email: z.string().email("Please enter a valid email address"),
})

export type SignUpFormData = z.infer<typeof signUpSchema>
export type CustomerSignUpData = z.infer<typeof customerSignUpSchema>
export type BusinessOwnerSignUpData = z.infer<typeof businessOwnerSignUpSchema>
export type SignInFormData = z.infer<typeof signInSchema>
export type ResetPasswordData = z.infer<typeof resetPasswordSchema>


--- FILE: lib/database.ts ---
import { type SupabaseClient } from "@supabase/supabase-js"

// Remove global supabase client export - functions now accept client parameter
// export const supabase = createClient() // üî¥ REMOVED

// Database types
export interface UserProfile {
  id: string
  user_id: string  // References auth.users.id
  first_name: string
  last_name: string
  phone?: string
  user_type: "customer" | "business_owner" | "admin"
  intended_business_name?: string
  created_at: string
  updated_at: string
}

export interface Business {
  id: string
  owner_id: string  // References auth.users.id
  business_name: string
  slug: string
  description: string
  specialty?: string
  full_address: string
  district: string
  postal_code: string
  phone: string
  email: string
  price_range: "$" | "$$" | "$$$" | "$$$$"
  status: "pending" | "active" | "suspended" | "closed"
  instagram_handle?: string
  facebook_url?: string
  whatsapp_number?: string
  cover_image_url?: string
  created_at: string
  updated_at: string
}

export interface MenuItem {
  id: string
  business_id: string
  category_id?: string
  name: string
  description?: string
  price: number
  is_available: boolean
  image_url?: string
  display_order: number
  created_at: string
  updated_at: string
}

export interface Review {
  id: string
  business_id: string
  customer_id: string
  rating: number
  comment?: string
  status: "published" | "hidden" | "flagged"
  created_at: string
  updated_at: string
}

export interface Order {
  id: string
  order_number: string
  business_id: string
  customer_id: string
  customer_name: string
  customer_phone: string
  customer_email?: string
  total_amount: number
  status: "pending" | "confirmed" | "preparing" | "ready" | "completed" | "cancelled"
  notes?: string
  pickup_time?: string
  created_at: string
  updated_at: string
}

// Database helper functions
export async function getBusinesses(supabase: SupabaseClient, filters?: {
  district?: string
  cuisine?: string
  search?: string
  limit?: number
}) {
  let query = supabase
    .from("businesses")
    .select(`
      *,
      business_cuisines(cuisine_types(name)),
      reviews(rating),
      menu_items(id)
    `)
    .eq("status", "active")

  if (filters?.district) {
    query = query.eq("district", filters.district)
  }

  if (filters?.search) {
    query = query.or(`business_name.ilike.%${filters.search}%,description.ilike.%${filters.search}%`)
  }

  if (filters?.limit) {
    query = query.limit(filters.limit)
  }

  const { data, error } = await query.order("created_at", { ascending: false })

  if (error) throw error
  return data
}

export async function getBusinessBySlug(supabase: SupabaseClient, slug: string) {
  const { data, error } = await supabase
    .from("businesses")
    .select(`
      *,
      business_cuisines(cuisine_types(name)),
      business_hours(*),
      menu_categories(
        *,
        menu_items(*)
      ),
      reviews(
        *,
        users(first_name, last_name)
      ),
      business_images(*)
    `)
    .eq("slug", slug)
    .eq("status", "active")
    .single()

  if (error) throw error
  return data
}

export async function createBusinessView(supabase: SupabaseClient, businessId: string, viewerIp?: string, userAgent?: string) {
  const { error } = await supabase.from("business_views").insert({
    business_id: businessId,
    viewer_ip: viewerIp,
    user_agent: userAgent,
  })

  if (error) throw error
}

export async function getBusinessAnalytics(supabase: SupabaseClient, businessId: string) {
  // Get total views
  const { count: totalViews } = await supabase
    .from("business_views")
    .select("*", { count: "exact", head: true })
    .eq("business_id", businessId)

  // Get reviews stats
  const { data: reviewsData } = await supabase
    .from("reviews")
    .select("rating")
    .eq("business_id", businessId)
    .eq("status", "published")

  const averageRating = reviewsData?.length
    ? reviewsData.reduce((sum: number, review: any) => sum + review.rating, 0) / reviewsData.length
    : 0

  // Get orders count
  const { count: totalOrders } = await supabase
    .from("orders")
    .select("*", { count: "exact", head: true })
    .eq("business_id", businessId)

  return {
    totalViews: totalViews || 0,
    averageRating: Math.round(averageRating * 10) / 10,
    totalReviews: reviewsData?.length || 0,
    totalOrders: totalOrders || 0,
  }
}

// Authentication helper functions
export async function signUp(supabase: SupabaseClient, email: string, password: string, userData: {
  firstName: string
  lastName: string
  userType: "customer" | "business_owner"
  phone?: string
  intendedBusinessName?: string
}) {
  console.log("üîÑ [VERCEL LOG] signUp function called for:", email)
  
  // üö® DEBUG: Log which keys are being used
  console.log("üîç [VERCEL LOG] Environment check:", {
    hasAnonKey: !!process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
    hasServiceKey: !!process.env.SUPABASE_SERVICE_ROLE_KEY,
    anonKeyPrefix: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY?.substring(0, 20),
    siteUrl: process.env.NEXT_PUBLIC_SITE_URL
  })
  
  try {
    console.log("üìû [VERCEL LOG] Calling supabase.auth.signUp...")
    
    const { data, error } = await supabase.auth.signUp({
      email,
      password,
      options: {
        // üü¢ Use production URL for email verification redirects
        emailRedirectTo: `${process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000'}/auth/callback`,
        data: {
          first_name: userData.firstName,
          last_name: userData.lastName,
          user_type: userData.userType,
          phone: userData.phone,
          intended_business_name: userData.intendedBusinessName,
        }
      }
    })

    if (error) {
      console.error("‚ùå [VERCEL LOG] Supabase signup error:", {
        message: error.message,
        status: error.status,
        name: error.name
      })
      throw error
    }

    console.log("‚úÖ [VERCEL LOG] Supabase auth signup successful:", {
      userId: data.user?.id,
      userEmail: data.user?.email,
      emailConfirmed: data.user?.email_confirmed_at,
      sessionExists: !!data.session
    })

    // Create user profile after successful signup
    if (data.user) {
      console.log("üë§ [VERCEL LOG] Creating user profile for user:", data.user.id)
      
      const profileData = {
        user_id: data.user.id,
        first_name: userData.firstName,
        last_name: userData.lastName,
        user_type: userData.userType,
        phone: userData.phone ?? null,
        intended_business_name: userData.intendedBusinessName || null,
      }
      
      console.log("üìù [VERCEL LOG] Profile data to insert:", profileData)
      
      const { data: insertedProfile, error: profileError } = await supabase
        .from("user_profiles")
        .insert(profileData)
        .select()

      if (profileError) {
        console.error("‚ùå [VERCEL LOG] Error creating user profile:", {
          message: profileError.message || 'No message',
          code: profileError.code || 'No code',
          details: profileError.details || 'No details',
          hint: profileError.hint || 'No hint',
          originalError: JSON.stringify(profileError, null, 2)
        })
        // Don't throw here - user is created, profile creation can be retried
      } else {
        console.log("‚úÖ [VERCEL LOG] User profile created successfully:", insertedProfile)
      }
    } else {
      console.warn("‚ö†Ô∏è  [VERCEL LOG] No user returned from Supabase signup")
    }

    return data
  } catch (error) {
    console.error("üí• [VERCEL LOG] SignUp function error:", {
      message: error instanceof Error ? error.message : String(error),
      name: error instanceof Error ? error.name : 'Unknown',
      email: email // Include email for debugging
    })
    throw error
  }
}

export async function signIn(supabase: SupabaseClient, email: string, password: string) {
  try {
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password,
    })

    if (error) {
      console.error("Supabase signin error:", error)
      
      // Handle specific error cases
      if (error.message === "Invalid login credentials") {
        // Check if it's an unverified email issue
        throw new Error("Invalid email or password. If you just signed up, please check your email and verify your account first.")
      }
      
      if (error.message === "Email not confirmed") {
        throw new Error("Please check your email and click the verification link before signing in.")
      }
      
      throw error
    }

    return data
  } catch (error) {
    console.error("SignIn function error:", error)
    throw error
  }
}

export async function signOut(supabase: SupabaseClient) {
  const { error } = await supabase.auth.signOut()
  if (error) throw error
}

export async function resetPassword(supabase: SupabaseClient, email: string) {
  const { error } = await supabase.auth.resetPasswordForEmail(email)
  if (error) throw error
}

export async function getCurrentUser(supabase: SupabaseClient) {
  const { data: { user }, error } = await supabase.auth.getUser()
  if (error) throw error
  return user
}

export async function getUserProfile(supabase: SupabaseClient, userId: string) {
  const { data, error } = await supabase
    .from("user_profiles")
    .select("*")
    .eq("user_id", userId)
    .single()

  if (error) throw error
  return data
}

export async function checkEmailExists(supabase: SupabaseClient, email: string): Promise<UserProfile | null> {
  try {
    // Use Supabase Admin API to check if user exists by email
    // For now, we'll check the user_profiles table directly
    // This requires RLS to be properly configured
    const { data, error } = await supabase
      .from("user_profiles")
      .select("*")
      .limit(1)
      .maybeSingle()

    if (error) {
      console.error("Error checking email existence:", error)
      return null
    }
    
    // For production, we should implement a proper email check
    // For now, return null to allow signup process
    return null
  } catch (error) {
    console.error("Error in checkEmailExists:", error)
    return null
  }
}

export async function resendEmailConfirmation(supabase: SupabaseClient, email: string) {
  const { error } = await supabase.auth.resend({
    type: 'signup',
    email,
  })
  if (error) throw error
}


--- FILE: lib/supabase-api.ts ---
import { createClient as createSupabaseClient } from '@supabase/supabase-js'

const url = process.env.NEXT_PUBLIC_SUPABASE_URL!
const key = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!

export function createServerClientForApi() {
  return createSupabaseClient(url, key)
}


--- FILE: lib/supabase-server.ts ---
import { createClient as createSupabaseClient } from '@supabase/supabase-js'
import { NextRequest, NextResponse } from 'next/server'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!

// üî∂ Server client for server-side operations - simplified
export function createServerClientComponent() {
  return createSupabaseClient(supabaseUrl, supabaseAnonKey)
}

// üîß Server client for middleware - simplified
export function createServerClientMiddleware(
  request: NextRequest,
  response: NextResponse
) {
  return createSupabaseClient(supabaseUrl, supabaseAnonKey)
}

// üîí Admin client - SERVER-ONLY! 
// Only create this in server-side contexts where SUPABASE_SERVICE_ROLE_KEY is available
export function createSupabaseAdmin() {
  const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY
  
  if (!supabaseServiceKey) {
    throw new Error("SUPABASE_SERVICE_ROLE_KEY is required for admin operations")
  }
  
  return createSupabaseClient(supabaseUrl, supabaseServiceKey)
}


--- FILE: lib/supabaseClient.ts ---
import { createClient as createSupabaseClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!

if (!supabaseUrl || !supabaseAnonKey) {
  console.warn("Supabase environment variables NEXT_PUBLIC_SUPABASE_URL or NEXT_PUBLIC_SUPABASE_ANON_KEY are not set. Please check your .env.local file.")
}

// üü¢ Browser client for client-side operations
export function createClient() {
  return createSupabaseClient(supabaseUrl, supabaseAnonKey)
}


--- FILE: lib/utils.ts ---
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


--- FILE: supabase/.branches/_current_branch ---
main

--- FILE: supabase/.temp/cli-latest ---
v2.33.9

--- FILE: supabase/.temp/gotrue-version ---
v2.177.0

--- FILE: supabase/.temp/pooler-url ---
postgresql://postgres.mdknfufyrljmdtkmrarf:[YOUR-PASSWORD]@aws-0-us-east-1.pooler.supabase.com:6543/postgres

--- FILE: supabase/.temp/postgres-version ---
17.4.1.064

--- FILE: supabase/.temp/project-ref ---
mdknfufyrljmdtkmrarf

--- FILE: supabase/.temp/rest-version ---
v12.2.12

--- FILE: supabase/.temp/storage-version ---
custom-metadata

--- FILE: supabase/.vscode/extensions.json ---
{
  "recommendations": ["denoland.vscode-deno"]
}


--- FILE: supabase/.vscode/settings.json ---
{
  "deno.enablePaths": [
    "supabase/functions"
  ],
  "deno.lint": true,
  "deno.unstable": [
    "bare-node-builtins",
    "byonm",
    "sloppy-imports",
    "unsafe-proto",
    "webgpu",
    "broadcast-channel",
    "worker-options",
    "cron",
    "kv",
    "ffi",
    "fs",
    "http",
    "net"
  ],
  "[typescript]": {
    "editor.defaultFormatter": "denoland.vscode-deno"
  }
}


--- FILE: supabase/config.backup.toml ---
# Supabase Configuration File
# Generated: 2025-08-03
# Purpose: Address Supabase Security Advisor warnings

[api]
enabled = true
port = 54321
schemas = ["public", "storage", "graphql_public"]
extra_search_path = ["public", "extensions"]
max_rows = 1000

[db]
port = 54322
shadow_port = 54320
major_version = 15

[studio]
enabled = true
port = 54323
api_url = "http://localhost:54321"

[inbucket]
enabled = true
port = 54324
smtp_port = 54325
pop3_port = 54326

[storage]
enabled = true
file_size_limit = "50MiB"
[storage.image_transformation]
enabled = true

[auth]
enabled = true
site_url = "https://v0-singapore-cafe-websites.vercel.app"
additional_redirect_urls = ["https://v0-singapore-cafe-websites.vercel.app"]
jwt_expiry = 3600
refresh_token_rotation_enabled = true
security_update_password_require_reauthentication = true
security_captcha_enabled = false

# üîß Security Fixes for Supabase Security Advisor Warnings

# Fix: Auth OTP Long Expiry - Set to recommended 10 minutes (600 seconds)
[auth.sms]
autoconfirm = false
otp_exp = 600
otp_length = 6
provider = "twilio"
template = "Your code is {{ .Code }}"

[auth.email]
autoconfirm = false
# Fix: OTP expiry set to 10 minutes (600 seconds) instead of default 1 hour
otp_exp = 600
otp_length = 6

# Secure email templates
[auth.email.template.invite]
subject = "You have been invited"
content_path = "./supabase/templates/invite.html"

[auth.email.template.confirmation]
subject = "Confirm your signup"
content_path = "./supabase/templates/confirmation.html"

[auth.email.template.recovery]
subject = "Reset your password"
content_path = "./supabase/templates/recovery.html"

[auth.email.template.magic_link]
subject = "Your magic link"
content_path = "./supabase/templates/magic_link.html"

[auth.email.template.email_change]
subject = "Confirm your email change"
content_path = "./supabase/templates/email_change.html"

# Fix: Enable leaked password protection
[auth.password]
# Enable leaked password detection (fixes Security Advisor warning)
enable_signup = true
min_length = 8
# Enable leaked password protection for production
leaked_password_protection = true

# Social auth providers (disabled by default for security)
[auth.external.apple]
enabled = false

[auth.external.azure]
enabled = false

[auth.external.bitbucket]
enabled = false

[auth.external.discord]
enabled = false

[auth.external.facebook]
enabled = false

[auth.external.github]
enabled = false

[auth.external.gitlab]
enabled = false

[auth.external.google]
enabled = false

[auth.external.keycloak]
enabled = false

[auth.external.linkedin]
enabled = false

[auth.external.notion]
enabled = false

[auth.external.spotify]
enabled = false

[auth.external.slack]
enabled = false

[auth.external.twitch]
enabled = false

[auth.external.twitter]
enabled = false

[auth.external.workos]
enabled = false

[auth.external.zoom]
enabled = false

# Security settings
[auth.security]
# Enable additional security features
captcha_enabled = false
captcha_provider = "hcaptcha"
update_password_require_reauthentication = true

# Edge functions
[edge_runtime]
enabled = true
policy = "per_function"

[functions]
verify_jwt = false

# Analytics
[analytics]
enabled = false


--- FILE: supabase/config.production.toml ---
# For detailed configuration reference documentation, visit:
# https://supabase.com/docs/guides/local-development/cli/config
# A string used to distinguish different Supabase projects on the same host. Defaults to the
# working directory name when running `supabase init`.
project_id = "supabase"

[api]
enabled = true
# Port to use for the API URL.
port = 54321
# Schemas to expose in your API. Tables, views and stored procedures in this schema will get API
# endpoints. `public` and `graphql_public` schemas are included by default.
schemas = ["public", "graphql_public"]
# Extra schemas to add to the search_path of every request.
extra_search_path = ["public", "extensions"]
# The maximum number of rows returns from a view, table, or stored procedure. Limits payload size
# for accidental or malicious requests.
max_rows = 1000

[api.tls]
# Enable HTTPS endpoints locally using a self-signed certificate.
enabled = false

[db]
# Port to use for the local database URL.
port = 54322
# Port used by db diff command to initialize the shadow database.
shadow_port = 54320
# The database major version to use. This has to be the same as your remote database's. Run `SHOW
# server_version;` on the remote database to check.
major_version = 17

[db.pooler]
enabled = false
# Port to use for the local connection pooler.
port = 54329
# Specifies when a server connection can be reused by other clients.
# Configure one of the supported pooler modes: `transaction`, `session`.
pool_mode = "transaction"
# How many server connections to allow per user/database pair.
default_pool_size = 20
# Maximum number of client connections allowed.
max_client_conn = 100

# [db.vault]
# secret_key = "env(SECRET_VALUE)"

[db.migrations]
# If disabled, migrations will be skipped during a db push or reset.
enabled = true
# Specifies an ordered list of schema files that describe your database.
# Supports glob patterns relative to supabase directory: "./schemas/*.sql"
schema_paths = []

[db.seed]
# If enabled, seeds the database after migrations during a db reset.
enabled = true
# Specifies an ordered list of seed files to load during db reset.
# Supports glob patterns relative to supabase directory: "./seeds/*.sql"
sql_paths = ["./seed.sql"]

[db.network_restrictions]
# Enable management of network restrictions.
enabled = false
# List of IPv4 CIDR blocks allowed to connect to the database.
# Defaults to allow all IPv4 connections. Set empty array to block all IPs.
allowed_cidrs = ["0.0.0.0/0"]
# List of IPv6 CIDR blocks allowed to connect to the database.
# Defaults to allow all IPv6 connections. Set empty array to block all IPs.
allowed_cidrs_v6 = ["::/0"]

[realtime]
enabled = true
# Bind realtime via either IPv4 or IPv6. (default: IPv4)
# ip_version = "IPv6"
# The maximum length in bytes of HTTP request headers. (default: 4096)
# max_header_length = 4096

[studio]
enabled = true
# Port to use for Supabase Studio.
port = 54323
# External URL of the API server that frontend connects to.
api_url = "http://127.0.0.1"
# OpenAI API Key to use for Supabase AI in the Supabase Studio.
openai_api_key = "env(OPENAI_API_KEY)"

# Email testing server. Emails sent with the local dev setup are not actually sent - rather, they
# are monitored, and you can view the emails that would have been sent from the web interface.
[inbucket]
enabled = true
# Port to use for the email testing server web interface.
port = 54324
# Uncomment to expose additional ports for testing user applications that send emails.
# smtp_port = 54325
# pop3_port = 54326
# admin_email = "admin@email.com"
# sender_name = "Admin"

[storage]
enabled = true
# The maximum file size allowed (e.g. "5MB", "500KB").
file_size_limit = "50MiB"

# Image transformation API is available to Supabase Pro plan.
# [storage.image_transformation]
# enabled = true

# Uncomment to configure local storage buckets
# [storage.buckets.images]
# public = false
# file_size_limit = "50MiB"
# allowed_mime_types = ["image/png", "image/jpeg"]
# objects_path = "./images"

[auth]
enabled = true
# The base URL of your website. Used as an allow-list for redirects and for constructing URLs used
# in emails.
site_url = "http://127.0.0.1:3000"
# A list of *exact* URLs that auth providers are permitted to redirect to post authentication.
additional_redirect_urls = ["https://127.0.0.1:3000"]
# How long tokens are valid for, in seconds. Defaults to 3600 (1 hour), maximum 604,800 (1 week).
jwt_expiry = 3600
# Path to JWT signing key. DO NOT commit your signing keys file to git.
# signing_keys_path = "./signing_keys.json"
# If disabled, the refresh token will never expire.
enable_refresh_token_rotation = true
# Allows refresh tokens to be reused after expiry, up to the specified interval in seconds.
# Requires enable_refresh_token_rotation = true.
refresh_token_reuse_interval = 10
# Allow/disallow new user signups to your project.
enable_signup = true
# Allow/disallow anonymous sign-ins to your project.
enable_anonymous_sign_ins = false
# Allow/disallow testing manual linking of accounts
enable_manual_linking = false
# Passwords shorter than this value will be rejected as weak. Minimum 6, recommended 8 or more.
minimum_password_length = 6
# Passwords that do not meet the following requirements will be rejected as weak. Supported values
# are: `letters_digits`, `lower_upper_letters_digits`, `lower_upper_letters_digits_symbols`
password_requirements = ""

[auth.rate_limit]
# Number of emails that can be sent per hour. Requires auth.email.smtp to be enabled.
email_sent = 2
# Number of SMS messages that can be sent per hour. Requires auth.sms to be enabled.
sms_sent = 30
# Number of anonymous sign-ins that can be made per hour per IP address. Requires enable_anonymous_sign_ins = true.
anonymous_users = 30
# Number of sessions that can be refreshed in a 5 minute interval per IP address.
token_refresh = 150
# Number of sign up and sign-in requests that can be made in a 5 minute interval per IP address (excludes anonymous users).
sign_in_sign_ups = 30
# Number of OTP / Magic link verifications that can be made in a 5 minute interval per IP address.
token_verifications = 30
# Number of Web3 logins that can be made in a 5 minute interval per IP address.
web3 = 30

# Configure one of the supported captcha providers: `hcaptcha`, `turnstile`.
# [auth.captcha]
# enabled = true
# provider = "hcaptcha"
# secret = ""

[auth.email]
# Allow/disallow new user signups via email to your project.
enable_signup = true
# If enabled, a user will be required to confirm any email change on both the old, and new email
# addresses. If disabled, only the new email is required to confirm.
double_confirm_changes = true
# If enabled, users need to confirm their email address before signing in.
enable_confirmations = false
# If enabled, users will need to reauthenticate or have logged in recently to change their password.
secure_password_change = false
# Controls the minimum amount of time that must pass before sending another signup confirmation or password reset email.
max_frequency = "1s"
# Number of characters used in the email OTP.
otp_length = 6
# Number of seconds before the email OTP expires (defaults to 1 hour).
otp_expiry = 3600

# Use a production-ready SMTP server
# [auth.email.smtp]
# enabled = true
# host = "smtp.sendgrid.net"
# port = 587
# user = "apikey"
# pass = "env(SENDGRID_API_KEY)"
# admin_email = "admin@email.com"
# sender_name = "Admin"

# Uncomment to customize email template
# [auth.email.template.invite]
# subject = "You have been invited"
# content_path = "./supabase/templates/invite.html"

[auth.sms]
# Allow/disallow new user signups via SMS to your project.
enable_signup = false
# If enabled, users need to confirm their phone number before signing in.
enable_confirmations = false
# Template for sending OTP to users
template = "Your code is {{ .Code }}"
# Controls the minimum amount of time that must pass before sending another sms otp.
max_frequency = "5s"

# Use pre-defined map of phone number to OTP for testing.
# [auth.sms.test_otp]
# 4152127777 = "123456"

# Configure logged in session timeouts.
# [auth.sessions]
# Force log out after the specified duration.
# timebox = "24h"
# Force log out if the user has been inactive longer than the specified duration.
# inactivity_timeout = "8h"

# This hook runs before a new user is created and allows developers to reject the request based on the incoming user object.
# [auth.hook.before_user_created]
# enabled = true
# uri = "pg-functions://postgres/auth/before-user-created-hook"

# This hook runs before a token is issued and allows you to add additional claims based on the authentication method used.
# [auth.hook.custom_access_token]
# enabled = true
# uri = "pg-functions://<database>/<schema>/<hook_name>"

# Configure one of the supported SMS providers: `twilio`, `twilio_verify`, `messagebird`, `textlocal`, `vonage`.
[auth.sms.twilio]
enabled = false
account_sid = ""
message_service_sid = ""
# DO NOT commit your Twilio auth token to git. Use environment variable substitution instead:
auth_token = "env(SUPABASE_AUTH_SMS_TWILIO_AUTH_TOKEN)"

# Multi-factor-authentication is available to Supabase Pro plan.
[auth.mfa]
# Control how many MFA factors can be enrolled at once per user.
max_enrolled_factors = 10

# Control MFA via App Authenticator (TOTP)
[auth.mfa.totp]
enroll_enabled = false
verify_enabled = false

# Configure MFA via Phone Messaging
[auth.mfa.phone]
enroll_enabled = false
verify_enabled = false
otp_length = 6
template = "Your code is {{ .Code }}"
max_frequency = "5s"

# Configure MFA via WebAuthn
# [auth.mfa.web_authn]
# enroll_enabled = true
# verify_enabled = true

# Use an external OAuth provider. The full list of providers are: `apple`, `azure`, `bitbucket`,
# `discord`, `facebook`, `github`, `gitlab`, `google`, `keycloak`, `linkedin_oidc`, `notion`, `twitch`,
# `twitter`, `slack`, `spotify`, `workos`, `zoom`.
[auth.external.apple]
enabled = false
client_id = ""
# DO NOT commit your OAuth provider secret to git. Use environment variable substitution instead:
secret = "env(SUPABASE_AUTH_EXTERNAL_APPLE_SECRET)"
# Overrides the default auth redirectUrl.
redirect_uri = ""
# Overrides the default auth provider URL. Used to support self-hosted gitlab, single-tenant Azure,
# or any other third-party OIDC providers.
url = ""
# If enabled, the nonce check will be skipped. Required for local sign in with Google auth.
skip_nonce_check = false

# Allow Solana wallet holders to sign in to your project via the Sign in with Solana (SIWS, EIP-4361) standard.
# You can configure "web3" rate limit in the [auth.rate_limit] section and set up [auth.captcha] if self-hosting.
[auth.web3.solana]
enabled = false

# Use Firebase Auth as a third-party provider alongside Supabase Auth.
[auth.third_party.firebase]
enabled = false
# project_id = "my-firebase-project"

# Use Auth0 as a third-party provider alongside Supabase Auth.
[auth.third_party.auth0]
enabled = false
# tenant = "my-auth0-tenant"
# tenant_region = "us"

# Use AWS Cognito (Amplify) as a third-party provider alongside Supabase Auth.
[auth.third_party.aws_cognito]
enabled = false
# user_pool_id = "my-user-pool-id"
# user_pool_region = "us-east-1"

# Use Clerk as a third-party provider alongside Supabase Auth.
[auth.third_party.clerk]
enabled = false
# Obtain from https://clerk.com/setup/supabase
# domain = "example.clerk.accounts.dev"

[edge_runtime]
enabled = true
# Configure one of the supported request policies: `oneshot`, `per_worker`.
# Use `oneshot` for hot reload, or `per_worker` for load testing.
policy = "oneshot"
# Port to attach the Chrome inspector for debugging edge functions.
inspector_port = 8083
# The Deno major version to use.
deno_version = 1

# [edge_runtime.secrets]
# secret_key = "env(SECRET_VALUE)"

[analytics]
enabled = true
port = 54327
# Configure one of the supported backends: `postgres`, `bigquery`.
backend = "postgres"

# Experimental features may be deprecated any time
[experimental]
# Configures Postgres storage engine to use OrioleDB (S3)
orioledb_version = ""
# Configures S3 bucket URL, eg. <bucket_name>.s3-<region>.amazonaws.com
s3_host = "env(S3_HOST)"
# Configures S3 bucket region, eg. us-east-1
s3_region = "env(S3_REGION)"
# Configures AWS_ACCESS_KEY_ID for S3 bucket
s3_access_key = "env(S3_ACCESS_KEY)"
# Configures AWS_SECRET_ACCESS_KEY for S3 bucket
s3_secret_key = "env(S3_SECRET_KEY)"


--- FILE: supabase/config.toml ---
# For detailed configuration reference documentation, visit:
# https://supabase.com/docs/guides/local-development/cli/config
# A string used to distinguish different Supabase projects on the same host. Defaults to the
# working directory name when running `supabase init`.
project_id = "supabase"

[api]
enabled = true
# Port to use for the API URL.
port = 54321
# Schemas to expose in your API. Tables, views and stored procedures in this schema will get API
# endpoints. `public` and `graphql_public` schemas are included by default.
schemas = ["public", "graphql_public"]
# Extra schemas to add to the search_path of every request.
extra_search_path = ["public", "extensions"]
# The maximum number of rows returns from a view, table, or stored procedure. Limits payload size
# for accidental or malicious requests.
max_rows = 1000

[api.tls]
# Enable HTTPS endpoints locally using a self-signed certificate.
enabled = false

[db]
# Port to use for the local database URL.
port = 54322
# Port used by db diff command to initialize the shadow database.
shadow_port = 54320
# The database major version to use. This has to be the same as your remote database's. Run `SHOW
# server_version;` on the remote database to check.
major_version = 17

[db.pooler]
enabled = false
# Port to use for the local connection pooler.
port = 54329
# Specifies when a server connection can be reused by other clients.
# Configure one of the supported pooler modes: `transaction`, `session`.
pool_mode = "transaction"
# How many server connections to allow per user/database pair.
default_pool_size = 20
# Maximum number of client connections allowed.
max_client_conn = 100

# [db.vault]
# secret_key = "env(SECRET_VALUE)"

[db.migrations]
# If disabled, migrations will be skipped during a db push or reset.
enabled = true
# Specifies an ordered list of schema files that describe your database.
# Supports glob patterns relative to supabase directory: "./schemas/*.sql"
schema_paths = []

[db.seed]
# If enabled, seeds the database after migrations during a db reset.
enabled = true
# Specifies an ordered list of seed files to load during db reset.
# Supports glob patterns relative to supabase directory: "./seeds/*.sql"
sql_paths = ["./seed.sql"]

[db.network_restrictions]
# Enable management of network restrictions.
enabled = false
# List of IPv4 CIDR blocks allowed to connect to the database.
# Defaults to allow all IPv4 connections. Set empty array to block all IPs.
allowed_cidrs = ["0.0.0.0/0"]
# List of IPv6 CIDR blocks allowed to connect to the database.
# Defaults to allow all IPv6 connections. Set empty array to block all IPs.
allowed_cidrs_v6 = ["::/0"]

[realtime]
enabled = true
# Bind realtime via either IPv4 or IPv6. (default: IPv4)
# ip_version = "IPv6"
# The maximum length in bytes of HTTP request headers. (default: 4096)
# max_header_length = 4096

[studio]
enabled = true
# Port to use for Supabase Studio.
port = 54323
# External URL of the API server that frontend connects to.
api_url = "http://127.0.0.1"
# OpenAI API Key to use for Supabase AI in the Supabase Studio.
openai_api_key = "env(OPENAI_API_KEY)"

# Email testing server. Emails sent with the local dev setup are not actually sent - rather, they
# are monitored, and you can view the emails that would have been sent from the web interface.
[inbucket]
enabled = true
# Port to use for the email testing server web interface.
port = 54324
# Uncomment to expose additional ports for testing user applications that send emails.
# smtp_port = 54325
# pop3_port = 54326
# admin_email = "admin@email.com"
# sender_name = "Admin"

[storage]
enabled = true
# The maximum file size allowed (e.g. "5MB", "500KB").
file_size_limit = "50MiB"

# Image transformation API is available to Supabase Pro plan.
# [storage.image_transformation]
# enabled = true

# Uncomment to configure local storage buckets
# [storage.buckets.images]
# public = false
# file_size_limit = "50MiB"
# allowed_mime_types = ["image/png", "image/jpeg"]
# objects_path = "./images"

[auth]
enabled = true
# The base URL of your website. Used as an allow-list for redirects and for constructing URLs used
# in emails.
site_url = "http://127.0.0.1:3000"
# A list of *exact* URLs that auth providers are permitted to redirect to post authentication.
additional_redirect_urls = ["https://127.0.0.1:3000"]
# How long tokens are valid for, in seconds. Defaults to 3600 (1 hour), maximum 604,800 (1 week).
jwt_expiry = 3600
# Path to JWT signing key. DO NOT commit your signing keys file to git.
# signing_keys_path = "./signing_keys.json"
# If disabled, the refresh token will never expire.
enable_refresh_token_rotation = true
# Allows refresh tokens to be reused after expiry, up to the specified interval in seconds.
# Requires enable_refresh_token_rotation = true.
refresh_token_reuse_interval = 10
# Allow/disallow new user signups to your project.
enable_signup = true
# Allow/disallow anonymous sign-ins to your project.
enable_anonymous_sign_ins = false
# Allow/disallow testing manual linking of accounts
enable_manual_linking = false
# Passwords shorter than this value will be rejected as weak. Minimum 6, recommended 8 or more.
minimum_password_length = 6
# Passwords that do not meet the following requirements will be rejected as weak. Supported values
# are: `letters_digits`, `lower_upper_letters_digits`, `lower_upper_letters_digits_symbols`
password_requirements = ""

[auth.rate_limit]
# Number of emails that can be sent per hour. Requires auth.email.smtp to be enabled.
email_sent = 2
# Number of SMS messages that can be sent per hour. Requires auth.sms to be enabled.
sms_sent = 30
# Number of anonymous sign-ins that can be made per hour per IP address. Requires enable_anonymous_sign_ins = true.
anonymous_users = 30
# Number of sessions that can be refreshed in a 5 minute interval per IP address.
token_refresh = 150
# Number of sign up and sign-in requests that can be made in a 5 minute interval per IP address (excludes anonymous users).
sign_in_sign_ups = 30
# Number of OTP / Magic link verifications that can be made in a 5 minute interval per IP address.
token_verifications = 30
# Number of Web3 logins that can be made in a 5 minute interval per IP address.
web3 = 30

# Configure one of the supported captcha providers: `hcaptcha`, `turnstile`.
# [auth.captcha]
# enabled = true
# provider = "hcaptcha"
# secret = ""

[auth.email]
# Allow/disallow new user signups via email to your project.
enable_signup = true
# If enabled, a user will be required to confirm any email change on both the old, and new email
# addresses. If disabled, only the new email is required to confirm.
double_confirm_changes = true
# If enabled, users need to confirm their email address before signing in.
enable_confirmations = false
# If enabled, users will need to reauthenticate or have logged in recently to change their password.
secure_password_change = false
# Controls the minimum amount of time that must pass before sending another signup confirmation or password reset email.
max_frequency = "1s"
# Number of characters used in the email OTP.
otp_length = 6
# Number of seconds before the email OTP expires (defaults to 1 hour).
otp_expiry = 3600

# Use a production-ready SMTP server
# [auth.email.smtp]
# enabled = true
# host = "smtp.sendgrid.net"
# port = 587
# user = "apikey"
# pass = "env(SENDGRID_API_KEY)"
# admin_email = "admin@email.com"
# sender_name = "Admin"

# Uncomment to customize email template
# [auth.email.template.invite]
# subject = "You have been invited"
# content_path = "./supabase/templates/invite.html"

[auth.sms]
# Allow/disallow new user signups via SMS to your project.
enable_signup = false
# If enabled, users need to confirm their phone number before signing in.
enable_confirmations = false
# Template for sending OTP to users
template = "Your code is {{ .Code }}"
# Controls the minimum amount of time that must pass before sending another sms otp.
max_frequency = "5s"

# Use pre-defined map of phone number to OTP for testing.
# [auth.sms.test_otp]
# 4152127777 = "123456"

# Configure logged in session timeouts.
# [auth.sessions]
# Force log out after the specified duration.
# timebox = "24h"
# Force log out if the user has been inactive longer than the specified duration.
# inactivity_timeout = "8h"

# This hook runs before a new user is created and allows developers to reject the request based on the incoming user object.
# [auth.hook.before_user_created]
# enabled = true
# uri = "pg-functions://postgres/auth/before-user-created-hook"

# This hook runs before a token is issued and allows you to add additional claims based on the authentication method used.
# [auth.hook.custom_access_token]
# enabled = true
# uri = "pg-functions://<database>/<schema>/<hook_name>"

# Configure one of the supported SMS providers: `twilio`, `twilio_verify`, `messagebird`, `textlocal`, `vonage`.
[auth.sms.twilio]
enabled = false
account_sid = ""
message_service_sid = ""
# DO NOT commit your Twilio auth token to git. Use environment variable substitution instead:
auth_token = "env(SUPABASE_AUTH_SMS_TWILIO_AUTH_TOKEN)"

# Multi-factor-authentication is available to Supabase Pro plan.
[auth.mfa]
# Control how many MFA factors can be enrolled at once per user.
max_enrolled_factors = 10

# Control MFA via App Authenticator (TOTP)
[auth.mfa.totp]
enroll_enabled = false
verify_enabled = false

# Configure MFA via Phone Messaging
[auth.mfa.phone]
enroll_enabled = false
verify_enabled = false
otp_length = 6
template = "Your code is {{ .Code }}"
max_frequency = "5s"

# Configure MFA via WebAuthn
# [auth.mfa.web_authn]
# enroll_enabled = true
# verify_enabled = true

# Use an external OAuth provider. The full list of providers are: `apple`, `azure`, `bitbucket`,
# `discord`, `facebook`, `github`, `gitlab`, `google`, `keycloak`, `linkedin_oidc`, `notion`, `twitch`,
# `twitter`, `slack`, `spotify`, `workos`, `zoom`.
[auth.external.apple]
enabled = false
client_id = ""
# DO NOT commit your OAuth provider secret to git. Use environment variable substitution instead:
secret = "env(SUPABASE_AUTH_EXTERNAL_APPLE_SECRET)"
# Overrides the default auth redirectUrl.
redirect_uri = ""
# Overrides the default auth provider URL. Used to support self-hosted gitlab, single-tenant Azure,
# or any other third-party OIDC providers.
url = ""
# If enabled, the nonce check will be skipped. Required for local sign in with Google auth.
skip_nonce_check = false

# Allow Solana wallet holders to sign in to your project via the Sign in with Solana (SIWS, EIP-4361) standard.
# You can configure "web3" rate limit in the [auth.rate_limit] section and set up [auth.captcha] if self-hosting.
[auth.web3.solana]
enabled = false

# Use Firebase Auth as a third-party provider alongside Supabase Auth.
[auth.third_party.firebase]
enabled = false
# project_id = "my-firebase-project"

# Use Auth0 as a third-party provider alongside Supabase Auth.
[auth.third_party.auth0]
enabled = false
# tenant = "my-auth0-tenant"
# tenant_region = "us"

# Use AWS Cognito (Amplify) as a third-party provider alongside Supabase Auth.
[auth.third_party.aws_cognito]
enabled = false
# user_pool_id = "my-user-pool-id"
# user_pool_region = "us-east-1"

# Use Clerk as a third-party provider alongside Supabase Auth.
[auth.third_party.clerk]
enabled = false
# Obtain from https://clerk.com/setup/supabase
# domain = "example.clerk.accounts.dev"

[edge_runtime]
enabled = true
# Configure one of the supported request policies: `oneshot`, `per_worker`.
# Use `oneshot` for hot reload, or `per_worker` for load testing.
policy = "oneshot"
# Port to attach the Chrome inspector for debugging edge functions.
inspector_port = 8083
# The Deno major version to use.
deno_version = 1

# [edge_runtime.secrets]
# secret_key = "env(SECRET_VALUE)"

[analytics]
enabled = true
port = 54327
# Configure one of the supported backends: `postgres`, `bigquery`.
backend = "postgres"

# Experimental features may be deprecated any time
[experimental]
# Configures Postgres storage engine to use OrioleDB (S3)
orioledb_version = ""
# Configures S3 bucket URL, eg. <bucket_name>.s3-<region>.amazonaws.com
s3_host = "env(S3_HOST)"
# Configures S3 bucket region, eg. us-east-1
s3_region = "env(S3_REGION)"
# Configures AWS_ACCESS_KEY_ID for S3 bucket
s3_access_key = "env(S3_ACCESS_KEY)"
# Configures AWS_SECRET_ACCESS_KEY for S3 bucket
s3_secret_key = "env(S3_SECRET_KEY)"


--- FILE: supabase/migrations/20250729175737_init-schema.sql ---
-- Cleanup old triggers and functions
DROP TRIGGER IF EXISTS update_user_profiles_updated_at ON user_profiles;
DROP TRIGGER IF EXISTS update_businesses_updated_at ON businesses;
DROP TRIGGER IF EXISTS update_menu_items_updated_at ON menu_items;
DROP TRIGGER IF EXISTS update_reviews_updated_at ON reviews;
DROP TRIGGER IF EXISTS update_orders_updated_at ON orders;

DROP FUNCTION IF EXISTS update_updated_at_column();

-- Drop all existing tables in reverse dependency order
DROP TABLE IF EXISTS order_items CASCADE;
DROP TABLE IF EXISTS orders CASCADE;
DROP TABLE IF EXISTS reviews CASCADE;
DROP TABLE IF EXISTS business_images CASCADE;
DROP TABLE IF EXISTS menu_items CASCADE;
DROP TABLE IF EXISTS menu_categories CASCADE;
DROP TABLE IF EXISTS business_hours CASCADE;
DROP TABLE IF EXISTS business_cuisines CASCADE;
DROP TABLE IF EXISTS cuisine_types CASCADE;
DROP TABLE IF EXISTS business_views CASCADE;
DROP TABLE IF EXISTS businesses CASCADE;
DROP TABLE IF EXISTS user_profiles CASCADE;


-- Create the main database tables for the Singapore cafe marketplace

-- User profiles table (extends Supabase auth.users)
CREATE TABLE user_profiles (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    phone VARCHAR(20),
    user_type VARCHAR(20) NOT NULL CHECK (user_type IN ('customer', 'business_owner', 'admin')),
    intended_business_name VARCHAR(200),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(user_id)
);

-- Business profiles table
CREATE TABLE businesses (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    owner_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    business_name VARCHAR(200) NOT NULL,
    slug VARCHAR(200) UNIQUE NOT NULL,
    description TEXT NOT NULL,
    specialty VARCHAR(300),
    full_address TEXT NOT NULL,
    district VARCHAR(50) NOT NULL,
    postal_code VARCHAR(10) NOT NULL,
    phone VARCHAR(20) NOT NULL,
    email VARCHAR(255) NOT NULL,
    price_range VARCHAR(10) NOT NULL CHECK (price_range IN ('$', '$$', '$$$', '$$$$')),
    status VARCHAR(20) NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'active', 'suspended', 'closed')),
    instagram_handle VARCHAR(100),
    facebook_url VARCHAR(300),
    whatsapp_number VARCHAR(20),
    cover_image_url TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Business cuisine types (many-to-many relationship)
CREATE TABLE cuisine_types (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TABLE business_cuisines (
    business_id UUID NOT NULL REFERENCES businesses(id) ON DELETE CASCADE,
    cuisine_id UUID NOT NULL REFERENCES cuisine_types(id) ON DELETE CASCADE,
    PRIMARY KEY (business_id, cuisine_id)
);

-- Business operating hours
CREATE TABLE business_hours (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    business_id UUID NOT NULL REFERENCES businesses(id) ON DELETE CASCADE,
    day_of_week INTEGER NOT NULL CHECK (day_of_week >= 0 AND day_of_week <= 6), -- 0 = Sunday, 6 = Saturday
    is_open BOOLEAN NOT NULL DEFAULT false,
    open_time TIME,
    close_time TIME,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Menu categories
CREATE TABLE menu_categories (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    business_id UUID NOT NULL REFERENCES businesses(id) ON DELETE CASCADE,
    name VARCHAR(100) NOT NULL,
    display_order INTEGER NOT NULL DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Menu items
CREATE TABLE menu_items (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    business_id UUID NOT NULL REFERENCES businesses(id) ON DELETE CASCADE,
    category_id UUID REFERENCES menu_categories(id) ON DELETE SET NULL,
    name VARCHAR(200) NOT NULL,
    description TEXT,
    price DECIMAL(10,2) NOT NULL,
    is_available BOOLEAN NOT NULL DEFAULT true,
    image_url TEXT,
    display_order INTEGER NOT NULL DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Business images/gallery
CREATE TABLE business_images (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    business_id UUID NOT NULL REFERENCES businesses(id) ON DELETE CASCADE,
    image_url TEXT NOT NULL,
    alt_text VARCHAR(200),
    is_cover BOOLEAN NOT NULL DEFAULT false,
    display_order INTEGER NOT NULL DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Reviews and ratings
CREATE TABLE reviews (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    business_id UUID NOT NULL REFERENCES businesses(id) ON DELETE CASCADE,
    customer_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    rating INTEGER NOT NULL CHECK (rating >= 1 AND rating <= 5),
    comment TEXT,
    status VARCHAR(20) NOT NULL DEFAULT 'published' CHECK (status IN ('published', 'hidden', 'flagged')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(business_id, customer_id) -- One review per customer per business
);

-- Orders table
CREATE TABLE orders (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    order_number VARCHAR(20) UNIQUE NOT NULL,
    business_id UUID NOT NULL REFERENCES businesses(id) ON DELETE CASCADE,
    customer_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    customer_name VARCHAR(200) NOT NULL,
    customer_phone VARCHAR(20) NOT NULL,
    customer_email VARCHAR(255),
    total_amount DECIMAL(10,2) NOT NULL,
    status VARCHAR(20) NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'confirmed', 'preparing', 'ready', 'completed', 'cancelled')),
    notes TEXT,
    pickup_time TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Order items
CREATE TABLE order_items (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    order_id UUID NOT NULL REFERENCES orders(id) ON DELETE CASCADE,
    menu_item_id UUID NOT NULL REFERENCES menu_items(id),
    item_name VARCHAR(200) NOT NULL, -- Store name at time of order
    item_price DECIMAL(10,2) NOT NULL, -- Store price at time of order
    quantity INTEGER NOT NULL DEFAULT 1,
    subtotal DECIMAL(10,2) NOT NULL,
    special_instructions TEXT
);

-- Business analytics/stats
CREATE TABLE business_views (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    business_id UUID NOT NULL REFERENCES businesses(id) ON DELETE CASCADE,
    viewer_ip VARCHAR(45), -- Store IP for basic analytics
    user_agent TEXT,
    viewed_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create indexes for better performance
CREATE INDEX idx_user_profiles_user_id ON user_profiles(user_id);
CREATE INDEX idx_businesses_status ON businesses(status);
CREATE INDEX idx_businesses_district ON businesses(district);
CREATE INDEX idx_businesses_created_at ON businesses(created_at);
CREATE INDEX idx_menu_items_business_id ON menu_items(business_id);
CREATE INDEX idx_reviews_business_id ON reviews(business_id);
CREATE INDEX idx_reviews_rating ON reviews(rating);
CREATE INDEX idx_orders_business_id ON orders(business_id);
CREATE INDEX idx_orders_customer_id ON orders(customer_id);
CREATE INDEX idx_orders_status ON orders(status);
CREATE INDEX idx_business_views_business_id ON business_views(business_id);
CREATE INDEX idx_business_views_viewed_at ON business_views(viewed_at);

-- Create a function to update the updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create triggers to automatically update updated_at
CREATE TRIGGER update_user_profiles_updated_at BEFORE UPDATE ON user_profiles FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_businesses_updated_at BEFORE UPDATE ON businesses FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_menu_items_updated_at BEFORE UPDATE ON menu_items FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_reviews_updated_at BEFORE UPDATE ON reviews FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_orders_updated_at BEFORE UPDATE ON orders FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();


--- FILE: supabase/migrations/20250803101500_enable_rls_security.sql ---
-- ============================================================================
-- RLS Security Migration (clean, safe replacement)
-- Addresses Supabase Security Advisor Issues
-- Date: 2025-08-03
-- ============================================================================

-- 0. Helper functions (placed in public to avoid schema permission issues)
CREATE OR REPLACE FUNCTION public.is_admin()
RETURNS BOOLEAN
SECURITY DEFINER
SET search_path = public, pg_temp
LANGUAGE plpgsql
AS $$
BEGIN
    RETURN EXISTS (
        SELECT 1 FROM user_profiles
        WHERE user_id = auth.uid() AND user_type = 'admin'
    );
END;
$$;

CREATE OR REPLACE FUNCTION public.is_business_owner()
RETURNS BOOLEAN
SECURITY DEFINER
SET search_path = public, pg_temp
LANGUAGE plpgsql
AS $$
BEGIN
    RETURN EXISTS (
        SELECT 1 FROM user_profiles
        WHERE user_id = auth.uid() AND user_type = 'business_owner'
    );
END;
$$;

CREATE OR REPLACE FUNCTION public.owns_business(business_id UUID)
RETURNS BOOLEAN
SECURITY DEFINER
SET search_path = public, pg_temp
LANGUAGE plpgsql
AS $$
BEGIN
    RETURN EXISTS (
        SELECT 1 FROM businesses
        WHERE id = business_id AND owner_id = auth.uid()
    );
END;
$$;

-- 1. Fix the function search path vulnerability by replacing it in-place
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER
SECURITY DEFINER
SET search_path = public, pg_temp
LANGUAGE plpgsql
AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$;

COMMENT ON FUNCTION update_updated_at_column() IS 'Securely updates the updated_at timestamp with fixed search_path';

-- 2. Enable Row Level Security (RLS) on all relevant tables
ALTER TABLE user_profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE businesses ENABLE ROW LEVEL SECURITY;
ALTER TABLE business_cuisines ENABLE ROW LEVEL SECURITY;
ALTER TABLE cuisine_types ENABLE ROW LEVEL SECURITY;
ALTER TABLE business_hours ENABLE ROW LEVEL SECURITY;
ALTER TABLE menu_categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE menu_items ENABLE ROW LEVEL SECURITY;
ALTER TABLE business_images ENABLE ROW LEVEL SECURITY;
ALTER TABLE reviews ENABLE ROW LEVEL SECURITY;
ALTER TABLE orders ENABLE ROW LEVEL SECURITY;
ALTER TABLE order_items ENABLE ROW LEVEL SECURITY;
ALTER TABLE business_views ENABLE ROW LEVEL SECURITY;

-- 3. Policies for user_profiles
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'user_profiles' AND p.polname = 'users_can_view_their_own_profile'
    ) THEN
        EXECUTE format($f$
            CREATE POLICY "users_can_view_their_own_profile" ON user_profiles
                FOR SELECT USING (auth.uid() = user_id)
        $f$);
    END IF;
END;
$$;

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'user_profiles' AND p.polname = 'users_can_insert_their_own_profile'
    ) THEN
        EXECUTE format($f$
            CREATE POLICY "users_can_insert_their_own_profile" ON user_profiles
                FOR INSERT WITH CHECK (auth.uid() = user_id)
        $f$);
    END IF;
END;
$$;

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'user_profiles' AND p.polname = 'users_can_update_their_own_profile'
    ) THEN
        EXECUTE format($f$
            CREATE POLICY "users_can_update_their_own_profile" ON user_profiles
                FOR UPDATE USING (auth.uid() = user_id)
        $f$);
    END IF;
END;
$$;

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'user_profiles' AND p.polname = 'admins_can_view_all_profiles'
    ) THEN
        EXECUTE format($f$
            CREATE POLICY "admins_can_view_all_profiles" ON user_profiles
                FOR SELECT USING (public.is_admin())
        $f$);
    END IF;
END;
$$;

-- 4. Policies for businesses
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'businesses' AND p.polname = 'public_can_view_active_businesses'
    ) THEN
        EXECUTE format($f$
            CREATE POLICY "public_can_view_active_businesses" ON businesses
                FOR SELECT USING (status = 'active')
        $f$);
    END IF;
END;
$$;

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'businesses' AND p.polname = 'owners_can_view_their_businesses'
    ) THEN
        EXECUTE format($f$
            CREATE POLICY "owners_can_view_their_businesses" ON businesses
                FOR SELECT USING (auth.uid() = owner_id)
        $f$);
    END IF;
END;
$$;

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'businesses' AND p.polname = 'owners_can_insert_their_businesses'
    ) THEN
        EXECUTE format($f$
            CREATE POLICY "owners_can_insert_their_businesses" ON businesses
                FOR INSERT WITH CHECK (
                    auth.uid() = owner_id AND
                    EXISTS (
                        SELECT 1 FROM user_profiles up
                        WHERE up.user_id = auth.uid() AND up.user_type = 'business_owner'
                    )
                )
        $f$);
    END IF;
END;
$$;

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'businesses' AND p.polname = 'owners_can_update_their_businesses'
    ) THEN
        EXECUTE format($f$
            CREATE POLICY "owners_can_update_their_businesses" ON businesses
                FOR UPDATE USING (auth.uid() = owner_id)
        $f$);
    END IF;
END;
$$;

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'businesses' AND p.polname = 'admins_can_manage_all_businesses'
    ) THEN
        EXECUTE format($f$
            CREATE POLICY "admins_can_manage_all_businesses" ON businesses
                FOR ALL USING (public.is_admin())
        $f$);
    END IF;
END;
$$;

-- 5. Reference data: cuisine_types
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'cuisine_types' AND p.polname = 'public_can_view_cuisine_types'
    ) THEN
        EXECUTE format($f$
            CREATE POLICY "public_can_view_cuisine_types" ON cuisine_types
                FOR SELECT USING (true)
        $f$);
    END IF;
END;
$$;

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'cuisine_types' AND p.polname = 'admins_can_manage_cuisine_types'
    ) THEN
        EXECUTE format($f$
            CREATE POLICY "admins_can_manage_cuisine_types" ON cuisine_types
                FOR ALL USING (public.is_admin())
        $f$);
    END IF;
END;
$$;

-- 6. business_cuisines
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'business_cuisines' AND p.polname = 'public_can_view_business_cuisines'
    ) THEN
        EXECUTE format($f$
            CREATE POLICY "public_can_view_business_cuisines" ON business_cuisines
                FOR SELECT USING (
                    EXISTS (
                        SELECT 1 FROM businesses b
                        WHERE b.id = business_id AND b.status = 'active'
                    )
                )
        $f$);
    END IF;
END;
$$;

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'business_cuisines' AND p.polname = 'owners_can_manage_their_business_cuisines'
    ) THEN
        EXECUTE format($f$
            CREATE POLICY "owners_can_manage_their_business_cuisines" ON business_cuisines
                FOR ALL USING (
                    EXISTS (
                        SELECT 1 FROM businesses b
                        WHERE b.id = business_id AND b.owner_id = auth.uid()
                    )
                )
        $f$);
    END IF;
END;
$$;

-- 7. business_hours
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'business_hours' AND p.polname = 'public_can_view_business_hours'
    ) THEN
        EXECUTE format($f$
            CREATE POLICY "public_can_view_business_hours" ON business_hours
                FOR SELECT USING (
                    EXISTS (
                        SELECT 1 FROM businesses b
                        WHERE b.id = business_id AND b.status = 'active'
                    )
                )
        $f$);
    END IF;
END;
$$;

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'business_hours' AND p.polname = 'owners_can_manage_their_business_hours'
    ) THEN
        EXECUTE format($f$
            CREATE POLICY "owners_can_manage_their_business_hours" ON business_hours
                FOR ALL USING (
                    EXISTS (
                        SELECT 1 FROM businesses b
                        WHERE b.id = business_id AND b.owner_id = auth.uid()
                    )
                )
        $f$);
    END IF;
END;
$$;

-- 8. menu_categories
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'menu_categories' AND p.polname = 'public_can_view_menu_categories'
    ) THEN
        EXECUTE format($f$
            CREATE POLICY "public_can_view_menu_categories" ON menu_categories
                FOR SELECT USING (
                    EXISTS (
                        SELECT 1 FROM businesses b
                        WHERE b.id = business_id AND b.status = 'active'
                    )
                )
        $f$);
    END IF;
END;
$$;

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'menu_categories' AND p.polname = 'owners_can_manage_menu_categories'
    ) THEN
        EXECUTE format($f$
            CREATE POLICY "owners_can_manage_menu_categories" ON menu_categories
                FOR ALL USING (
                    EXISTS (
                        SELECT 1 FROM businesses b
                        WHERE b.id = business_id AND b.owner_id = auth.uid()
                    )
                )
        $f$);
    END IF;
END;
$$;

-- 9. menu_items
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1
        FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'menu_items' AND p.polname = 'public_can_view_available_menu_items'
    ) THEN
        EXECUTE format($f$
            CREATE POLICY "public_can_view_available_menu_items" ON menu_items
                FOR SELECT USING (
                    is_available = true AND
                    EXISTS (
                        SELECT 1 FROM businesses b
                        WHERE b.id = business_id AND b.status = 'active'
                    )
                )
        $f$);
    END IF;
END;
$$;

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1
        FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'menu_items' AND p.polname = 'owners_can_view_all_their_menu_items'
    ) THEN
        EXECUTE format($f$
            CREATE POLICY "owners_can_view_all_their_menu_items" ON menu_items
                FOR SELECT USING (
                    EXISTS (
                        SELECT 1 FROM businesses b
                        WHERE b.id = business_id AND b.owner_id = auth.uid()
                    )
                )
        $f$);
    END IF;
END;
$$;

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1
        FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'menu_items' AND p.polname = 'owners_can_insert_their_menu_items'
    ) THEN
        EXECUTE format($f$
            CREATE POLICY "owners_can_insert_their_menu_items" ON menu_items
                FOR INSERT WITH CHECK (
                    EXISTS (
                        SELECT 1 FROM businesses b
                        WHERE b.id = business_id AND b.owner_id = auth.uid()
                    )
                )
        $f$);
    END IF;
END;
$$;

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1
        FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'menu_items' AND p.polname = 'owners_can_update_their_menu_items'
    ) THEN
        EXECUTE format($f$
            CREATE POLICY "owners_can_update_their_menu_items" ON menu_items
                FOR UPDATE USING (
                    EXISTS (
                        SELECT 1 FROM businesses b
                        WHERE b.id = business_id AND b.owner_id = auth.uid()
                    )
                )
        $f$);
    END IF;
END;
$$;

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1
        FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'menu_items' AND p.polname = 'owners_can_delete_their_menu_items'
    ) THEN
        EXECUTE format($f$
            CREATE POLICY "owners_can_delete_their_menu_items" ON menu_items
                FOR DELETE USING (
                    EXISTS (
                        SELECT 1 FROM businesses b
                        WHERE b.id = business_id AND b.owner_id = auth.uid()
                    )
                )
        $f$);
    END IF;
END;
$$;

-- 10. business_images
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'business_images' AND p.polname = 'public_can_view_business_images'
    ) THEN
        EXECUTE format($f$
            CREATE POLICY "public_can_view_business_images" ON business_images
                FOR SELECT USING (
                    EXISTS (
                        SELECT 1 FROM businesses b
                        WHERE b.id = business_id AND b.status = 'active'
                    )
                )
        $f$);
    END IF;
END;
$$;

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'business_images' AND p.polname = 'owners_can_manage_their_business_images'
    ) THEN
        EXECUTE format($f$
            CREATE POLICY "owners_can_manage_their_business_images" ON business_images
                FOR ALL USING (
                    EXISTS (
                        SELECT 1 FROM businesses b
                        WHERE b.id = business_id AND b.owner_id = auth.uid()
                    )
                )
        $f$);
    END IF;
END;
$$;

-- 11. reviews
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'reviews' AND p.polname = 'public_can_view_published_reviews'
    ) THEN
        EXECUTE format($f$
            CREATE POLICY "public_can_view_published_reviews" ON reviews
                FOR SELECT USING (
                    status = 'published' AND
                    EXISTS (
                        SELECT 1 FROM businesses b
                        WHERE b.id = business_id AND b.status = 'active'
                    )
                )
        $f$);
    END IF;
END;
$$;

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'reviews' AND p.polname = 'customers_can_view_their_own_reviews'
    ) THEN
        EXECUTE format($f$
            CREATE POLICY "customers_can_view_their_own_reviews" ON reviews
                FOR SELECT USING (auth.uid() = customer_id)
        $f$);
    END IF;
END;
$$;

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'reviews' AND p.polname = 'customers_can_insert_reviews'
    ) THEN
        EXECUTE format($f$
            CREATE POLICY "customers_can_insert_reviews" ON reviews
                FOR INSERT WITH CHECK (
                    auth.uid() = customer_id AND
                    EXISTS (
                        SELECT 1 FROM businesses b
                        WHERE b.id = business_id AND b.status = 'active'
                    ) AND
                    EXISTS (
                        SELECT 1 FROM user_profiles up
                        WHERE up.user_id = auth.uid() AND up.user_type = 'customer'
                    )
                )
        $f$);
    END IF;
END;
$$;

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'reviews' AND p.polname = 'customers_can_update_their_own_reviews'
    ) THEN
        EXECUTE format($f$
            CREATE POLICY "customers_can_update_their_own_reviews" ON reviews
                FOR UPDATE USING (auth.uid() = customer_id)
        $f$);
    END IF;
END;
$$;

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'reviews' AND p.polname = 'owners_can_view_business_reviews'
    ) THEN
        EXECUTE format($f$
            CREATE POLICY "owners_can_view_business_reviews" ON reviews
                FOR SELECT USING (
                    EXISTS (
                        SELECT 1 FROM businesses b
                        WHERE b.id = business_id AND b.owner_id = auth.uid()
                    )
                )
        $f$);
    END IF;
END;
$$;

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'reviews' AND p.polname = 'admins_can_manage_all_reviews'
    ) THEN
        EXECUTE format($f$
            CREATE POLICY "admins_can_manage_all_reviews" ON reviews
                FOR ALL USING (public.is_admin())
        $f$);
    END IF;
END;
$$;

-- 12. orders
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'orders' AND p.polname = 'customers_can_view_their_own_orders'
    ) THEN
        EXECUTE format($f$
            CREATE POLICY "customers_can_view_their_own_orders" ON orders
                FOR SELECT USING (auth.uid() = customer_id)
        $f$);
    END IF;
END;
$$;

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'orders' AND p.polname = 'customers_can_insert_their_own_orders'
    ) THEN
        EXECUTE format($f$
            CREATE POLICY "customers_can_insert_their_own_orders" ON orders
                FOR INSERT WITH CHECK (
                    auth.uid() = customer_id AND
                    EXISTS (
                        SELECT 1 FROM businesses b
                        WHERE b.id = business_id AND b.status = 'active'
                    )
                )
        $f$);
    END IF;
END;
$$;

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'orders' AND p.polname = 'owners_can_view_their_business_orders'
    ) THEN
        EXECUTE format($f$
            CREATE POLICY "owners_can_view_their_business_orders" ON orders
                FOR SELECT USING (
                    EXISTS (
                        SELECT 1 FROM businesses b
                        WHERE b.id = business_id AND b.owner_id = auth.uid()
                    )
                )
        $f$);
    END IF;
END;
$$;

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'orders' AND p.polname = 'owners_can_update_order_status'
    ) THEN
        EXECUTE format($f$
            CREATE POLICY "owners_can_update_order_status" ON orders
                FOR UPDATE USING (
                    EXISTS (
                        SELECT 1 FROM businesses b
                        WHERE b.id = business_id AND b.owner_id = auth.uid()
                    )
                )
        $f$);
    END IF;
END;
$$;

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'orders' AND p.polname = 'admins_can_view_all_orders'
    ) THEN
        EXECUTE format($f$
            CREATE POLICY "admins_can_view_all_orders" ON orders
                FOR SELECT USING (public.is_admin())
        $f$);
    END IF;
END;
$$;

-- 13. order_items
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'order_items' AND p.polname = 'customers_can_view_their_order_items'
    ) THEN
        EXECUTE format($f$
            CREATE POLICY "customers_can_view_their_order_items" ON order_items
                FOR SELECT USING (
                    EXISTS (
                        SELECT 1 FROM orders o
                        WHERE o.id = order_id AND o.customer_id = auth.uid()
                    )
                )
        $f$);
    END IF;
END;
$$;

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'order_items' AND p.polname = 'customers_can_insert_order_items'
    ) THEN
        EXECUTE format($f$
            CREATE POLICY "customers_can_insert_order_items" ON order_items
                FOR INSERT WITH CHECK (
                    EXISTS (
                        SELECT 1 FROM orders o
                        WHERE o.id = order_id AND o.customer_id = auth.uid()
                    )
                )
        $f$);
    END IF;
END;
$$;

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'order_items' AND p.polname = 'owners_can_view_business_order_items'
    ) THEN
        EXECUTE format($f$
            CREATE POLICY "owners_can_view_business_order_items" ON order_items
                FOR SELECT USING (
                    EXISTS (
                        SELECT 1 FROM orders o
                        JOIN businesses b ON b.id = o.business_id
                        WHERE o.id = order_id AND b.owner_id = auth.uid()
                    )
                )
        $f$);
    END IF;
END;
$$;

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'order_items' AND p.polname = 'admins_can_view_all_order_items'
    ) THEN
        EXECUTE format($f$
            CREATE POLICY "admins_can_view_all_order_items" ON order_items
                FOR SELECT USING (public.is_admin())
        $f$);
    END IF;
END;
$$;

-- 14. business_views (analytics)
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'business_views' AND p.polname = 'allow_anonymous_view_tracking'
    ) THEN
        EXECUTE format($f$
            CREATE POLICY "allow_anonymous_view_tracking" ON business_views
                FOR INSERT WITH CHECK (
                    EXISTS (
                        SELECT 1 FROM businesses b
                        WHERE b.id = business_id AND b.status = 'active'
                    )
                )
        $f$);
    END IF;
END;
$$;

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'business_views' AND p.polname = 'owners_can_view_their_business_analytics'
    ) THEN
        EXECUTE format($f$
            CREATE POLICY "owners_can_view_their_business_analytics" ON business_views
                FOR SELECT USING (
                    EXISTS (
                        SELECT 1 FROM businesses b
                        WHERE b.id = business_id AND b.owner_id = auth.uid()
                    )
                )
        $f$);
    END IF;
END;
$$;

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'business_views' AND p.polname = 'admins_can_view_all_business_analytics'
    ) THEN
        EXECUTE format($f$
            CREATE POLICY "admins_can_view_all_business_analytics" ON business_views
                FOR SELECT USING (public.is_admin())
        $f$);
    END IF;
END;
$$;

-- 15. Grants for authenticated / anon users
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT SELECT ON cuisine_types TO authenticated;
GRANT SELECT, INSERT, UPDATE ON user_profiles TO authenticated;
GRANT SELECT, INSERT, UPDATE ON businesses TO authenticated;
GRANT SELECT, INSERT, UPDATE, DELETE ON business_cuisines TO authenticated;
GRANT SELECT, INSERT, UPDATE, DELETE ON business_hours TO authenticated;
GRANT SELECT, INSERT, UPDATE, DELETE ON menu_categories TO authenticated;
GRANT SELECT, INSERT, UPDATE, DELETE ON menu_items TO authenticated;
GRANT SELECT, INSERT, UPDATE, DELETE ON business_images TO authenticated;
GRANT SELECT, INSERT, UPDATE ON reviews TO authenticated;
GRANT SELECT, INSERT ON orders TO authenticated;
GRANT SELECT, INSERT ON order_items TO authenticated;
GRANT INSERT ON business_views TO authenticated, anon;
GRANT SELECT ON business_views TO authenticated;

-- 16. Comments for documentation
COMMENT ON TABLE user_profiles IS 'User profiles with RLS - users can only access their own data';
COMMENT ON TABLE businesses IS 'Business profiles with RLS - public read for active, owners manage their own';
COMMENT ON TABLE reviews IS 'Reviews with RLS - public read published, customers manage their own';
COMMENT ON TABLE orders IS 'Orders with RLS - customers and business owners see relevant orders only';
COMMENT ON TABLE business_views IS 'Analytics with RLS - business owners see their own data only';

-- Migration complete
DO $$
BEGIN
    RAISE NOTICE 'RLS Security Migration completed successfully at %', NOW();
    RAISE NOTICE 'All tables now have Row Level Security enabled with appropriate policies';
    RAISE NOTICE 'Function search_path vulnerability has been fixed';
END;
$$;


--- FILE: supabase/migrations/20250803102000_rls_security_fixed.sql ---
-- ============================================================================
-- RLS Security Migration - IMPROVED VERSION
-- Addresses Supabase Security Advisor Issues + Audit Fixes
-- Date: 2025-08-03
-- Version: 2.0 (Fixed)
-- ============================================================================

-- 1. Fix the function search path vulnerability (replace in place)
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER
SECURITY DEFINER
SET search_path = public, pg_temp
LANGUAGE plpgsql
AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$;

COMMENT ON FUNCTION update_updated_at_column() IS 'Securely updates the updated_at timestamp with fixed search_path';

-- ============================================================================
-- 2. Create helper functions for common checks (before policies)
-- ============================================================================

CREATE OR REPLACE FUNCTION public.is_admin()
RETURNS BOOLEAN
SECURITY DEFINER
SET search_path = public, pg_temp
LANGUAGE plpgsql
AS $$
BEGIN
    RETURN (SELECT user_type FROM user_profiles WHERE user_id = auth.uid()) = 'admin';
END;
$$;

CREATE OR REPLACE FUNCTION public.is_business_owner()
RETURNS BOOLEAN
SECURITY DEFINER
SET search_path = public, pg_temp
LANGUAGE plpgsql
AS $$
BEGIN
    RETURN (SELECT user_type FROM user_profiles WHERE user_id = auth.uid()) = 'business_owner';
END;
$$;

CREATE OR REPLACE FUNCTION public.owns_business(business_id UUID)
RETURNS BOOLEAN
SECURITY DEFINER
SET search_path = public, pg_temp
LANGUAGE plpgsql
AS $$
BEGIN
    RETURN EXISTS (
        SELECT 1 FROM businesses
        WHERE id = business_id AND owner_id = auth.uid()
    );
END;
$$;

COMMENT ON FUNCTION public.is_admin() IS 'Check if current user is admin';
COMMENT ON FUNCTION public.is_business_owner() IS 'Check if current user is business owner';
COMMENT ON FUNCTION public.owns_business(UUID) IS 'Check if current user owns specific business';

-- ============================================================================
-- 3. Enable Row Level Security (RLS) on all tables (if not already)
-- ============================================================================

ALTER TABLE user_profiles  ENABLE ROW LEVEL SECURITY;
ALTER TABLE businesses     ENABLE ROW LEVEL SECURITY;
ALTER TABLE business_cuisines ENABLE ROW LEVEL SECURITY;
ALTER TABLE cuisine_types  ENABLE ROW LEVEL SECURITY;
ALTER TABLE business_hours ENABLE ROW LEVEL SECURITY;
ALTER TABLE menu_categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE menu_items     ENABLE ROW LEVEL SECURITY;
ALTER TABLE business_images ENABLE ROW LEVEL SECURITY;
ALTER TABLE reviews        ENABLE ROW LEVEL SECURITY;
ALTER TABLE orders         ENABLE ROW LEVEL SECURITY;
ALTER TABLE order_items    ENABLE ROW LEVEL SECURITY;
ALTER TABLE business_views ENABLE ROW LEVEL SECURITY;

-- ============================================================================
-- 4. RLS Policies for user_profiles (idempotent)
-- ============================================================================

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'user_profiles' AND p.polname = 'Users can view their own profile'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Users can view their own profile" ON user_profiles
                FOR SELECT USING (auth.uid() = user_id)
        $q$;
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'user_profiles' AND p.polname = 'Users can insert their own profile'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Users can insert their own profile" ON user_profiles
                FOR INSERT WITH CHECK (auth.uid() = user_id)
        $q$;
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'user_profiles' AND p.polname = 'Users can update their own profile'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Users can update their own profile" ON user_profiles
                FOR UPDATE USING (auth.uid() = user_id)
        $q$;
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'user_profiles' AND p.polname = 'Admins can view all profiles'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Admins can view all profiles" ON user_profiles
                FOR SELECT USING (public.is_admin())
        $q$;
    END IF;
END;
$$;

-- ============================================================================
-- 5. RLS Policies for businesses
-- ============================================================================

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'businesses' AND p.polname = 'Public can view active businesses'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Public can view active businesses" ON businesses
                FOR SELECT USING (status = 'active')
        $q$;
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'businesses' AND p.polname = 'Business owners can view their own businesses'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Business owners can view their own businesses" ON businesses
                FOR SELECT USING (auth.uid() = owner_id)
        $q$;
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'businesses' AND p.polname = 'Business owners can insert their own businesses'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Business owners can insert their own businesses" ON businesses
                FOR INSERT WITH CHECK (
                    auth.uid() = owner_id AND public.is_business_owner()
                )
        $q$;
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'businesses' AND p.polname = 'Business owners can update their own businesses'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Business owners can update their own businesses" ON businesses
                FOR UPDATE USING (auth.uid() = owner_id)
        $q$;
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'businesses' AND p.polname = 'Admins can view all businesses'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Admins can view all businesses" ON businesses
                FOR SELECT USING (public.is_admin())
        $q$;
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'businesses' AND p.polname = 'Admins can update all businesses'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Admins can update all businesses" ON businesses
                FOR UPDATE USING (public.is_admin())
        $q$;
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'businesses' AND p.polname = 'Admins can insert businesses'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Admins can insert businesses" ON businesses
                FOR INSERT WITH CHECK (public.is_admin())
        $q$;
    END IF;
END;
$$;

-- ============================================================================
-- 6. cuisine_types reference data (no RLS)
-- ============================================================================

ALTER TABLE cuisine_types DISABLE ROW LEVEL SECURITY;

-- ============================================================================
-- 7. RLS Policies for business_cuisines
-- ============================================================================

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'business_cuisines' AND p.polname = 'Public can view business cuisines for active businesses'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Public can view business cuisines for active businesses" ON business_cuisines
                FOR SELECT USING (
                    EXISTS (
                        SELECT 1 FROM businesses b
                        WHERE b.id = business_id AND b.status = 'active'
                    )
                )
        $q$;
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'business_cuisines' AND p.polname = 'Business owners can view their business cuisines'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Business owners can view their business cuisines" ON business_cuisines
                FOR SELECT USING (public.owns_business(business_id))
        $q$;
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'business_cuisines' AND p.polname = 'Business owners can insert their business cuisines'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Business owners can insert their business cuisines" ON business_cuisines
                FOR INSERT WITH CHECK (public.owns_business(business_id))
        $q$;
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'business_cuisines' AND p.polname = 'Business owners can delete their business cuisines'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Business owners can delete their business cuisines" ON business_cuisines
                FOR DELETE USING (public.owns_business(business_id))
        $q$;
    END IF;
END;
$$;

-- ============================================================================
-- 8. RLS Policies for business_hours
-- ============================================================================

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'business_hours' AND p.polname = 'Public can view business hours for active businesses'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Public can view business hours for active businesses" ON business_hours
                FOR SELECT USING (
                    EXISTS (
                        SELECT 1 FROM businesses b
                        WHERE b.id = business_id AND b.status = 'active'
                    )
                )
        $q$;
    END IF;
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'business_hours' AND p.polname = 'Business owners can view their business hours'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Business owners can view their business hours" ON business_hours
                FOR SELECT USING (public.owns_business(business_id))
        $q$;
    END IF;
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'business_hours' AND p.polname = 'Business owners can insert their business hours'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Business owners can insert their business hours" ON business_hours
                FOR INSERT WITH CHECK (public.owns_business(business_id))
        $q$;
    END IF;
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'business_hours' AND p.polname = 'Business owners can update their business hours'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Business owners can update their business hours" ON business_hours
                FOR UPDATE USING (public.owns_business(business_id))
        $q$;
    END IF;
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'business_hours' AND p.polname = 'Business owners can delete their business hours'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Business owners can delete their business hours" ON business_hours
                FOR DELETE USING (public.owns_business(business_id))
        $q$;
    END IF;
END;
$$;

-- ============================================================================
-- 9. RLS Policies for menu_categories
-- ============================================================================

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'menu_categories' AND p.polname = 'Public can view menu categories for active businesses'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Public can view menu categories for active businesses" ON menu_categories
                FOR SELECT USING (
                    EXISTS (
                        SELECT 1 FROM businesses b
                        WHERE b.id = business_id AND b.status = 'active'
                    )
                )
        $q$;
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'menu_categories' AND p.polname = 'Business owners can view their menu categories'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Business owners can view their menu categories" ON menu_categories
                FOR SELECT USING (public.owns_business(business_id))
        $q$;
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'menu_categories' AND p.polname = 'Business owners can insert their menu categories'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Business owners can insert their menu categories" ON menu_categories
                FOR INSERT WITH CHECK (public.owns_business(business_id))
        $q$;
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'menu_categories' AND p.polname = 'Business owners can update their menu categories'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Business owners can update their menu categories" ON menu_categories
                FOR UPDATE USING (public.owns_business(business_id))
        $q$;
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'menu_categories' AND p.polname = 'Business owners can delete their menu categories'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Business owners can delete their menu categories" ON menu_categories
                FOR DELETE USING (public.owns_business(business_id))
        $q$;
    END IF;
END;
$$;

-- ============================================================================
-- 10. RLS Policies for menu_items
-- ============================================================================

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'menu_items' AND p.polname = 'Public can view available menu items'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Public can view available menu items" ON menu_items
                FOR SELECT USING (
                    is_available = true AND
                    EXISTS (
                        SELECT 1 FROM businesses b
                        WHERE b.id = business_id AND b.status = 'active'
                    )
                )
        $q$;
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'menu_items' AND p.polname = 'Business owners can view all their menu items'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Business owners can view all their menu items" ON menu_items
                FOR SELECT USING (public.owns_business(business_id))
        $q$;
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'menu_items' AND p.polname = 'Business owners can insert their menu items'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Business owners can insert their menu items" ON menu_items
                FOR INSERT WITH CHECK (public.owns_business(business_id))
        $q$;
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'menu_items' AND p.polname = 'Business owners can update their menu items'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Business owners can update their menu items" ON menu_items
                FOR UPDATE USING (public.owns_business(business_id))
        $q$;
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'menu_items' AND p.polname = 'Business owners can delete their menu items'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Business owners can delete their menu items" ON menu_items
                FOR DELETE USING (public.owns_business(business_id))
        $q$;
    END IF;
END;
$$;

-- ============================================================================
-- 11. RLS Policies for business_images
-- ============================================================================

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'business_images' AND p.polname = 'Public can view business images for active businesses'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Public can view business images for active businesses" ON business_images
                FOR SELECT USING (
                    EXISTS (
                        SELECT 1 FROM businesses b
                        WHERE b.id = business_id AND b.status = 'active'
                    )
                )
        $q$;
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'business_images' AND p.polname = 'Business owners can view their business images'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Business owners can view their business images" ON business_images
                FOR SELECT USING (public.owns_business(business_id))
        $q$;
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'business_images' AND p.polname = 'Business owners can insert their business images'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Business owners can insert their business images" ON business_images
                FOR INSERT WITH CHECK (public.owns_business(business_id))
        $q$;
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'business_images' AND p.polname = 'Business owners can update their business images'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Business owners can update their business images" ON business_images
                FOR UPDATE USING (public.owns_business(business_id))
        $q$;
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'business_images' AND p.polname = 'Business owners can delete their business images'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Business owners can delete their business images" ON business_images
                FOR DELETE USING (public.owns_business(business_id))
        $q$;
    END IF;
END;
$$;

-- ============================================================================
-- 12. RLS Policies for reviews
-- ============================================================================

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'reviews' AND p.polname = 'Public can view published reviews'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Public can view published reviews" ON reviews
                FOR SELECT USING (
                    status = 'published' AND
                    EXISTS (
                        SELECT 1 FROM businesses b
                        WHERE b.id = business_id AND b.status = 'active'
                    )
                )
        $q$;
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'reviews' AND p.polname = 'Customers can view their own reviews'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Customers can view their own reviews" ON reviews
                FOR SELECT USING (auth.uid() = customer_id)
        $q$;
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'reviews' AND p.polname = 'Customers can insert reviews'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Customers can insert reviews" ON reviews
                FOR INSERT WITH CHECK (
                    auth.uid() = customer_id AND
                    EXISTS (
                        SELECT 1 FROM businesses b
                        WHERE b.id = business_id AND b.status = 'active'
                    ) AND
                    (SELECT user_type FROM user_profiles WHERE user_id = auth.uid()) = 'customer'
                )
        $q$;
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'reviews' AND p.polname = 'Customers can update their own reviews'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Customers can update their own reviews" ON reviews
                FOR UPDATE USING (auth.uid() = customer_id)
        $q$;
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'reviews' AND p.polname = 'Business owners can view their business reviews'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Business owners can view their business reviews" ON reviews
                FOR SELECT USING (public.owns_business(business_id))
        $q$;
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'reviews' AND p.polname = 'Admins can view all reviews'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Admins can view all reviews" ON reviews
                FOR SELECT USING (public.is_admin())
        $q$;
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'reviews' AND p.polname = 'Admins can update all reviews'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Admins can update all reviews" ON reviews
                FOR UPDATE USING (public.is_admin())
        $q$;
    END IF;
END;
$$;

-- ============================================================================
-- 13. RLS Policies for orders
-- ============================================================================

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'orders' AND p.polname = 'Customers can view their own orders'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Customers can view their own orders" ON orders
                FOR SELECT USING (auth.uid() = customer_id)
        $q$;
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'orders' AND p.polname = 'Customers can insert their own orders'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Customers can insert their own orders" ON orders
                FOR INSERT WITH CHECK (
                    auth.uid() = customer_id AND
                    EXISTS (
                        SELECT 1 FROM businesses b
                        WHERE b.id = business_id AND b.status = 'active'
                    )
                )
        $q$;
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'orders' AND p.polname = 'Business owners can view their business orders'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Business owners can view their business orders" ON orders
                FOR SELECT USING (public.owns_business(business_id))
        $q$;
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'orders' AND p.polname = 'Business owners can update their business orders'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Business owners can update their business orders" ON orders
                FOR UPDATE USING (public.owns_business(business_id))
        $q$;
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'orders' AND p.polname = 'Admins can view all orders'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Admins can view all orders" ON orders
                FOR SELECT USING (public.is_admin())
        $q$;
    END IF;
END;
$$;

-- ============================================================================
-- 14. RLS Policies for order_items
-- ============================================================================

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'order_items' AND p.polname = 'Customers can view their own order items'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Customers can view their own order items" ON order_items
                FOR SELECT USING (
                    EXISTS (
                        SELECT 1 FROM orders o
                        WHERE o.id = order_id AND o.customer_id = auth.uid()
                    )
                )
        $q$;
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'order_items' AND p.polname = 'Customers can insert their own order items'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Customers can insert their own order items" ON order_items
                FOR INSERT WITH CHECK (
                    EXISTS (
                        SELECT 1 FROM orders o
                        WHERE o.id = order_id AND o.customer_id = auth.uid()
                    )
                )
        $q$;
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'order_items' AND p.polname = 'Business owners can view their business order items'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Business owners can view their business order items" ON order_items
                FOR SELECT USING (
                    EXISTS (
                        SELECT 1 FROM orders o
                        WHERE o.id = order_id AND public.owns_business(o.business_id)
                    )
                )
        $q$;
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'order_items' AND p.polname = 'Admins can view all order items'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Admins can view all order items" ON order_items
                FOR SELECT USING (public.is_admin())
        $q$;
    END IF;
END;
$$;

-- ============================================================================
-- 15. RLS Policies for business_views (analytics)
-- ============================================================================

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'business_views' AND p.polname = 'Allow anonymous business view tracking'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Allow anonymous business view tracking" ON business_views
                FOR INSERT WITH CHECK (
                    EXISTS (
                        SELECT 1 FROM businesses b
                        WHERE b.id = business_id AND b.status = 'active'
                    )
                )
        $q$;
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'business_views' AND p.polname = 'Business owners can view their business analytics'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Business owners can view their business analytics" ON business_views
                FOR SELECT USING (public.owns_business(business_id))
        $q$;
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_catalog.pg_policy p
        JOIN pg_catalog.pg_class c ON p.polrelid = c.oid
        WHERE c.relname = 'business_views' AND p.polname = 'Admins can view all business analytics'
    ) THEN
        EXECUTE $q$
            CREATE POLICY "Admins can view all business analytics" ON business_views
                FOR SELECT USING (public.is_admin())
        $q$;
    END IF;
END;
$$;

-- ============================================================================
-- 16. Grant necessary permissions - MINIMAL AND CLEAN
-- ============================================================================

GRANT USAGE ON SCHEMA public TO authenticated;
GRANT SELECT ON cuisine_types TO authenticated;
GRANT INSERT ON business_views TO authenticated, anon;

-- ============================================================================
-- 17. Comments for documentation
-- ============================================================================

COMMENT ON TABLE user_profiles IS 'User profiles with RLS - users can only access their own data';
COMMENT ON TABLE businesses IS 'Business profiles with RLS - public read for active, owners manage their own';
COMMENT ON TABLE reviews IS 'Reviews with RLS - public read published, customers manage their own';
COMMENT ON TABLE orders IS 'Orders with RLS - customers and business owners see relevant orders only';
COMMENT ON TABLE business_views IS 'Analytics with RLS - business owners see their own data only';
COMMENT ON TABLE cuisine_types IS 'Reference data - no RLS, public read access';

-- ============================================================================
-- Migration complete
-- ============================================================================

DO $$
BEGIN
    RAISE NOTICE 'RLS Security Migration v2.0 completed successfully at %', NOW();
    RAISE NOTICE 'All tables now have Row Level Security with separate policies per action';
    RAISE NOTICE 'Function search_path vulnerability has been fixed';
    RAISE NOTICE 'Helper functions created for cleaner policy logic';
    RAISE NOTICE 'Grants have been minimized to avoid RLS conflicts';
END;
$$;


--- FILE: supabase/migrations/20250803103000_fix_cuisine_types_rls.sql ---
-- ============================================================================
-- Fix cuisine_types RLS - Disable RLS for reference data
-- Date: 2025-08-03
-- ============================================================================

-- Explicitly disable RLS on cuisine_types as it's reference data
ALTER TABLE cuisine_types DISABLE ROW LEVEL SECURITY;

-- Drop any existing policies on cuisine_types (if any exist)
DO $$
DECLARE
    policy_name TEXT;
BEGIN
    FOR policy_name IN 
        SELECT pg_policies.policyname 
        FROM pg_policies 
        WHERE pg_policies.schemaname = 'public' 
        AND pg_policies.tablename = 'cuisine_types'
    LOOP
        EXECUTE 'DROP POLICY IF EXISTS ' || quote_ident(policy_name) || ' ON public.cuisine_types';
        RAISE NOTICE 'Dropped policy: %', policy_name;
    END LOOP;
END $$;

-- Ensure authenticated users can read cuisine_types
GRANT SELECT ON cuisine_types TO authenticated;
GRANT SELECT ON cuisine_types TO anon;

-- Verify the change
DO $$
DECLARE
    rls_enabled BOOLEAN;
BEGIN
    SELECT pg_class.relrowsecurity INTO rls_enabled
    FROM pg_class
    JOIN pg_namespace ON pg_class.relnamespace = pg_namespace.oid
    WHERE pg_namespace.nspname = 'public' 
    AND pg_class.relname = 'cuisine_types';
    
    IF NOT rls_enabled THEN
        RAISE NOTICE '‚úÖ RLS successfully disabled on cuisine_types';
    ELSE
        RAISE NOTICE '‚ö†Ô∏è  RLS is still enabled on cuisine_types';
    END IF;
END $$;

COMMENT ON TABLE cuisine_types IS 'Reference data table - RLS disabled for public access';


--- FILE: supabase/migrations/20250803104000_cleanup_redundant_grants.sql ---
-- ============================================================================
-- Clean up redundant SELECT grants on RLS tables
-- Date: 2025-08-03
-- ============================================================================

-- Remove redundant SELECT grants on RLS-protected tables
-- RLS policies should control access, not blanket grants

REVOKE SELECT ON user_profiles FROM authenticated;
REVOKE SELECT ON businesses FROM authenticated;
REVOKE SELECT ON reviews FROM authenticated;
REVOKE SELECT ON orders FROM authenticated;
REVOKE SELECT ON business_views FROM authenticated;

-- Keep these grants that are intentional:
-- - cuisine_types: reference data, no RLS
-- - business_views: INSERT needed for analytics tracking

-- Verify the cleanup
DO $$
DECLARE
    grant_count INTEGER;
BEGIN
    RAISE NOTICE 'üîç Verifying grant cleanup...';
    
    -- Check for any SELECT grants on RLS-protected tables to authenticated role
    SELECT COUNT(*) INTO grant_count
    FROM information_schema.role_table_grants
    WHERE grantee = 'authenticated'
    AND privilege_type = 'SELECT'
    AND table_schema = 'public'
    AND table_name IN ('user_profiles', 'businesses', 'reviews', 'orders', 'business_views');
    
    IF grant_count = 0 THEN
        RAISE NOTICE '‚úÖ No redundant SELECT grants on RLS tables (policies control access)';
    ELSE
        RAISE NOTICE '‚ö†Ô∏è  Still found % SELECT grants on RLS tables', grant_count;
    END IF;
    
    -- Verify cuisine_types still has its grant
    IF EXISTS (
        SELECT 1 FROM information_schema.role_table_grants
        WHERE grantee = 'authenticated'
        AND privilege_type = 'SELECT'
        AND table_schema = 'public'
        AND table_name = 'cuisine_types'
    ) THEN
        RAISE NOTICE '‚úÖ SELECT grant preserved on cuisine_types (reference data)';
    ELSE
        RAISE NOTICE '‚ùå Missing SELECT grant on cuisine_types';
    END IF;
END $$;


--- FILE: supabase/migrations/20250803105000_restore_select_grants.sql ---
-- Restore necessary SELECT privileges for authenticated users

GRANT SELECT
  ON user_profiles,
     businesses,
     reviews,
     orders
  TO authenticated;


--- FILE: supabase/schema.sql ---
-- Create the main database tables for the Singapore cafe marketplace

-- User profiles table (extends Supabase auth.users)
CREATE TABLE user_profiles (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    phone VARCHAR(20),
    user_type VARCHAR(20) NOT NULL CHECK (user_type IN ('customer', 'business_owner', 'admin')),
    intended_business_name VARCHAR(200),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(user_id)
);

-- Business profiles table
CREATE TABLE businesses (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    owner_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    business_name VARCHAR(200) NOT NULL,
    slug VARCHAR(200) UNIQUE NOT NULL,
    description TEXT NOT NULL,
    specialty VARCHAR(300),
    full_address TEXT NOT NULL,
    district VARCHAR(50) NOT NULL,
    postal_code VARCHAR(10) NOT NULL,
    phone VARCHAR(20) NOT NULL,
    email VARCHAR(255) NOT NULL,
    price_range VARCHAR(10) NOT NULL CHECK (price_range IN ('$', '$$', '$$$', '$$$$')),
    status VARCHAR(20) NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'active', 'suspended', 'closed')),
    instagram_handle VARCHAR(100),
    facebook_url VARCHAR(300),
    whatsapp_number VARCHAR(20),
    cover_image_url TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Business cuisine types (many-to-many relationship)
CREATE TABLE cuisine_types (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TABLE business_cuisines (
    business_id UUID NOT NULL REFERENCES businesses(id) ON DELETE CASCADE,
    cuisine_id UUID NOT NULL REFERENCES cuisine_types(id) ON DELETE CASCADE,
    PRIMARY KEY (business_id, cuisine_id)
);

-- Business operating hours
CREATE TABLE business_hours (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    business_id UUID NOT NULL REFERENCES businesses(id) ON DELETE CASCADE,
    day_of_week INTEGER NOT NULL CHECK (day_of_week >= 0 AND day_of_week <= 6), -- 0 = Sunday, 6 = Saturday
    is_open BOOLEAN NOT NULL DEFAULT false,
    open_time TIME,
    close_time TIME,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Menu categories
CREATE TABLE menu_categories (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    business_id UUID NOT NULL REFERENCES businesses(id) ON DELETE CASCADE,
    name VARCHAR(100) NOT NULL,
    display_order INTEGER NOT NULL DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Menu items
CREATE TABLE menu_items (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    business_id UUID NOT NULL REFERENCES businesses(id) ON DELETE CASCADE,
    category_id UUID REFERENCES menu_categories(id) ON DELETE SET NULL,
    name VARCHAR(200) NOT NULL,
    description TEXT,
    price DECIMAL(10,2) NOT NULL,
    is_available BOOLEAN NOT NULL DEFAULT true,
    image_url TEXT,
    display_order INTEGER NOT NULL DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Business images/gallery
CREATE TABLE business_images (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    business_id UUID NOT NULL REFERENCES businesses(id) ON DELETE CASCADE,
    image_url TEXT NOT NULL,
    alt_text VARCHAR(200),
    is_cover BOOLEAN NOT NULL DEFAULT false,
    display_order INTEGER NOT NULL DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Reviews and ratings
CREATE TABLE reviews (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    business_id UUID NOT NULL REFERENCES businesses(id) ON DELETE CASCADE,
    customer_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    rating INTEGER NOT NULL CHECK (rating >= 1 AND rating <= 5),
    comment TEXT,
    status VARCHAR(20) NOT NULL DEFAULT 'published' CHECK (status IN ('published', 'hidden', 'flagged')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(business_id, customer_id) -- One review per customer per business
);

-- Orders table
CREATE TABLE orders (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    order_number VARCHAR(20) UNIQUE NOT NULL,
    business_id UUID NOT NULL REFERENCES businesses(id) ON DELETE CASCADE,
    customer_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    customer_name VARCHAR(200) NOT NULL,
    customer_phone VARCHAR(20) NOT NULL,
    customer_email VARCHAR(255),
    total_amount DECIMAL(10,2) NOT NULL,
    status VARCHAR(20) NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'confirmed', 'preparing', 'ready', 'completed', 'cancelled')),
    notes TEXT,
    pickup_time TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Order items
CREATE TABLE order_items (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    order_id UUID NOT NULL REFERENCES orders(id) ON DELETE CASCADE,
    menu_item_id UUID NOT NULL REFERENCES menu_items(id),
    item_name VARCHAR(200) NOT NULL, -- Store name at time of order
    item_price DECIMAL(10,2) NOT NULL, -- Store price at time of order
    quantity INTEGER NOT NULL DEFAULT 1,
    subtotal DECIMAL(10,2) NOT NULL,
    special_instructions TEXT
);

-- Business analytics/stats
CREATE TABLE business_views (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    business_id UUID NOT NULL REFERENCES businesses(id) ON DELETE CASCADE,
    viewer_ip VARCHAR(45), -- Store IP for basic analytics
    user_agent TEXT,
    viewed_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create indexes for better performance
CREATE INDEX idx_businesses_status ON businesses(status);
CREATE INDEX idx_businesses_district ON businesses(district);
CREATE INDEX idx_businesses_created_at ON businesses(created_at);
CREATE INDEX idx_menu_items_business_id ON menu_items(business_id);
CREATE INDEX idx_reviews_business_id ON reviews(business_id);
CREATE INDEX idx_reviews_rating ON reviews(rating);
CREATE INDEX idx_orders_business_id ON orders(business_id);
CREATE INDEX idx_orders_customer_id ON orders(customer_id);
CREATE INDEX idx_orders_status ON orders(status);
CREATE INDEX idx_business_views_business_id ON business_views(business_id);
CREATE INDEX idx_business_views_viewed_at ON business_views(viewed_at);

-- Create a function to update the updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create triggers to automatically update updated_at
CREATE TRIGGER update_user_profiles_updated_at BEFORE UPDATE ON user_profiles FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_businesses_updated_at BEFORE UPDATE ON businesses FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_menu_items_updated_at BEFORE UPDATE ON menu_items FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_reviews_updated_at BEFORE UPDATE ON reviews FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_orders_updated_at BEFORE UPDATE ON orders FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();


--- FILE: supabase/seed.sql ---
-- Insert initial cuisine types
INSERT INTO cuisine_types (name) VALUES
('Local Singaporean'),
('Chinese'),
('Malay'),
('Indian'),
('Peranakan'),
('Western'),
('Japanese'),
('Korean'),
('Thai'),
('Vietnamese'),
('Italian'),
('Mexican'),
('Fusion'),
('Desserts & Sweets'),
('Coffee & Beverages'),
('Healthy & Organic');

-- Insert sample business owner users
INSERT INTO users (email, password_hash, first_name, last_name, phone, user_type) VALUES
('lim.ahma@gmail.com', '$2b$10$example_hash_1', 'Mei Ling', 'Lim', '+65 9123 4567', 'business_owner'),
('brew.bite.owner@gmail.com', '$2b$10$example_hash_2', 'David', 'Tan', '+65 9234 5678', 'business_owner'),
('spice.route@gmail.com', '$2b$10$example_hash_3', 'Priya', 'Sharma', '+65 9345 6789', 'business_owner'),
('noodle.nest@gmail.com', '$2b$10$example_hash_4', 'Wei Ming', 'Chen', '+65 9456 7890', 'business_owner');

-- Insert sample customer users
INSERT INTO users (email, password_hash, first_name, last_name, phone, user_type) VALUES
('sarah.tan@gmail.com', '$2b$10$example_hash_5', 'Sarah', 'Tan', '+65 8123 4567', 'customer'),
('david.lim@gmail.com', '$2b$10$example_hash_6', 'David', 'Lim', '+65 8234 5678', 'customer'),
('michelle.wong@gmail.com', '$2b$10$example_hash_7', 'Michelle', 'Wong', '+65 8345 6789', 'customer');

-- Insert sample businesses
INSERT INTO businesses (owner_id, business_name, slug, description, specialty, full_address, district, postal_code, phone, email, price_range, status, instagram_handle, whatsapp_number) VALUES
(
    (SELECT id FROM users WHERE email = 'lim.ahma@gmail.com'),
    'Ah Ma''s Kitchen',
    'ah-mas-kitchen',
    'Welcome to Ah Ma''s Kitchen, where traditional Peranakan recipes meet modern home dining. Started by Mrs. Lim in her HDB flat, we specialize in authentic Nyonya kueh and traditional dishes passed down through three generations.',
    'Authentic Nyonya Kueh & Traditional Peranakan Dishes',
    'Blk 123 Toa Payoh Lorong 1, #01-456, Singapore 310123',
    'Central',
    '310123',
    '+65 9123 4567',
    'ahmaskitchen@gmail.com',
    '$$',
    'active',
    '@ahmas_kitchen_sg',
    '+65 9123 4567'
),
(
    (SELECT id FROM users WHERE email = 'brew.bite.owner@gmail.com'),
    'Brew & Bite',
    'brew-and-bite',
    'Artisan coffee meets Western brunch in our cozy Tampines home setup. We focus on specialty coffee beans and hearty brunch dishes perfect for lazy weekends.',
    'Artisan Coffee & Western Brunch',
    'Blk 456 Tampines Street 42, #02-123, Singapore 520456',
    'East',
    '520456',
    '+65 9234 5678',
    'hello@brewandbite.sg',
    '$$$',
    'active',
    '@brew_bite_sg',
    '+65 9234 5678'
),
(
    (SELECT id FROM users WHERE email = 'spice.route@gmail.com'),
    'Spice Route Home',
    'spice-route-home',
    'Authentic Indian home cooking with recipes from different regions of India. Every curry is made from scratch with traditional spices and techniques.',
    'Authentic Regional Indian Curries',
    'Blk 789 Jurong West Street 75, #03-234, Singapore 640789',
    'West',
    '640789',
    '+65 9345 6789',
    'spiceroute@gmail.com',
    '$',
    'active',
    '@spice_route_home',
    '+65 9345 6789'
),
(
    (SELECT id FROM users WHERE email = 'noodle.nest@gmail.com'),
    'Noodle Nest',
    'noodle-nest',
    'Hand-pulled noodles and traditional Chinese comfort food made fresh daily. Watch the noodle-making process in our open kitchen setup.',
    'Hand-pulled Noodles & Chinese Comfort Food',
    'Blk 321 Ang Mo Kio Avenue 3, #01-567, Singapore 560321',
    'North',
    '560321',
    '+65 9456 7890',
    'noodlenest@gmail.com',
    '$$',
    'active',
    '@noodle_nest_sg',
    '+65 9456 7890'
);

-- Link businesses with cuisine types
INSERT INTO business_cuisines (business_id, cuisine_id) VALUES
-- Ah Ma's Kitchen - Peranakan & Local
((SELECT id FROM businesses WHERE slug = 'ah-mas-kitchen'), (SELECT id FROM cuisine_types WHERE name = 'Peranakan')),
((SELECT id FROM businesses WHERE slug = 'ah-mas-kitchen'), (SELECT id FROM cuisine_types WHERE name = 'Local Singaporean')),

-- Brew & Bite - Western & Coffee
((SELECT id FROM businesses WHERE slug = 'brew-and-bite'), (SELECT id FROM cuisine_types WHERE name = 'Western')),
((SELECT id FROM businesses WHERE slug = 'brew-and-bite'), (SELECT id FROM cuisine_types WHERE name = 'Coffee & Beverages')),

-- Spice Route Home - Indian
((SELECT id FROM businesses WHERE slug = 'spice-route-home'), (SELECT id FROM cuisine_types WHERE name = 'Indian')),

-- Noodle Nest - Chinese
((SELECT id FROM businesses WHERE slug = 'noodle-nest'), (SELECT id FROM cuisine_types WHERE name = 'Chinese'));

-- Insert business hours (Monday = 1, Sunday = 0)
INSERT INTO business_hours (business_id, day_of_week, is_open, open_time, close_time) VALUES
-- Ah Ma's Kitchen hours
((SELECT id FROM businesses WHERE slug = 'ah-mas-kitchen'), 1, true, '09:00', '18:00'), -- Monday
((SELECT id FROM businesses WHERE slug = 'ah-mas-kitchen'), 2, true, '09:00', '18:00'), -- Tuesday
((SELECT id FROM businesses WHERE slug = 'ah-mas-kitchen'), 3, true, '09:00', '18:00'), -- Wednesday
((SELECT id FROM businesses WHERE slug = 'ah-mas-kitchen'), 4, true, '09:00', '18:00'), -- Thursday
((SELECT id FROM businesses WHERE slug = 'ah-mas-kitchen'), 5, true, '09:00', '18:00'), -- Friday
((SELECT id FROM businesses WHERE slug = 'ah-mas-kitchen'), 6, true, '08:00', '19:00'), -- Saturday
((SELECT id FROM businesses WHERE slug = 'ah-mas-kitchen'), 0, false, null, null), -- Sunday

-- Brew & Bite hours
((SELECT id FROM businesses WHERE slug = 'brew-and-bite'), 1, true, '08:00', '17:00'),
((SELECT id FROM businesses WHERE slug = 'brew-and-bite'), 2, true, '08:00', '17:00'),
((SELECT id FROM businesses WHERE slug = 'brew-and-bite'), 3, true, '08:00', '17:00'),
((SELECT id FROM businesses WHERE slug = 'brew-and-bite'), 4, true, '08:00', '17:00'),
((SELECT id FROM businesses WHERE slug = 'brew-and-bite'), 5, true, '08:00', '17:00'),
((SELECT id FROM businesses WHERE slug = 'brew-and-bite'), 6, true, '08:00', '19:00'),
((SELECT id FROM businesses WHERE slug = 'brew-and-bite'), 0, true, '09:00', '17:00');

-- Insert sample menu categories and items for Ah Ma's Kitchen
INSERT INTO menu_categories (business_id, name, display_order) VALUES
((SELECT id FROM businesses WHERE slug = 'ah-mas-kitchen'), 'Signature Kueh', 1),
((SELECT id FROM businesses WHERE slug = 'ah-mas-kitchen'), 'Main Dishes', 2);

-- Insert menu items for Ah Ma's Kitchen
INSERT INTO menu_items (business_id, category_id, name, description, price, display_order) VALUES
-- Signature Kueh
((SELECT id FROM businesses WHERE slug = 'ah-mas-kitchen'), 
 (SELECT id FROM menu_categories WHERE business_id = (SELECT id FROM businesses WHERE slug = 'ah-mas-kitchen') AND name = 'Signature Kueh'),
 'Kueh Lapis', 'Traditional 9-layer steamed cake', 2.50, 1),
((SELECT id FROM businesses WHERE slug = 'ah-mas-kitchen'), 
 (SELECT id FROM menu_categories WHERE business_id = (SELECT id FROM businesses WHERE slug = 'ah-mas-kitchen') AND name = 'Signature Kueh'),
 'Ondeh Ondeh', 'Pandan glutinous rice balls with gula melaka', 1.80, 2),
((SELECT id FROM businesses WHERE slug = 'ah-mas-kitchen'), 
 (SELECT id FROM menu_categories WHERE business_id = (SELECT id FROM businesses WHERE slug = 'ah-mas-kitchen') AND name = 'Signature Kueh'),
 'Kueh Salat', 'Coconut custard on glutinous rice base', 3.20, 3),

-- Main Dishes
((SELECT id FROM businesses WHERE slug = 'ah-mas-kitchen'), 
 (SELECT id FROM menu_categories WHERE business_id = (SELECT id FROM businesses WHERE slug = 'ah-mas-kitchen') AND name = 'Main Dishes'),
 'Ayam Buah Keluak', 'Chicken with black nuts in rich spicy gravy', 15.80, 1),
((SELECT id FROM businesses WHERE slug = 'ah-mas-kitchen'), 
 (SELECT id FROM menu_categories WHERE business_id = (SELECT id FROM businesses WHERE slug = 'ah-mas-kitchen') AND name = 'Main Dishes'),
 'Laksa Lemak', 'Rich coconut curry noodle soup', 8.80, 2);

-- Insert sample reviews
INSERT INTO reviews (business_id, customer_id, rating, comment) VALUES
((SELECT id FROM businesses WHERE slug = 'ah-mas-kitchen'),
 (SELECT id FROM users WHERE email = 'sarah.tan@gmail.com'),
 5, 'Amazing authentic Peranakan food! The kueh lapis was exactly like my grandmother used to make. Mrs. Lim is so passionate about preserving these traditional recipes.'),
((SELECT id FROM businesses WHERE slug = 'ah-mas-kitchen'),
 (SELECT id FROM users WHERE email = 'david.lim@gmail.com'),
 5, 'Best laksa lemak I''ve had in Singapore! The flavors are so rich and authentic. Definitely ordering again.'),
((SELECT id FROM businesses WHERE slug = 'ah-mas-kitchen'),
 (SELECT id FROM users WHERE email = 'michelle.wong@gmail.com'),
 4, 'Love supporting local home businesses. The ondeh ondeh was perfect - just the right amount of sweetness. Will try more items next time!');


--- FILE: supabase/validate_security.sql ---
-- ============================================================================
-- Security Validation Script - IMPROVED VERSION
-- Run this after applying the fixed RLS migration to verify everything works
-- ============================================================================

-- Check 1: Verify RLS is enabled on required tables (cuisine_types should be disabled)
DO $$
DECLARE
    table_name TEXT;
    rls_enabled BOOLEAN;
    table_count INTEGER := 0;
    rls_count INTEGER := 0;
    expected_rls_tables TEXT[] := ARRAY[
        'user_profiles', 'businesses', 'business_cuisines',
        'business_hours', 'menu_categories', 'menu_items', 'business_images',
        'reviews', 'orders', 'order_items', 'business_views'
    ];
BEGIN
    RAISE NOTICE 'üîç Checking Row Level Security (RLS) status...';
    
    FOR table_name IN 
        SELECT t.table_name 
        FROM information_schema.tables t
        WHERE t.table_schema = 'public' 
        AND t.table_type = 'BASE TABLE'
        AND t.table_name = ANY(expected_rls_tables)
    LOOP
        SELECT pg_class.relrowsecurity INTO rls_enabled
        FROM pg_class
        JOIN pg_namespace ON pg_class.relnamespace = pg_namespace.oid
        WHERE pg_namespace.nspname = 'public' 
        AND pg_class.relname = table_name;
        
        table_count := table_count + 1;
        
        IF rls_enabled THEN
            rls_count := rls_count + 1;
            RAISE NOTICE '‚úÖ RLS enabled on: %', table_name;
        ELSE
            RAISE NOTICE '‚ùå RLS NOT enabled on: %', table_name;
        END IF;
    END LOOP;
    
    -- Check cuisine_types should NOT have RLS
    SELECT pg_class.relrowsecurity INTO rls_enabled
    FROM pg_class
    JOIN pg_namespace ON pg_class.relnamespace = pg_namespace.oid
    WHERE pg_namespace.nspname = 'public' 
    AND pg_class.relname = 'cuisine_types';
    
    IF NOT rls_enabled THEN
        RAISE NOTICE '‚úÖ RLS correctly disabled on: cuisine_types (reference data)';
    ELSE
        RAISE NOTICE '‚ö†Ô∏è  RLS enabled on cuisine_types (should be disabled for reference data)';
    END IF;
    
    RAISE NOTICE '';
    RAISE NOTICE 'üìä RLS Summary: % out of % tables have RLS enabled (expected)', rls_count, table_count;
    
    IF rls_count = table_count THEN
        RAISE NOTICE 'üéâ All required tables have RLS enabled!';
    ELSE
        RAISE NOTICE '‚ö†Ô∏è  Some tables are missing RLS protection!';
    END IF;
END $$;

-- Check 2: Count RLS policies
DO $$
DECLARE
    policy_count INTEGER;
    table_count INTEGER;
    rec RECORD;
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE 'üîç Checking RLS policies...';
    
    SELECT COUNT(*) INTO policy_count
    FROM pg_policies
    WHERE schemaname = 'public';
    
    SELECT COUNT(DISTINCT tablename) INTO table_count
    FROM pg_policies
    WHERE schemaname = 'public';
    
    RAISE NOTICE 'üìä Found % policies across % tables', policy_count, table_count;
    RAISE NOTICE '';
    
    -- List policies by table
    FOR rec IN (
        SELECT tablename, COUNT(*) as policy_count
        FROM pg_policies
        WHERE schemaname = 'public'
        GROUP BY tablename
        ORDER BY tablename
    ) LOOP
        RAISE NOTICE 'üìã %: % policies', rec.tablename, rec.policy_count;
    END LOOP;
END $$;

-- Check 3: Verify secure function
DO $$
DECLARE
    func_config TEXT[];
    is_security_definer BOOLEAN;
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE 'üîç Checking function security...';
    
    SELECT proconfig, prosecdef INTO func_config, is_security_definer
    FROM pg_proc
    WHERE proname = 'update_updated_at_column'
    AND pronamespace = (SELECT oid FROM pg_namespace WHERE nspname = 'public');
    
    IF FOUND THEN
        IF is_security_definer THEN
            RAISE NOTICE '‚úÖ Function is SECURITY DEFINER';
        ELSE
            RAISE NOTICE '‚ùå Function is NOT SECURITY DEFINER';
        END IF;
        
        IF func_config IS NOT NULL AND (
            'search_path=public,pg_temp' = ANY(func_config) OR 
            'search_path=public, pg_temp' = ANY(func_config)
        ) THEN
            RAISE NOTICE '‚úÖ Function has secure search_path';
        ELSE
            RAISE NOTICE '‚ùå Function search_path is not secure: %', func_config;
        END IF;
    ELSE
        RAISE NOTICE '‚ùå Function update_updated_at_column not found';
    END IF;
END $$;

-- Check 4: Test helper functions exist and work
DO $$
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE 'üîç Checking helper functions...';
    
    IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'is_admin' AND pronamespace = (SELECT oid FROM pg_namespace WHERE nspname = 'public')) THEN
        RAISE NOTICE '‚úÖ public.is_admin() function exists';
    ELSE
        RAISE NOTICE '‚ùå public.is_admin() function missing';
    END IF;
    
    IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'is_business_owner' AND pronamespace = (SELECT oid FROM pg_namespace WHERE nspname = 'public')) THEN
        RAISE NOTICE '‚úÖ public.is_business_owner() function exists';
    ELSE
        RAISE NOTICE '‚ùå public.is_business_owner() function missing';
    END IF;
    
    IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'owns_business' AND pronamespace = (SELECT oid FROM pg_namespace WHERE nspname = 'public')) THEN
        RAISE NOTICE '‚úÖ public.owns_business() function exists';
    ELSE
        RAISE NOTICE '‚ùå public.owns_business() function missing';
    END IF;
END $$;

-- Check 5: Verify minimal grants (should only have specific grants, not blanket)
DO $$
DECLARE
    grant_count INTEGER;
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE 'üîç Checking table permissions (minimal grants)...';
    
    -- Check for any SELECT grants on RLS-protected tables to authenticated role
    SELECT COUNT(*) INTO grant_count
    FROM information_schema.role_table_grants
    WHERE grantee = 'authenticated'
    AND privilege_type = 'SELECT'
    AND table_schema = 'public'
    AND table_name IN ('user_profiles', 'businesses', 'reviews', 'orders', 'business_views');
    
    IF grant_count = 0 THEN
        RAISE NOTICE '‚úÖ No blanket SELECT grants on RLS tables (good - policies control access)';
    ELSE
        RAISE NOTICE '‚ö†Ô∏è  Found % SELECT grants on RLS tables (may cause confusion)', grant_count;
    END IF;
    
    -- Check cuisine_types has SELECT grant (reference data)
    IF EXISTS (
        SELECT 1 FROM information_schema.role_table_grants
        WHERE grantee = 'authenticated'
        AND privilege_type = 'SELECT'
        AND table_schema = 'public'
        AND table_name = 'cuisine_types'
    ) THEN
        RAISE NOTICE '‚úÖ SELECT grant exists on cuisine_types (reference data)';
    ELSE
        RAISE NOTICE '‚ùå Missing SELECT grant on cuisine_types';
    END IF;
END $$;

-- Check 6: Sample security test (if auth context available)
-- Note: This would only work with an actual authenticated user context
-- DO $$
-- BEGIN
--     RAISE NOTICE '';
--     RAISE NOTICE 'üîç Testing sample queries with RLS...';
--     
--     -- Test basic public access
--     PERFORM * FROM businesses WHERE status = 'active' LIMIT 1;
--     RAISE NOTICE '‚úÖ Public can read active businesses';
--     
--     -- Test restricted access (this should fail for anonymous users)
--     BEGIN
--         PERFORM * FROM user_profiles LIMIT 1;
--         RAISE NOTICE '‚ö†Ô∏è  Anonymous access to user_profiles allowed (unexpected)';
--     EXCEPTION WHEN insufficient_privilege THEN
--         RAISE NOTICE '‚úÖ Anonymous access to user_profiles blocked (expected)';
--     END;
-- END $$;

-- Summary
DO $$
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE 'üéØ SECURITY VALIDATION COMPLETE - IMPROVED VERSION';
    RAISE NOTICE '';
    RAISE NOTICE 'üìã Key improvements implemented:';
    RAISE NOTICE '1. ‚úÖ Separate policies per action (SELECT/INSERT/UPDATE/DELETE)';
    RAISE NOTICE '2. ‚úÖ Helper functions for cleaner policy logic';
    RAISE NOTICE '3. ‚úÖ Minimal grants to avoid RLS conflicts';
    RAISE NOTICE '4. ‚úÖ cuisine_types without RLS (reference data)';
    RAISE NOTICE '5. ‚úÖ Fixed production site_url configuration';
    RAISE NOTICE '';
    RAISE NOTICE 'üìã Manual verification steps:';
    RAISE NOTICE '1. Test authentication flows in your application';
    RAISE NOTICE '2. Verify users can only access their own data';
    RAISE NOTICE '3. Test business owner permissions work correctly';
    RAISE NOTICE '4. Verify admin access works for all tables';
    RAISE NOTICE '5. Test anonymous/public access is properly restricted';
    RAISE NOTICE '6. Verify production site_url is correct in config.toml';
    RAISE NOTICE '';
    RAISE NOTICE 'üîó See SECURITY_IMPLEMENTATION.md for detailed testing procedures';
    RAISE NOTICE 'üìÑ Review audit fixes in .github/supabase-rls-sec-audit-fix.md';
END $$;

